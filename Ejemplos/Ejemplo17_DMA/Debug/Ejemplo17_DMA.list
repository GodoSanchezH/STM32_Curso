
Ejemplo17_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f38  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061bc  080061bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080061bc  080061bc  000161bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c4  080061c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c4  080061c4  000161c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061c8  080061c8  000161c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080061cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000230  20000070  0800623c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  0800623c  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1ad  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002024  00000000  00000000  0002f24d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df0  00000000  00000000  00031278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00032068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018375  00000000  00000000  00032d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9c9  00000000  00000000  0004b105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a726  00000000  00000000  0005aace  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f51f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  000f5244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080060c0 	.word	0x080060c0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	080060c0 	.word	0x080060c0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t rx;
uint32_t adc_read;
int __io_putchar(int ch)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch,1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f003 fc1e 	bl	8003dd6 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch,1, HAL_MAX_DELAY);
	return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001dc 	.word	0x200001dc

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f000 fd4f 	bl	8001050 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f833 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 f9db 	bl	8000970 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ba:	f000 f99b 	bl	80008f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005be:	f000 f96f 	bl	80008a0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005c2:	f000 f897 	bl	80006f4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80005c6:	f000 f8e7 	bl	8000798 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_DMA(&huart2,&rx, 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	490d      	ldr	r1, [pc, #52]	; (8000604 <main+0x5c>)
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <main+0x60>)
 80005d0:	f003 fc93 	bl	8003efa <HAL_UART_Receive_DMA>
  int dato_pwm = 4000;
 80005d4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80005d8:	607b      	str	r3, [r7, #4]
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, &dato_pwm, 1);
 80005da:	1d3a      	adds	r2, r7, #4
 80005dc:	2301      	movs	r3, #1
 80005de:	2100      	movs	r1, #0
 80005e0:	480a      	ldr	r0, [pc, #40]	; (800060c <main+0x64>)
 80005e2:	f002 fd57 	bl	8003094 <HAL_TIM_PWM_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_ADC_Start_DMA(&hadc1, &adc_read, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	4909      	ldr	r1, [pc, #36]	; (8000610 <main+0x68>)
 80005ea:	480a      	ldr	r0, [pc, #40]	; (8000614 <main+0x6c>)
 80005ec:	f000 fe0a 	bl	8001204 <HAL_ADC_Start_DMA>
	  printf("ADC READ DMA->%lu\n\r",adc_read);
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <main+0x68>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4619      	mov	r1, r3
 80005f6:	4808      	ldr	r0, [pc, #32]	; (8000618 <main+0x70>)
 80005f8:	f004 fdd4 	bl	80051a4 <iprintf>
	  HAL_Delay(200);
 80005fc:	20c8      	movs	r0, #200	; 0xc8
 80005fe:	f000 fd99 	bl	8001134 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, &adc_read, 1);
 8000602:	e7f0      	b.n	80005e6 <main+0x3e>
 8000604:	20000280 	.word	0x20000280
 8000608:	200001dc 	.word	0x200001dc
 800060c:	20000134 	.word	0x20000134
 8000610:	20000284 	.word	0x20000284
 8000614:	2000008c 	.word	0x2000008c
 8000618:	080060d8 	.word	0x080060d8

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f004 fdb2 	bl	8005194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b29      	ldr	r3, [pc, #164]	; (80006ec <SystemClock_Config+0xd0>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a28      	ldr	r2, [pc, #160]	; (80006ec <SystemClock_Config+0xd0>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <SystemClock_Config+0xd0>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b23      	ldr	r3, [pc, #140]	; (80006f0 <SystemClock_Config+0xd4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000668:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <SystemClock_Config+0xd4>)
 800066a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <SystemClock_Config+0xd4>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000690:	2310      	movs	r3, #16
 8000692:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000694:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000698:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800069e:	2307      	movs	r3, #7
 80006a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 f80c 	bl	80026c4 <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006b2:	f000 f9e5 	bl	8000a80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2302      	movs	r3, #2
 80006bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2102      	movs	r1, #2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f002 fa6e 	bl	8002bb4 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006de:	f000 f9cf 	bl	8000a80 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	; 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC1_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_ADC1_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC1_Init+0x98>)
 800070e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000712:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC1_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC1_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC1_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_ADC1_Init+0x98>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_ADC1_Init+0xa0>)
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_ADC1_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC1_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_ADC1_Init+0x98>)
 8000756:	f000 fd11 	bl	800117c <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 f98e 	bl	8000a80 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000764:	2300      	movs	r3, #0
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_ADC1_Init+0x98>)
 8000776:	f000 fe53 	bl	8001420 <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000780:	f000 f97e 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	2000008c 	.word	0x2000008c
 8000790:	40012000 	.word	0x40012000
 8000794:	0f000001 	.word	0x0f000001

08000798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b092      	sub	sp, #72	; 0x48
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
 80007b8:	615a      	str	r2, [r3, #20]
 80007ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2220      	movs	r2, #32
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f004 fce6 	bl	8005194 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007c8:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MX_TIM1_Init+0x100>)
 80007ca:	4a34      	ldr	r2, [pc, #208]	; (800089c <MX_TIM1_Init+0x104>)
 80007cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10;
 80007ce:	4b32      	ldr	r3, [pc, #200]	; (8000898 <MX_TIM1_Init+0x100>)
 80007d0:	220a      	movs	r2, #10
 80007d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b30      	ldr	r3, [pc, #192]	; (8000898 <MX_TIM1_Init+0x100>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_TIM1_Init+0x100>)
 80007dc:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80007e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e2:	4b2d      	ldr	r3, [pc, #180]	; (8000898 <MX_TIM1_Init+0x100>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007e8:	4b2b      	ldr	r3, [pc, #172]	; (8000898 <MX_TIM1_Init+0x100>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <MX_TIM1_Init+0x100>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f4:	4828      	ldr	r0, [pc, #160]	; (8000898 <MX_TIM1_Init+0x100>)
 80007f6:	f002 fbfd 	bl	8002ff4 <HAL_TIM_PWM_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000800:	f000 f93e 	bl	8000a80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000810:	4619      	mov	r1, r3
 8000812:	4821      	ldr	r0, [pc, #132]	; (8000898 <MX_TIM1_Init+0x100>)
 8000814:	f003 f9d2 	bl	8003bbc <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800081e:	f000 f92f 	bl	8000a80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000822:	2360      	movs	r3, #96	; 0x60
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800082e:	2300      	movs	r3, #0
 8000830:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000836:	2300      	movs	r3, #0
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800083a:	2300      	movs	r3, #0
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800083e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000842:	2200      	movs	r2, #0
 8000844:	4619      	mov	r1, r3
 8000846:	4814      	ldr	r0, [pc, #80]	; (8000898 <MX_TIM1_Init+0x100>)
 8000848:	f002 fdd4 	bl	80033f4 <HAL_TIM_PWM_ConfigChannel>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8000852:	f000 f915 	bl	8000a80 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800085e:	2300      	movs	r3, #0
 8000860:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800086a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800086e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	4619      	mov	r1, r3
 8000878:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_TIM1_Init+0x100>)
 800087a:	f003 fa0d 	bl	8003c98 <HAL_TIMEx_ConfigBreakDeadTime>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d001      	beq.n	8000888 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000884:	f000 f8fc 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000888:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_TIM1_Init+0x100>)
 800088a:	f000 f9f3 	bl	8000c74 <HAL_TIM_MspPostInit>

}
 800088e:	bf00      	nop
 8000890:	3748      	adds	r7, #72	; 0x48
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	20000134 	.word	0x20000134
 800089c:	40010000 	.word	0x40010000

080008a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008a6:	4a12      	ldr	r2, [pc, #72]	; (80008f0 <MX_USART2_UART_Init+0x50>)
 80008a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008c6:	220c      	movs	r2, #12
 80008c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_USART2_UART_Init+0x4c>)
 80008d8:	f003 fa30 	bl	8003d3c <HAL_UART_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008e2:	f000 f8cd 	bl	8000a80 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	200001dc 	.word	0x200001dc
 80008f0:	40004400 	.word	0x40004400

080008f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	607b      	str	r3, [r7, #4]
 80008fe:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_DMA_Init+0x78>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a1a      	ldr	r2, [pc, #104]	; (800096c <MX_DMA_Init+0x78>)
 8000904:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_DMA_Init+0x78>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000912:	607b      	str	r3, [r7, #4]
 8000914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_DMA_Init+0x78>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a13      	ldr	r2, [pc, #76]	; (800096c <MX_DMA_Init+0x78>)
 8000920:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_DMA_Init+0x78>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800092e:	603b      	str	r3, [r7, #0]
 8000930:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000932:	2200      	movs	r2, #0
 8000934:	2100      	movs	r1, #0
 8000936:	2010      	movs	r0, #16
 8000938:	f001 f8ed 	bl	8001b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800093c:	2010      	movs	r0, #16
 800093e:	f001 f906 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2038      	movs	r0, #56	; 0x38
 8000948:	f001 f8e5 	bl	8001b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800094c:	2038      	movs	r0, #56	; 0x38
 800094e:	f001 f8fe 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2039      	movs	r0, #57	; 0x39
 8000958:	f001 f8dd 	bl	8001b16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800095c:	2039      	movs	r0, #57	; 0x39
 800095e:	f001 f8f6 	bl	8001b4e <HAL_NVIC_EnableIRQ>

}
 8000962:	bf00      	nop
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800

08000970 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	; 0x28
 8000974:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b2d      	ldr	r3, [pc, #180]	; (8000a40 <MX_GPIO_Init+0xd0>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2c      	ldr	r2, [pc, #176]	; (8000a40 <MX_GPIO_Init+0xd0>)
 8000990:	f043 0304 	orr.w	r3, r3, #4
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b2a      	ldr	r3, [pc, #168]	; (8000a40 <MX_GPIO_Init+0xd0>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0304 	and.w	r3, r3, #4
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a25      	ldr	r2, [pc, #148]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60bb      	str	r3, [r7, #8]
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	4a1e      	ldr	r2, [pc, #120]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009c8:	f043 0301 	orr.w	r3, r3, #1
 80009cc:	6313      	str	r3, [r2, #48]	; 0x30
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	f003 0301 	and.w	r3, r3, #1
 80009d6:	60bb      	str	r3, [r7, #8]
 80009d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	4a17      	ldr	r2, [pc, #92]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <MX_GPIO_Init+0xd0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	607b      	str	r3, [r7, #4]
 80009f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2120      	movs	r1, #32
 80009fa:	4812      	ldr	r0, [pc, #72]	; (8000a44 <MX_GPIO_Init+0xd4>)
 80009fc:	f001 fe48 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	480c      	ldr	r0, [pc, #48]	; (8000a48 <MX_GPIO_Init+0xd8>)
 8000a18:	f001 fcb6 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a1c:	2320      	movs	r3, #32
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4619      	mov	r1, r3
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <MX_GPIO_Init+0xd4>)
 8000a34:	f001 fca8 	bl	8002388 <HAL_GPIO_Init>

}
 8000a38:	bf00      	nop
 8000a3a:	3728      	adds	r7, #40	; 0x28
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	40023800 	.word	0x40023800
 8000a44:	40020000 	.word	0x40020000
 8000a48:	40020800 	.word	0x40020800

08000a4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]

	printf("Recibido por DMA->%c\n\r",(char)rx);
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <HAL_UART_RxCpltCallback+0x28>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <HAL_UART_RxCpltCallback+0x2c>)
 8000a5c:	f004 fba2 	bl	80051a4 <iprintf>
	  HAL_UART_Receive_DMA(&huart2,&rx, 1);
 8000a60:	2201      	movs	r2, #1
 8000a62:	4904      	ldr	r1, [pc, #16]	; (8000a74 <HAL_UART_RxCpltCallback+0x28>)
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_UART_RxCpltCallback+0x30>)
 8000a66:	f003 fa48 	bl	8003efa <HAL_UART_Receive_DMA>

}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000280 	.word	0x20000280
 8000a78:	080060ec 	.word	0x080060ec
 8000a7c:	200001dc 	.word	0x200001dc

08000a80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a84:	b672      	cpsid	i
}
 8000a86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <Error_Handler+0x8>
	...

08000a8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a0f      	ldr	r2, [pc, #60]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	4a08      	ldr	r2, [pc, #32]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000abc:	6413      	str	r3, [r2, #64]	; 0x40
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_MspInit+0x4c>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aca:	2007      	movs	r0, #7
 8000acc:	f001 f818 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40023800 	.word	0x40023800

08000adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	; 0x28
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0314 	add.w	r3, r7, #20
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a2f      	ldr	r2, [pc, #188]	; (8000bb8 <HAL_ADC_MspInit+0xdc>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d157      	bne.n	8000bae <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <HAL_ADC_MspInit+0xe0>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a2d      	ldr	r2, [pc, #180]	; (8000bbc <HAL_ADC_MspInit+0xe0>)
 8000b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <HAL_ADC_MspInit+0xe0>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <HAL_ADC_MspInit+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <HAL_ADC_MspInit+0xe0>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <HAL_ADC_MspInit+0xe0>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b36:	2301      	movs	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b3a:	2303      	movs	r3, #3
 8000b3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	481d      	ldr	r0, [pc, #116]	; (8000bc0 <HAL_ADC_MspInit+0xe4>)
 8000b4a:	f001 fc1d 	bl	8002388 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b4e:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b50:	4a1d      	ldr	r2, [pc, #116]	; (8000bc8 <HAL_ADC_MspInit+0xec>)
 8000b52:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b5a:	4b1a      	ldr	r3, [pc, #104]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b60:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b66:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b8a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b8c:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000b94:	f000 fff6 	bl	8001b84 <HAL_DMA_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b9e:	f7ff ff6f 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4a07      	ldr	r2, [pc, #28]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_ADC_MspInit+0xe8>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bae:	bf00      	nop
 8000bb0:	3728      	adds	r7, #40	; 0x28
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40012000 	.word	0x40012000
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020000 	.word	0x40020000
 8000bc4:	200000d4 	.word	0x200000d4
 8000bc8:	40026410 	.word	0x40026410

08000bcc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a22      	ldr	r2, [pc, #136]	; (8000c64 <HAL_TIM_PWM_MspInit+0x98>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d13d      	bne.n	8000c5a <HAL_TIM_PWM_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <HAL_TIM_PWM_MspInit+0x9c>)
 8000be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be6:	4a20      	ldr	r2, [pc, #128]	; (8000c68 <HAL_TIM_PWM_MspInit+0x9c>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	6453      	str	r3, [r2, #68]	; 0x44
 8000bee:	4b1e      	ldr	r3, [pc, #120]	; (8000c68 <HAL_TIM_PWM_MspInit+0x9c>)
 8000bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000bfc:	4a1c      	ldr	r2, [pc, #112]	; (8000c70 <HAL_TIM_PWM_MspInit+0xa4>)
 8000bfe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c02:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000c06:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c08:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c0e:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c14:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c1a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c22:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c2a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000c3e:	480b      	ldr	r0, [pc, #44]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c40:	f000 ffa0 	bl	8001b84 <HAL_DMA_Init>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8000c4a:	f7ff ff19 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	4a06      	ldr	r2, [pc, #24]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c52:	625a      	str	r2, [r3, #36]	; 0x24
 8000c54:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <HAL_TIM_PWM_MspInit+0xa0>)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000c5a:	bf00      	nop
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40010000 	.word	0x40010000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	2000017c 	.word	0x2000017c
 8000c70:	40026428 	.word	0x40026428

08000c74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 030c 	add.w	r3, r7, #12
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <HAL_TIM_MspPostInit+0x68>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d11e      	bne.n	8000cd4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_TIM_MspPostInit+0x6c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a10      	ldr	r2, [pc, #64]	; (8000ce0 <HAL_TIM_MspPostInit+0x6c>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	; (8000ce0 <HAL_TIM_MspPostInit+0x6c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cb2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cb6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_TIM_MspPostInit+0x70>)
 8000cd0:	f001 fb5a 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3720      	adds	r7, #32
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40010000 	.word	0x40010000
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a34      	ldr	r2, [pc, #208]	; (8000dd8 <HAL_UART_MspInit+0xf0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d162      	bne.n	8000dd0 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b33      	ldr	r3, [pc, #204]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a32      	ldr	r2, [pc, #200]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b2c      	ldr	r3, [pc, #176]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a2b      	ldr	r2, [pc, #172]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b29      	ldr	r3, [pc, #164]	; (8000ddc <HAL_UART_MspInit+0xf4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d42:	230c      	movs	r3, #12
 8000d44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d52:	2307      	movs	r3, #7
 8000d54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4820      	ldr	r0, [pc, #128]	; (8000de0 <HAL_UART_MspInit+0xf8>)
 8000d5e:	f001 fb13 	bl	8002388 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000d62:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d64:	4a20      	ldr	r2, [pc, #128]	; (8000de8 <HAL_UART_MspInit+0x100>)
 8000d66:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000d68:	4b1e      	ldr	r3, [pc, #120]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d6a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d6e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d70:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d76:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d82:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000d98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d9c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000da4:	480f      	ldr	r0, [pc, #60]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000da6:	f000 feed 	bl	8001b84 <HAL_DMA_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000db0:	f7ff fe66 	bl	8000a80 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000db8:	639a      	str	r2, [r3, #56]	; 0x38
 8000dba:	4a0a      	ldr	r2, [pc, #40]	; (8000de4 <HAL_UART_MspInit+0xfc>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2026      	movs	r0, #38	; 0x26
 8000dc6:	f000 fea6 	bl	8001b16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dca:	2026      	movs	r0, #38	; 0x26
 8000dcc:	f000 febf 	bl	8001b4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40004400 	.word	0x40004400
 8000ddc:	40023800 	.word	0x40023800
 8000de0:	40020000 	.word	0x40020000
 8000de4:	20000220 	.word	0x20000220
 8000de8:	40026088 	.word	0x40026088

08000dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <NMI_Handler+0x4>

08000df2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000df6:	e7fe      	b.n	8000df6 <HardFault_Handler+0x4>

08000df8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <MemManage_Handler+0x4>

08000dfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <BusFault_Handler+0x4>

08000e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <UsageFault_Handler+0x4>

08000e0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr

08000e26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e38:	f000 f95c 	bl	80010f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e3c:	bf00      	nop
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000e44:	4802      	ldr	r0, [pc, #8]	; (8000e50 <DMA1_Stream5_IRQHandler+0x10>)
 8000e46:	f001 f835 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000220 	.word	0x20000220

08000e54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e58:	4802      	ldr	r0, [pc, #8]	; (8000e64 <USART2_IRQHandler+0x10>)
 8000e5a:	f003 f87f 	bl	8003f5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001dc 	.word	0x200001dc

08000e68 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <DMA2_Stream0_IRQHandler+0x10>)
 8000e6e:	f001 f821 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200000d4 	.word	0x200000d4

08000e7c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <DMA2_Stream1_IRQHandler+0x10>)
 8000e82:	f001 f817 	bl	8001eb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	2000017c 	.word	0x2000017c

08000e90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	e00a      	b.n	8000eb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ea2:	f3af 8000 	nop.w
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	b2ca      	uxtb	r2, r1
 8000eb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	697a      	ldr	r2, [r7, #20]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	dbf0      	blt.n	8000ea2 <_read+0x12>
  }

  return len;
 8000ec0:	687b      	ldr	r3, [r7, #4]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	60f8      	str	r0, [r7, #12]
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	e009      	b.n	8000ef0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	1c5a      	adds	r2, r3, #1
 8000ee0:	60ba      	str	r2, [r7, #8]
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fb4d 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	dbf1      	blt.n	8000edc <_write+0x12>
  }
  return len;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_close>:

int _close(int file)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr

08000f1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	b083      	sub	sp, #12
 8000f1e:	af00      	add	r7, sp, #0
 8000f20:	6078      	str	r0, [r7, #4]
 8000f22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_isatty>:

int _isatty(int file)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f42:	2301      	movs	r3, #1
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b085      	sub	sp, #20
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
	...

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	; (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	; (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f004 f8d0 	bl	8005140 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	; (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	; (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	; (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20018000 	.word	0x20018000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	20000288 	.word	0x20000288
 8000fd4:	200002a0 	.word	0x200002a0

08000fd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SystemInit+0x20>)
 8000fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe2:	4a05      	ldr	r2, [pc, #20]	; (8000ff8 <SystemInit+0x20>)
 8000fe4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fec:	bf00      	nop
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001002:	490e      	ldr	r1, [pc, #56]	; (800103c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001004:	4a0e      	ldr	r2, [pc, #56]	; (8001040 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001008:	e002      	b.n	8001010 <LoopCopyDataInit>

0800100a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800100c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800100e:	3304      	adds	r3, #4

08001010 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001010:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001012:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001014:	d3f9      	bcc.n	800100a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001016:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001018:	4c0b      	ldr	r4, [pc, #44]	; (8001048 <LoopFillZerobss+0x26>)
  movs r3, #0
 800101a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800101c:	e001      	b.n	8001022 <LoopFillZerobss>

0800101e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800101e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001020:	3204      	adds	r2, #4

08001022 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001022:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001024:	d3fb      	bcc.n	800101e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001026:	f7ff ffd7 	bl	8000fd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800102a:	f004 f88f 	bl	800514c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800102e:	f7ff fabb 	bl	80005a8 <main>
  bx  lr    
 8001032:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001034:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001040:	080061cc 	.word	0x080061cc
  ldr r2, =_sbss
 8001044:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001048:	200002a0 	.word	0x200002a0

0800104c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC_IRQHandler>
	...

08001050 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001054:	4b0e      	ldr	r3, [pc, #56]	; (8001090 <HAL_Init+0x40>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <HAL_Init+0x40>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800105e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <HAL_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <HAL_Init+0x40>)
 8001066:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800106a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <HAL_Init+0x40>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <HAL_Init+0x40>)
 8001072:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001076:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001078:	2003      	movs	r0, #3
 800107a:	f000 fd41 	bl	8001b00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800107e:	2000      	movs	r0, #0
 8001080:	f000 f808 	bl	8001094 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001084:	f7ff fd02 	bl	8000a8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001088:	2300      	movs	r3, #0
}
 800108a:	4618      	mov	r0, r3
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40023c00 	.word	0x40023c00

08001094 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800109c:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_InitTick+0x54>)
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <HAL_InitTick+0x58>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80010ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f000 fd59 	bl	8001b6a <HAL_SYSTICK_Config>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e00e      	b.n	80010e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b0f      	cmp	r3, #15
 80010c6:	d80a      	bhi.n	80010de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010c8:	2200      	movs	r2, #0
 80010ca:	6879      	ldr	r1, [r7, #4]
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f000 fd21 	bl	8001b16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010d4:	4a06      	ldr	r2, [pc, #24]	; (80010f0 <HAL_InitTick+0x5c>)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	e000      	b.n	80010e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	20000000 	.word	0x20000000
 80010ec:	20000008 	.word	0x20000008
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_IncTick+0x20>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	461a      	mov	r2, r3
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_IncTick+0x24>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4413      	add	r3, r2
 8001104:	4a04      	ldr	r2, [pc, #16]	; (8001118 <HAL_IncTick+0x24>)
 8001106:	6013      	str	r3, [r2, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000008 	.word	0x20000008
 8001118:	2000028c 	.word	0x2000028c

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000028c 	.word	0x2000028c

08001134 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800113c:	f7ff ffee 	bl	800111c <HAL_GetTick>
 8001140:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800114c:	d005      	beq.n	800115a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_Delay+0x44>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	461a      	mov	r2, r3
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	4413      	add	r3, r2
 8001158:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800115a:	bf00      	nop
 800115c:	f7ff ffde 	bl	800111c <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	429a      	cmp	r2, r3
 800116a:	d8f7      	bhi.n	800115c <HAL_Delay+0x28>
  {
  }
}
 800116c:	bf00      	nop
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e033      	b.n	80011fa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fc9e 	bl	8000adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2200      	movs	r2, #0
 80011aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 0310 	and.w	r3, r3, #16
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d118      	bne.n	80011ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011c2:	f023 0302 	bic.w	r3, r3, #2
 80011c6:	f043 0202 	orr.w	r2, r3, #2
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 fa48 	bl	8001664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f023 0303 	bic.w	r3, r3, #3
 80011e2:	f043 0201 	orr.w	r2, r3, #1
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	641a      	str	r2, [r3, #64]	; 0x40
 80011ea:	e001      	b.n	80011f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
	...

08001204 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121a:	2b01      	cmp	r3, #1
 800121c:	d101      	bne.n	8001222 <HAL_ADC_Start_DMA+0x1e>
 800121e:	2302      	movs	r3, #2
 8001220:	e0ce      	b.n	80013c0 <HAL_ADC_Start_DMA+0x1bc>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	2b01      	cmp	r3, #1
 8001236:	d018      	beq.n	800126a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f042 0201 	orr.w	r2, r2, #1
 8001246:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001248:	4b5f      	ldr	r3, [pc, #380]	; (80013c8 <HAL_ADC_Start_DMA+0x1c4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a5f      	ldr	r2, [pc, #380]	; (80013cc <HAL_ADC_Start_DMA+0x1c8>)
 800124e:	fba2 2303 	umull	r2, r3, r2, r3
 8001252:	0c9a      	lsrs	r2, r3, #18
 8001254:	4613      	mov	r3, r2
 8001256:	005b      	lsls	r3, r3, #1
 8001258:	4413      	add	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800125c:	e002      	b.n	8001264 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	3b01      	subs	r3, #1
 8001262:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001278:	d107      	bne.n	800128a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001288:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 8086 	bne.w	80013a6 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d007      	beq.n	80012cc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80012c4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012d8:	d106      	bne.n	80012e8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	f023 0206 	bic.w	r2, r3, #6
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	645a      	str	r2, [r3, #68]	; 0x44
 80012e6:	e002      	b.n	80012ee <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	2200      	movs	r2, #0
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2200      	movs	r2, #0
 80012f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <HAL_ADC_Start_DMA+0x1cc>)
 80012f8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012fe:	4a35      	ldr	r2, [pc, #212]	; (80013d4 <HAL_ADC_Start_DMA+0x1d0>)
 8001300:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001306:	4a34      	ldr	r2, [pc, #208]	; (80013d8 <HAL_ADC_Start_DMA+0x1d4>)
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800130e:	4a33      	ldr	r2, [pc, #204]	; (80013dc <HAL_ADC_Start_DMA+0x1d8>)
 8001310:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800131a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800132a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800133a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	334c      	adds	r3, #76	; 0x4c
 8001346:	4619      	mov	r1, r3
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f000 fcc8 	bl	8001ce0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 031f 	and.w	r3, r3, #31
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10f      	bne.n	800137c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d129      	bne.n	80013be <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	e020      	b.n	80013be <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a17      	ldr	r2, [pc, #92]	; (80013e0 <HAL_ADC_Start_DMA+0x1dc>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d11b      	bne.n	80013be <HAL_ADC_Start_DMA+0x1ba>
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d114      	bne.n	80013be <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	e00b      	b.n	80013be <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f043 0210 	orr.w	r2, r3, #16
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b6:	f043 0201 	orr.w	r2, r3, #1
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20000000 	.word	0x20000000
 80013cc:	431bde83 	.word	0x431bde83
 80013d0:	40012300 	.word	0x40012300
 80013d4:	0800185d 	.word	0x0800185d
 80013d8:	08001917 	.word	0x08001917
 80013dc:	08001933 	.word	0x08001933
 80013e0:	40012000 	.word	0x40012000

080013e4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1c>
 8001438:	2302      	movs	r3, #2
 800143a:	e105      	b.n	8001648 <HAL_ADC_ConfigChannel+0x228>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b09      	cmp	r3, #9
 800144a:	d925      	bls.n	8001498 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68d9      	ldr	r1, [r3, #12]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	3b1e      	subs	r3, #30
 8001462:	2207      	movs	r2, #7
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43da      	mvns	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	400a      	ands	r2, r1
 8001470:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68d9      	ldr	r1, [r3, #12]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4403      	add	r3, r0
 800148a:	3b1e      	subs	r3, #30
 800148c:	409a      	lsls	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	e022      	b.n	80014de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6919      	ldr	r1, [r3, #16]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	2207      	movs	r2, #7
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	400a      	ands	r2, r1
 80014ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6919      	ldr	r1, [r3, #16]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4403      	add	r3, r0
 80014d4:	409a      	lsls	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d824      	bhi.n	8001530 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b05      	subs	r3, #5
 80014f8:	221f      	movs	r2, #31
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	400a      	ands	r2, r1
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b05      	subs	r3, #5
 8001522:	fa00 f203 	lsl.w	r2, r0, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
 800152e:	e04c      	b.n	80015ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d824      	bhi.n	8001582 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	3b23      	subs	r3, #35	; 0x23
 800154a:	221f      	movs	r2, #31
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43da      	mvns	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	400a      	ands	r2, r1
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b23      	subs	r3, #35	; 0x23
 8001574:	fa00 f203 	lsl.w	r2, r0, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
 8001580:	e023      	b.n	80015ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3b41      	subs	r3, #65	; 0x41
 8001594:	221f      	movs	r2, #31
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	400a      	ands	r2, r1
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b41      	subs	r3, #65	; 0x41
 80015be:	fa00 f203 	lsl.w	r2, r0, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_ADC_ConfigChannel+0x234>)
 80015cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_ADC_ConfigChannel+0x238>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d109      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1cc>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b12      	cmp	r3, #18
 80015de:	d105      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_ADC_ConfigChannel+0x238>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d123      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d003      	beq.n	8001606 <HAL_ADC_ConfigChannel+0x1e6>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b11      	cmp	r3, #17
 8001604:	d11b      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d111      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_ADC_ConfigChannel+0x23c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_ADC_ConfigChannel+0x240>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9a      	lsrs	r2, r3, #18
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001630:	e002      	b.n	8001638 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3b01      	subs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40012300 	.word	0x40012300
 8001658:	40012000 	.word	0x40012000
 800165c:	20000000 	.word	0x20000000
 8001660:	431bde83 	.word	0x431bde83

08001664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166c:	4b79      	ldr	r3, [pc, #484]	; (8001854 <ADC_Init+0x1f0>)
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	431a      	orrs	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	021a      	lsls	r2, r3, #8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <ADC_Init+0x1f4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800170a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800172c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e00f      	b.n	8001762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0202 	bic.w	r2, r2, #2
 8001770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
 800177c:	005a      	lsls	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01b      	beq.n	80017c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800179e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	3b01      	subs	r3, #1
 80017bc:	035a      	lsls	r2, r3, #13
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e007      	b.n	80017d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	051a      	lsls	r2, r3, #20
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800180c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181a:	025a      	lsls	r2, r3, #9
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	029a      	lsls	r2, r3, #10
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40012300 	.word	0x40012300
 8001858:	0f000001 	.word	0x0f000001

0800185c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001868:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001872:	2b00      	cmp	r3, #0
 8001874:	d13c      	bne.n	80018f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d12b      	bne.n	80018e8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001894:	2b00      	cmp	r3, #0
 8001896:	d127      	bne.n	80018e8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800189e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d119      	bne.n	80018e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0220 	bic.w	r2, r2, #32
 80018c2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f7ff fd7b 	bl	80013e4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80018ee:	e00e      	b.n	800190e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d003      	beq.n	8001904 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7ff fd85 	bl	800140c <HAL_ADC_ErrorCallback>
}
 8001902:	e004      	b.n	800190e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	4798      	blx	r3
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001924:	68f8      	ldr	r0, [r7, #12]
 8001926:	f7ff fd67 	bl	80013f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800192a:	bf00      	nop
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}

08001932 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001932:	b580      	push	{r7, lr}
 8001934:	b084      	sub	sp, #16
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2240      	movs	r2, #64	; 0x40
 8001944:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f043 0204 	orr.w	r2, r3, #4
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001952:	68f8      	ldr	r0, [r7, #12]
 8001954:	f7ff fd5a 	bl	800140c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001958:	bf00      	nop
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800197c:	4013      	ands	r3, r2
 800197e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001988:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ac:	4b04      	ldr	r3, [pc, #16]	; (80019c0 <__NVIC_GetPriorityGrouping+0x18>)
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	0a1b      	lsrs	r3, r3, #8
 80019b2:	f003 0307 	and.w	r3, r3, #7
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	4603      	mov	r3, r0
 80019cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	db0b      	blt.n	80019ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	f003 021f 	and.w	r2, r3, #31
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <__NVIC_EnableIRQ+0x38>)
 80019de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e2:	095b      	lsrs	r3, r3, #5
 80019e4:	2001      	movs	r0, #1
 80019e6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000e100 	.word	0xe000e100

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	4603      	mov	r3, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	db0a      	blt.n	8001a2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	490c      	ldr	r1, [pc, #48]	; (8001a4c <__NVIC_SetPriority+0x4c>)
 8001a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1e:	0112      	lsls	r2, r2, #4
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	440b      	add	r3, r1
 8001a24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a28:	e00a      	b.n	8001a40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4908      	ldr	r1, [pc, #32]	; (8001a50 <__NVIC_SetPriority+0x50>)
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	f003 030f 	and.w	r3, r3, #15
 8001a36:	3b04      	subs	r3, #4
 8001a38:	0112      	lsls	r2, r2, #4
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	440b      	add	r3, r1
 8001a3e:	761a      	strb	r2, [r3, #24]
}
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000e100 	.word	0xe000e100
 8001a50:	e000ed00 	.word	0xe000ed00

08001a54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	f1c3 0307 	rsb	r3, r3, #7
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	bf28      	it	cs
 8001a72:	2304      	movcs	r3, #4
 8001a74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d902      	bls.n	8001a84 <NVIC_EncodePriority+0x30>
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	3b03      	subs	r3, #3
 8001a82:	e000      	b.n	8001a86 <NVIC_EncodePriority+0x32>
 8001a84:	2300      	movs	r3, #0
 8001a86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a88:	f04f 32ff 	mov.w	r2, #4294967295
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43da      	mvns	r2, r3
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	401a      	ands	r2, r3
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aac:	4313      	orrs	r3, r2
         );
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3724      	adds	r7, #36	; 0x24
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001acc:	d301      	bcc.n	8001ad2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00f      	b.n	8001af2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad2:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <SysTick_Config+0x40>)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ada:	210f      	movs	r1, #15
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f7ff ff8e 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <SysTick_Config+0x40>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aea:	4b04      	ldr	r3, [pc, #16]	; (8001afc <SysTick_Config+0x40>)
 8001aec:	2207      	movs	r2, #7
 8001aee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	e000e010 	.word	0xe000e010

08001b00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f7ff ff29 	bl	8001960 <__NVIC_SetPriorityGrouping>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b086      	sub	sp, #24
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	60b9      	str	r1, [r7, #8]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b28:	f7ff ff3e 	bl	80019a8 <__NVIC_GetPriorityGrouping>
 8001b2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	68b9      	ldr	r1, [r7, #8]
 8001b32:	6978      	ldr	r0, [r7, #20]
 8001b34:	f7ff ff8e 	bl	8001a54 <NVIC_EncodePriority>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	bf00      	nop
 8001b48:	3718      	adds	r7, #24
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	4603      	mov	r3, r0
 8001b56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff31 	bl	80019c4 <__NVIC_EnableIRQ>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f7ff ffa2 	bl	8001abc <SysTick_Config>
 8001b78:	4603      	mov	r3, r0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff fac4 	bl	800111c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e099      	b.n	8001cd4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 0201 	bic.w	r2, r2, #1
 8001bbe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bc0:	e00f      	b.n	8001be2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bc2:	f7ff faab 	bl	800111c <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b05      	cmp	r3, #5
 8001bce:	d908      	bls.n	8001be2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2220      	movs	r2, #32
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2203      	movs	r2, #3
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e078      	b.n	8001cd4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d1e8      	bne.n	8001bc2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	4b38      	ldr	r3, [pc, #224]	; (8001cdc <HAL_DMA_Init+0x158>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c26:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a1b      	ldr	r3, [r3, #32]
 8001c2c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c38:	2b04      	cmp	r3, #4
 8001c3a:	d107      	bne.n	8001c4c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c44:	4313      	orrs	r3, r2
 8001c46:	697a      	ldr	r2, [r7, #20]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f023 0307 	bic.w	r3, r3, #7
 8001c62:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c72:	2b04      	cmp	r3, #4
 8001c74:	d117      	bne.n	8001ca6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f000 fb01 	bl	8002290 <DMA_CheckFifoParam>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d008      	beq.n	8001ca6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2240      	movs	r2, #64	; 0x40
 8001c98:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e016      	b.n	8001cd4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fab8 	bl	8002224 <DMA_CalcBaseAndBitshift>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	223f      	movs	r2, #63	; 0x3f
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3718      	adds	r7, #24
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	f010803f 	.word	0xf010803f

08001ce0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
 8001cec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Start_IT+0x26>
 8001d02:	2302      	movs	r3, #2
 8001d04:	e040      	b.n	8001d88 <HAL_DMA_Start_IT+0xa8>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d12f      	bne.n	8001d7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	68b9      	ldr	r1, [r7, #8]
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 fa4a 	bl	80021c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d38:	223f      	movs	r2, #63	; 0x3f
 8001d3a:	409a      	lsls	r2, r3
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0216 	orr.w	r2, r2, #22
 8001d4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d007      	beq.n	8001d68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f042 0208 	orr.w	r2, r2, #8
 8001d66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	e005      	b.n	8001d86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001d86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b084      	sub	sp, #16
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d9e:	f7ff f9bd 	bl	800111c <HAL_GetTick>
 8001da2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d008      	beq.n	8001dc2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e052      	b.n	8001e68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 0216 	bic.w	r2, r2, #22
 8001dd0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001de0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d103      	bne.n	8001df2 <HAL_DMA_Abort+0x62>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f022 0208 	bic.w	r2, r2, #8
 8001e00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0201 	bic.w	r2, r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e12:	e013      	b.n	8001e3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e14:	f7ff f982 	bl	800111c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b05      	cmp	r3, #5
 8001e20:	d90c      	bls.n	8001e3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2220      	movs	r2, #32
 8001e26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2203      	movs	r2, #3
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e015      	b.n	8001e68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1e4      	bne.n	8001e14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4e:	223f      	movs	r2, #63	; 0x3f
 8001e50:	409a      	lsls	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d004      	beq.n	8001e8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e00c      	b.n	8001ea8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2205      	movs	r2, #5
 8001e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b086      	sub	sp, #24
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ec0:	4b8e      	ldr	r3, [pc, #568]	; (80020fc <HAL_DMA_IRQHandler+0x248>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a8e      	ldr	r2, [pc, #568]	; (8002100 <HAL_DMA_IRQHandler+0x24c>)
 8001ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eca:	0a9b      	lsrs	r3, r3, #10
 8001ecc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ede:	2208      	movs	r2, #8
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d01a      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d013      	beq.n	8001f20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0204 	bic.w	r2, r2, #4
 8001f06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	2208      	movs	r2, #8
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2201      	movs	r2, #1
 8001f26:	409a      	lsls	r2, r3
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d012      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00b      	beq.n	8001f56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2201      	movs	r2, #1
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4e:	f043 0202 	orr.w	r2, r3, #2
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2204      	movs	r2, #4
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d012      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d00b      	beq.n	8001f8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	2204      	movs	r2, #4
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f84:	f043 0204 	orr.w	r2, r3, #4
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	2210      	movs	r2, #16
 8001f92:	409a      	lsls	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4013      	ands	r3, r2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d043      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d03c      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2210      	movs	r2, #16
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d018      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d108      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d024      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
 8001fe2:	e01f      	b.n	8002024 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	4798      	blx	r3
 8001ff4:	e016      	b.n	8002024 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d107      	bne.n	8002014 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0208 	bic.w	r2, r2, #8
 8002012:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002028:	2220      	movs	r2, #32
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 808f 	beq.w	8002154 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 8087 	beq.w	8002154 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204a:	2220      	movs	r2, #32
 800204c:	409a      	lsls	r2, r3
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b05      	cmp	r3, #5
 800205c:	d136      	bne.n	80020cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0216 	bic.w	r2, r2, #22
 800206c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	695a      	ldr	r2, [r3, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800207c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	2b00      	cmp	r3, #0
 8002084:	d103      	bne.n	800208e <HAL_DMA_IRQHandler+0x1da>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 0208 	bic.w	r2, r2, #8
 800209c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a2:	223f      	movs	r2, #63	; 0x3f
 80020a4:	409a      	lsls	r2, r3
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2200      	movs	r2, #0
 80020b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d07e      	beq.n	80021c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	4798      	blx	r3
        }
        return;
 80020ca:	e079      	b.n	80021c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d01d      	beq.n	8002116 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10d      	bne.n	8002104 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d031      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	4798      	blx	r3
 80020f8:	e02c      	b.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
 80020fa:	bf00      	nop
 80020fc:	20000000 	.word	0x20000000
 8002100:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002108:	2b00      	cmp	r3, #0
 800210a:	d023      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	4798      	blx	r3
 8002114:	e01e      	b.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10f      	bne.n	8002144 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f022 0210 	bic.w	r2, r2, #16
 8002132:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002158:	2b00      	cmp	r3, #0
 800215a:	d032      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002160:	f003 0301 	and.w	r3, r3, #1
 8002164:	2b00      	cmp	r3, #0
 8002166:	d022      	beq.n	80021ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2205      	movs	r2, #5
 800216c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	3301      	adds	r3, #1
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	697a      	ldr	r2, [r7, #20]
 8002188:	429a      	cmp	r2, r3
 800218a:	d307      	bcc.n	800219c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	d1f2      	bne.n	8002180 <HAL_DMA_IRQHandler+0x2cc>
 800219a:	e000      	b.n	800219e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800219c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d005      	beq.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	4798      	blx	r3
 80021be:	e000      	b.n	80021c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021c0:	bf00      	nop
    }
  }
}
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	2b40      	cmp	r3, #64	; 0x40
 80021f4:	d108      	bne.n	8002208 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002206:	e007      	b.n	8002218 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	60da      	str	r2, [r3, #12]
}
 8002218:	bf00      	nop
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002224:	b480      	push	{r7}
 8002226:	b085      	sub	sp, #20
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	3b10      	subs	r3, #16
 8002234:	4a14      	ldr	r2, [pc, #80]	; (8002288 <DMA_CalcBaseAndBitshift+0x64>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800223e:	4a13      	ldr	r2, [pc, #76]	; (800228c <DMA_CalcBaseAndBitshift+0x68>)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d909      	bls.n	8002266 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800225a:	f023 0303 	bic.w	r3, r3, #3
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	659a      	str	r2, [r3, #88]	; 0x58
 8002264:	e007      	b.n	8002276 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800226e:	f023 0303 	bic.w	r3, r3, #3
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	aaaaaaab 	.word	0xaaaaaaab
 800228c:	0800611c 	.word	0x0800611c

08002290 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d11f      	bne.n	80022ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d856      	bhi.n	800235e <DMA_CheckFifoParam+0xce>
 80022b0:	a201      	add	r2, pc, #4	; (adr r2, 80022b8 <DMA_CheckFifoParam+0x28>)
 80022b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b6:	bf00      	nop
 80022b8:	080022c9 	.word	0x080022c9
 80022bc:	080022db 	.word	0x080022db
 80022c0:	080022c9 	.word	0x080022c9
 80022c4:	0800235f 	.word	0x0800235f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d046      	beq.n	8002362 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d8:	e043      	b.n	8002362 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022e2:	d140      	bne.n	8002366 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022e8:	e03d      	b.n	8002366 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f2:	d121      	bne.n	8002338 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d837      	bhi.n	800236a <DMA_CheckFifoParam+0xda>
 80022fa:	a201      	add	r2, pc, #4	; (adr r2, 8002300 <DMA_CheckFifoParam+0x70>)
 80022fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002300:	08002311 	.word	0x08002311
 8002304:	08002317 	.word	0x08002317
 8002308:	08002311 	.word	0x08002311
 800230c:	08002329 	.word	0x08002329
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	73fb      	strb	r3, [r7, #15]
      break;
 8002314:	e030      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d025      	beq.n	800236e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002326:	e022      	b.n	800236e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002330:	d11f      	bne.n	8002372 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002336:	e01c      	b.n	8002372 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d903      	bls.n	8002346 <DMA_CheckFifoParam+0xb6>
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d003      	beq.n	800234c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002344:	e018      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	73fb      	strb	r3, [r7, #15]
      break;
 800234a:	e015      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	73fb      	strb	r3, [r7, #15]
      break;
 800235c:	e00b      	b.n	8002376 <DMA_CheckFifoParam+0xe6>
      break;
 800235e:	bf00      	nop
 8002360:	e00a      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002362:	bf00      	nop
 8002364:	e008      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002366:	bf00      	nop
 8002368:	e006      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 800236a:	bf00      	nop
 800236c:	e004      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 800236e:	bf00      	nop
 8002370:	e002      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;   
 8002372:	bf00      	nop
 8002374:	e000      	b.n	8002378 <DMA_CheckFifoParam+0xe8>
      break;
 8002376:	bf00      	nop
    }
  } 
  
  return status; 
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e159      	b.n	8002658 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 8148 	bne.w	8002652 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d005      	beq.n	80023da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d130      	bne.n	800243c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	2203      	movs	r2, #3
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002410:	2201      	movs	r2, #1
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	f003 0201 	and.w	r2, r3, #1
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 0303 	and.w	r3, r3, #3
 8002444:	2b03      	cmp	r3, #3
 8002446:	d017      	beq.n	8002478 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	2203      	movs	r2, #3
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d123      	bne.n	80024cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80a2 	beq.w	8002652 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b57      	ldr	r3, [pc, #348]	; (8002670 <HAL_GPIO_Init+0x2e8>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a56      	ldr	r2, [pc, #344]	; (8002670 <HAL_GPIO_Init+0x2e8>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b54      	ldr	r3, [pc, #336]	; (8002670 <HAL_GPIO_Init+0x2e8>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800252a:	4a52      	ldr	r2, [pc, #328]	; (8002674 <HAL_GPIO_Init+0x2ec>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a49      	ldr	r2, [pc, #292]	; (8002678 <HAL_GPIO_Init+0x2f0>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d019      	beq.n	800258a <HAL_GPIO_Init+0x202>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a48      	ldr	r2, [pc, #288]	; (800267c <HAL_GPIO_Init+0x2f4>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d013      	beq.n	8002586 <HAL_GPIO_Init+0x1fe>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a47      	ldr	r2, [pc, #284]	; (8002680 <HAL_GPIO_Init+0x2f8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d00d      	beq.n	8002582 <HAL_GPIO_Init+0x1fa>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a46      	ldr	r2, [pc, #280]	; (8002684 <HAL_GPIO_Init+0x2fc>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d007      	beq.n	800257e <HAL_GPIO_Init+0x1f6>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a45      	ldr	r2, [pc, #276]	; (8002688 <HAL_GPIO_Init+0x300>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d101      	bne.n	800257a <HAL_GPIO_Init+0x1f2>
 8002576:	2304      	movs	r3, #4
 8002578:	e008      	b.n	800258c <HAL_GPIO_Init+0x204>
 800257a:	2307      	movs	r3, #7
 800257c:	e006      	b.n	800258c <HAL_GPIO_Init+0x204>
 800257e:	2303      	movs	r3, #3
 8002580:	e004      	b.n	800258c <HAL_GPIO_Init+0x204>
 8002582:	2302      	movs	r3, #2
 8002584:	e002      	b.n	800258c <HAL_GPIO_Init+0x204>
 8002586:	2301      	movs	r3, #1
 8002588:	e000      	b.n	800258c <HAL_GPIO_Init+0x204>
 800258a:	2300      	movs	r3, #0
 800258c:	69fa      	ldr	r2, [r7, #28]
 800258e:	f002 0203 	and.w	r2, r2, #3
 8002592:	0092      	lsls	r2, r2, #2
 8002594:	4093      	lsls	r3, r2
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800259c:	4935      	ldr	r1, [pc, #212]	; (8002674 <HAL_GPIO_Init+0x2ec>)
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	3302      	adds	r3, #2
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025aa:	4b38      	ldr	r3, [pc, #224]	; (800268c <HAL_GPIO_Init+0x304>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	43db      	mvns	r3, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4013      	ands	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ce:	4a2f      	ldr	r2, [pc, #188]	; (800268c <HAL_GPIO_Init+0x304>)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d4:	4b2d      	ldr	r3, [pc, #180]	; (800268c <HAL_GPIO_Init+0x304>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	43db      	mvns	r3, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025f8:	4a24      	ldr	r2, [pc, #144]	; (800268c <HAL_GPIO_Init+0x304>)
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025fe:	4b23      	ldr	r3, [pc, #140]	; (800268c <HAL_GPIO_Init+0x304>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002622:	4a1a      	ldr	r2, [pc, #104]	; (800268c <HAL_GPIO_Init+0x304>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002628:	4b18      	ldr	r3, [pc, #96]	; (800268c <HAL_GPIO_Init+0x304>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800264c:	4a0f      	ldr	r2, [pc, #60]	; (800268c <HAL_GPIO_Init+0x304>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3301      	adds	r3, #1
 8002656:	61fb      	str	r3, [r7, #28]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	2b0f      	cmp	r3, #15
 800265c:	f67f aea2 	bls.w	80023a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3724      	adds	r7, #36	; 0x24
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40023800 	.word	0x40023800
 8002674:	40013800 	.word	0x40013800
 8002678:	40020000 	.word	0x40020000
 800267c:	40020400 	.word	0x40020400
 8002680:	40020800 	.word	0x40020800
 8002684:	40020c00 	.word	0x40020c00
 8002688:	40021000 	.word	0x40021000
 800268c:	40013c00 	.word	0x40013c00

08002690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026ac:	e003      	b.n	80026b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e267      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d075      	beq.n	80027ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026e2:	4b88      	ldr	r3, [pc, #544]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d00c      	beq.n	8002708 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ee:	4b85      	ldr	r3, [pc, #532]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d112      	bne.n	8002720 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026fa:	4b82      	ldr	r3, [pc, #520]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002706:	d10b      	bne.n	8002720 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002708:	4b7e      	ldr	r3, [pc, #504]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d05b      	beq.n	80027cc <HAL_RCC_OscConfig+0x108>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d157      	bne.n	80027cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e242      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002728:	d106      	bne.n	8002738 <HAL_RCC_OscConfig+0x74>
 800272a:	4b76      	ldr	r3, [pc, #472]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a75      	ldr	r2, [pc, #468]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xb0>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x98>
 8002742:	4b70      	ldr	r3, [pc, #448]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a6f      	ldr	r2, [pc, #444]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b6d      	ldr	r3, [pc, #436]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a6c      	ldr	r2, [pc, #432]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xb0>
 800275c:	4b69      	ldr	r3, [pc, #420]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a68      	ldr	r2, [pc, #416]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b66      	ldr	r3, [pc, #408]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a65      	ldr	r2, [pc, #404]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277c:	f7fe fcce 	bl	800111c <HAL_GetTick>
 8002780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fcca 	bl	800111c <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	693b      	ldr	r3, [r7, #16]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e207      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002796:	4b5b      	ldr	r3, [pc, #364]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xc0>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fcba 	bl	800111c <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fcb6 	bl	800111c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1f3      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027be:	4b51      	ldr	r3, [pc, #324]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0xe8>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d063      	beq.n	80028a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027da:	4b4a      	ldr	r3, [pc, #296]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00b      	beq.n	80027fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027e6:	4b47      	ldr	r3, [pc, #284]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11c      	bne.n	800282c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027f2:	4b44      	ldr	r3, [pc, #272]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d116      	bne.n	800282c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027fe:	4b41      	ldr	r3, [pc, #260]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x152>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d001      	beq.n	8002816 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e1c7      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002816:	4b3b      	ldr	r3, [pc, #236]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	4937      	ldr	r1, [pc, #220]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282a:	e03a      	b.n	80028a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d020      	beq.n	8002876 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002834:	4b34      	ldr	r3, [pc, #208]	; (8002908 <HAL_RCC_OscConfig+0x244>)
 8002836:	2201      	movs	r2, #1
 8002838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fc6f 	bl	800111c <HAL_GetTick>
 800283e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe fc6b 	bl	800111c <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e1a8      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002854:	4b2b      	ldr	r3, [pc, #172]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0f0      	beq.n	8002842 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b28      	ldr	r3, [pc, #160]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4925      	ldr	r1, [pc, #148]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002870:	4313      	orrs	r3, r2
 8002872:	600b      	str	r3, [r1, #0]
 8002874:	e015      	b.n	80028a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002876:	4b24      	ldr	r3, [pc, #144]	; (8002908 <HAL_RCC_OscConfig+0x244>)
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287c:	f7fe fc4e 	bl	800111c <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002884:	f7fe fc4a 	bl	800111c <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e187      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0308 	and.w	r3, r3, #8
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d036      	beq.n	800291c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d016      	beq.n	80028e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b6:	4b15      	ldr	r3, [pc, #84]	; (800290c <HAL_RCC_OscConfig+0x248>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe fc2e 	bl	800111c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028c4:	f7fe fc2a 	bl	800111c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e167      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_OscConfig+0x240>)
 80028d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028da:	f003 0302 	and.w	r3, r3, #2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d0f0      	beq.n	80028c4 <HAL_RCC_OscConfig+0x200>
 80028e2:	e01b      	b.n	800291c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <HAL_RCC_OscConfig+0x248>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe fc17 	bl	800111c <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028f0:	e00e      	b.n	8002910 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028f2:	f7fe fc13 	bl	800111c <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d907      	bls.n	8002910 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e150      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
 8002904:	40023800 	.word	0x40023800
 8002908:	42470000 	.word	0x42470000
 800290c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002910:	4b88      	ldr	r3, [pc, #544]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002912:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b00      	cmp	r3, #0
 800291a:	d1ea      	bne.n	80028f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	f000 8097 	beq.w	8002a58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800292a:	2300      	movs	r3, #0
 800292c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800292e:	4b81      	ldr	r3, [pc, #516]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d10f      	bne.n	800295a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	4b7d      	ldr	r3, [pc, #500]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	4a7c      	ldr	r2, [pc, #496]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002948:	6413      	str	r3, [r2, #64]	; 0x40
 800294a:	4b7a      	ldr	r3, [pc, #488]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002956:	2301      	movs	r3, #1
 8002958:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295a:	4b77      	ldr	r3, [pc, #476]	; (8002b38 <HAL_RCC_OscConfig+0x474>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002962:	2b00      	cmp	r3, #0
 8002964:	d118      	bne.n	8002998 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002966:	4b74      	ldr	r3, [pc, #464]	; (8002b38 <HAL_RCC_OscConfig+0x474>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a73      	ldr	r2, [pc, #460]	; (8002b38 <HAL_RCC_OscConfig+0x474>)
 800296c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002972:	f7fe fbd3 	bl	800111c <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002978:	e008      	b.n	800298c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297a:	f7fe fbcf 	bl	800111c <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e10c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298c:	4b6a      	ldr	r3, [pc, #424]	; (8002b38 <HAL_RCC_OscConfig+0x474>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002994:	2b00      	cmp	r3, #0
 8002996:	d0f0      	beq.n	800297a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d106      	bne.n	80029ae <HAL_RCC_OscConfig+0x2ea>
 80029a0:	4b64      	ldr	r3, [pc, #400]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a4:	4a63      	ldr	r2, [pc, #396]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029a6:	f043 0301 	orr.w	r3, r3, #1
 80029aa:	6713      	str	r3, [r2, #112]	; 0x70
 80029ac:	e01c      	b.n	80029e8 <HAL_RCC_OscConfig+0x324>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0x30c>
 80029b6:	4b5f      	ldr	r3, [pc, #380]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	4a5e      	ldr	r2, [pc, #376]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029bc:	f043 0304 	orr.w	r3, r3, #4
 80029c0:	6713      	str	r3, [r2, #112]	; 0x70
 80029c2:	4b5c      	ldr	r3, [pc, #368]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c6:	4a5b      	ldr	r2, [pc, #364]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6713      	str	r3, [r2, #112]	; 0x70
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0x324>
 80029d0:	4b58      	ldr	r3, [pc, #352]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d4:	4a57      	ldr	r2, [pc, #348]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029d6:	f023 0301 	bic.w	r3, r3, #1
 80029da:	6713      	str	r3, [r2, #112]	; 0x70
 80029dc:	4b55      	ldr	r3, [pc, #340]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e0:	4a54      	ldr	r2, [pc, #336]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 80029e2:	f023 0304 	bic.w	r3, r3, #4
 80029e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d015      	beq.n	8002a1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7fe fb94 	bl	800111c <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029f8:	f7fe fb90 	bl	800111c <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e0cb      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a0e:	4b49      	ldr	r3, [pc, #292]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a12:	f003 0302 	and.w	r3, r3, #2
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0ee      	beq.n	80029f8 <HAL_RCC_OscConfig+0x334>
 8002a1a:	e014      	b.n	8002a46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fb7e 	bl	800111c <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a22:	e00a      	b.n	8002a3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a24:	f7fe fb7a 	bl	800111c <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e0b5      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1ee      	bne.n	8002a24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a46:	7dfb      	ldrb	r3, [r7, #23]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d105      	bne.n	8002a58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a4c:	4b39      	ldr	r3, [pc, #228]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	4a38      	ldr	r2, [pc, #224]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 80a1 	beq.w	8002ba4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a62:	4b34      	ldr	r3, [pc, #208]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 030c 	and.w	r3, r3, #12
 8002a6a:	2b08      	cmp	r3, #8
 8002a6c:	d05c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	699b      	ldr	r3, [r3, #24]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d141      	bne.n	8002afa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a76:	4b31      	ldr	r3, [pc, #196]	; (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fb4e 	bl	800111c <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a82:	e008      	b.n	8002a96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a84:	f7fe fb4a 	bl	800111c <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e087      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a96:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1f0      	bne.n	8002a84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69da      	ldr	r2, [r3, #28]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	019b      	lsls	r3, r3, #6
 8002ab2:	431a      	orrs	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab8:	085b      	lsrs	r3, r3, #1
 8002aba:	3b01      	subs	r3, #1
 8002abc:	041b      	lsls	r3, r3, #16
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	491b      	ldr	r1, [pc, #108]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002acc:	4b1b      	ldr	r3, [pc, #108]	; (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe fb23 	bl	800111c <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ada:	f7fe fb1f 	bl	800111c <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e05c      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x416>
 8002af8:	e054      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002afa:	4b10      	ldr	r3, [pc, #64]	; (8002b3c <HAL_RCC_OscConfig+0x478>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe fb0c 	bl	800111c <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe fb08 	bl	800111c <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e045      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <HAL_RCC_OscConfig+0x470>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d1f0      	bne.n	8002b08 <HAL_RCC_OscConfig+0x444>
 8002b26:	e03d      	b.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d107      	bne.n	8002b40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e038      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40007000 	.word	0x40007000
 8002b3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b40:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_RCC_OscConfig+0x4ec>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d028      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d121      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d11a      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b6a:	68fa      	ldr	r2, [r7, #12]
 8002b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b70:	4013      	ands	r3, r2
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d111      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b86:	085b      	lsrs	r3, r3, #1
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3718      	adds	r7, #24
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023800 	.word	0x40023800

08002bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d101      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e0cc      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bc8:	4b68      	ldr	r3, [pc, #416]	; (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d90c      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4b65      	ldr	r3, [pc, #404]	; (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bde:	4b63      	ldr	r3, [pc, #396]	; (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e0b8      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d020      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0304 	and.w	r3, r3, #4
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d005      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c08:	4b59      	ldr	r3, [pc, #356]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	4a58      	ldr	r2, [pc, #352]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0308 	and.w	r3, r3, #8
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a52      	ldr	r2, [pc, #328]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2c:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	494d      	ldr	r1, [pc, #308]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d044      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b01      	cmp	r3, #1
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d119      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e07f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c72:	4b3f      	ldr	r3, [pc, #252]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d109      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e06f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e067      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c92:	4b37      	ldr	r3, [pc, #220]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	4934      	ldr	r1, [pc, #208]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ca4:	f7fe fa3a 	bl	800111c <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fe fa36 	bl	800111c <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e04f      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 020c 	and.w	r2, r3, #12
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d1eb      	bne.n	8002cac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cd4:	4b25      	ldr	r3, [pc, #148]	; (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d20c      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ce2:	4b22      	ldr	r3, [pc, #136]	; (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	b2d2      	uxtb	r2, r2
 8002ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d001      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e032      	b.n	8002d62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4916      	ldr	r1, [pc, #88]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d009      	beq.n	8002d3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d26:	4b12      	ldr	r3, [pc, #72]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	490e      	ldr	r1, [pc, #56]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d3a:	f000 f821 	bl	8002d80 <HAL_RCC_GetSysClockFreq>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	490a      	ldr	r1, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x1c0>)
 8002d4c:	5ccb      	ldrb	r3, [r1, r3]
 8002d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d56:	4b09      	ldr	r3, [pc, #36]	; (8002d7c <HAL_RCC_ClockConfig+0x1c8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fe f99a 	bl	8001094 <HAL_InitTick>

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3710      	adds	r7, #16
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023c00 	.word	0x40023c00
 8002d70:	40023800 	.word	0x40023800
 8002d74:	08006104 	.word	0x08006104
 8002d78:	20000000 	.word	0x20000000
 8002d7c:	20000004 	.word	0x20000004

08002d80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d84:	b094      	sub	sp, #80	; 0x50
 8002d86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	647b      	str	r3, [r7, #68]	; 0x44
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d90:	2300      	movs	r3, #0
 8002d92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d98:	4b79      	ldr	r3, [pc, #484]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 030c 	and.w	r3, r3, #12
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d00d      	beq.n	8002dc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	f200 80e1 	bhi.w	8002f6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_RCC_GetSysClockFreq+0x34>
 8002dae:	2b04      	cmp	r3, #4
 8002db0:	d003      	beq.n	8002dba <HAL_RCC_GetSysClockFreq+0x3a>
 8002db2:	e0db      	b.n	8002f6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002db4:	4b73      	ldr	r3, [pc, #460]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002db6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002db8:	e0db      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dba:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_RCC_GetSysClockFreq+0x208>)
 8002dbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002dbe:	e0d8      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dc0:	4b6f      	ldr	r3, [pc, #444]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dca:	4b6d      	ldr	r3, [pc, #436]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d063      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd6:	4b6a      	ldr	r3, [pc, #424]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	099b      	lsrs	r3, r3, #6
 8002ddc:	2200      	movs	r2, #0
 8002dde:	63bb      	str	r3, [r7, #56]	; 0x38
 8002de0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002de8:	633b      	str	r3, [r7, #48]	; 0x30
 8002dea:	2300      	movs	r3, #0
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
 8002dee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002df2:	4622      	mov	r2, r4
 8002df4:	462b      	mov	r3, r5
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	1a51      	subs	r1, r2, r1
 8002e0e:	6139      	str	r1, [r7, #16]
 8002e10:	4629      	mov	r1, r5
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e24:	4659      	mov	r1, fp
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2e:	4651      	mov	r1, sl
 8002e30:	018a      	lsls	r2, r1, #6
 8002e32:	4651      	mov	r1, sl
 8002e34:	ebb2 0801 	subs.w	r8, r2, r1
 8002e38:	4659      	mov	r1, fp
 8002e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002e3e:	f04f 0200 	mov.w	r2, #0
 8002e42:	f04f 0300 	mov.w	r3, #0
 8002e46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e52:	4690      	mov	r8, r2
 8002e54:	4699      	mov	r9, r3
 8002e56:	4623      	mov	r3, r4
 8002e58:	eb18 0303 	adds.w	r3, r8, r3
 8002e5c:	60bb      	str	r3, [r7, #8]
 8002e5e:	462b      	mov	r3, r5
 8002e60:	eb49 0303 	adc.w	r3, r9, r3
 8002e64:	60fb      	str	r3, [r7, #12]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e72:	4629      	mov	r1, r5
 8002e74:	024b      	lsls	r3, r1, #9
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	024a      	lsls	r2, r1, #9
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e86:	2200      	movs	r2, #0
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002e8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002e90:	f7fd f9f6 	bl	8000280 <__aeabi_uldivmod>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4613      	mov	r3, r2
 8002e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e9c:	e058      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e9e:	4b38      	ldr	r3, [pc, #224]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	099b      	lsrs	r3, r3, #6
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	4611      	mov	r1, r2
 8002eaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eae:	623b      	str	r3, [r7, #32]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002eb8:	4642      	mov	r2, r8
 8002eba:	464b      	mov	r3, r9
 8002ebc:	f04f 0000 	mov.w	r0, #0
 8002ec0:	f04f 0100 	mov.w	r1, #0
 8002ec4:	0159      	lsls	r1, r3, #5
 8002ec6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eca:	0150      	lsls	r0, r2, #5
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4641      	mov	r1, r8
 8002ed2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ed6:	4649      	mov	r1, r9
 8002ed8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002edc:	f04f 0200 	mov.w	r2, #0
 8002ee0:	f04f 0300 	mov.w	r3, #0
 8002ee4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ee8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ef0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ef4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ef8:	f04f 0200 	mov.w	r2, #0
 8002efc:	f04f 0300 	mov.w	r3, #0
 8002f00:	00eb      	lsls	r3, r5, #3
 8002f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f06:	00e2      	lsls	r2, r4, #3
 8002f08:	4614      	mov	r4, r2
 8002f0a:	461d      	mov	r5, r3
 8002f0c:	4643      	mov	r3, r8
 8002f0e:	18e3      	adds	r3, r4, r3
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	464b      	mov	r3, r9
 8002f14:	eb45 0303 	adc.w	r3, r5, r3
 8002f18:	607b      	str	r3, [r7, #4]
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f26:	4629      	mov	r1, r5
 8002f28:	028b      	lsls	r3, r1, #10
 8002f2a:	4621      	mov	r1, r4
 8002f2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f30:	4621      	mov	r1, r4
 8002f32:	028a      	lsls	r2, r1, #10
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	61fa      	str	r2, [r7, #28]
 8002f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f44:	f7fd f99c 	bl	8000280 <__aeabi_uldivmod>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	460b      	mov	r3, r1
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	0c1b      	lsrs	r3, r3, #16
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f6a:	e002      	b.n	8002f72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f6c:	4b05      	ldr	r3, [pc, #20]	; (8002f84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002f70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3750      	adds	r7, #80	; 0x50
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f7e:	bf00      	nop
 8002f80:	40023800 	.word	0x40023800
 8002f84:	00f42400 	.word	0x00f42400
 8002f88:	007a1200 	.word	0x007a1200

08002f8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f90:	4b03      	ldr	r3, [pc, #12]	; (8002fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f92:	681b      	ldr	r3, [r3, #0]
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	20000000 	.word	0x20000000

08002fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fa8:	f7ff fff0 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fac:	4602      	mov	r2, r0
 8002fae:	4b05      	ldr	r3, [pc, #20]	; (8002fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	0a9b      	lsrs	r3, r3, #10
 8002fb4:	f003 0307 	and.w	r3, r3, #7
 8002fb8:	4903      	ldr	r1, [pc, #12]	; (8002fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fba:	5ccb      	ldrb	r3, [r1, r3]
 8002fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	08006114 	.word	0x08006114

08002fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fd0:	f7ff ffdc 	bl	8002f8c <HAL_RCC_GetHCLKFreq>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b05      	ldr	r3, [pc, #20]	; (8002fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	0b5b      	lsrs	r3, r3, #13
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	4903      	ldr	r1, [pc, #12]	; (8002ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fe2:	5ccb      	ldrb	r3, [r1, r3]
 8002fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	08006114 	.word	0x08006114

08002ff4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e041      	b.n	800308a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d106      	bne.n	8003020 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7fd fdd6 	bl	8000bcc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	3304      	adds	r3, #4
 8003030:	4619      	mov	r1, r3
 8003032:	4610      	mov	r0, r2
 8003034:	f000 fb90 	bl	8003758 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2201      	movs	r2, #1
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
	...

08003094 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_TIM_PWM_Start_DMA+0x2c>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	bf0c      	ite	eq
 80030b8:	2301      	moveq	r3, #1
 80030ba:	2300      	movne	r3, #0
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	e022      	b.n	8003106 <HAL_TIM_PWM_Start_DMA+0x72>
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d109      	bne.n	80030da <HAL_TIM_PWM_Start_DMA+0x46>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	e015      	b.n	8003106 <HAL_TIM_PWM_Start_DMA+0x72>
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d109      	bne.n	80030f4 <HAL_TIM_PWM_Start_DMA+0x60>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	bf0c      	ite	eq
 80030ec:	2301      	moveq	r3, #1
 80030ee:	2300      	movne	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e008      	b.n	8003106 <HAL_TIM_PWM_Start_DMA+0x72>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 800310a:	2302      	movs	r3, #2
 800310c:	e15d      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d109      	bne.n	8003128 <HAL_TIM_PWM_Start_DMA+0x94>
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800311a:	b2db      	uxtb	r3, r3
 800311c:	2b01      	cmp	r3, #1
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	e022      	b.n	800316e <HAL_TIM_PWM_Start_DMA+0xda>
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	2b04      	cmp	r3, #4
 800312c:	d109      	bne.n	8003142 <HAL_TIM_PWM_Start_DMA+0xae>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003134:	b2db      	uxtb	r3, r3
 8003136:	2b01      	cmp	r3, #1
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	e015      	b.n	800316e <HAL_TIM_PWM_Start_DMA+0xda>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b08      	cmp	r3, #8
 8003146:	d109      	bne.n	800315c <HAL_TIM_PWM_Start_DMA+0xc8>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	bf0c      	ite	eq
 8003154:	2301      	moveq	r3, #1
 8003156:	2300      	movne	r3, #0
 8003158:	b2db      	uxtb	r3, r3
 800315a:	e008      	b.n	800316e <HAL_TIM_PWM_Start_DMA+0xda>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	bf0c      	ite	eq
 8003168:	2301      	moveq	r3, #1
 800316a:	2300      	movne	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d024      	beq.n	80031bc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) && (Length > 0U))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d104      	bne.n	8003182 <HAL_TIM_PWM_Start_DMA+0xee>
 8003178:	887b      	ldrh	r3, [r7, #2]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e123      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d104      	bne.n	8003192 <HAL_TIM_PWM_Start_DMA+0xfe>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003190:	e016      	b.n	80031c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b04      	cmp	r3, #4
 8003196:	d104      	bne.n	80031a2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2202      	movs	r2, #2
 800319c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a0:	e00e      	b.n	80031c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d104      	bne.n	80031b2 <HAL_TIM_PWM_Start_DMA+0x11e>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2202      	movs	r2, #2
 80031ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031b0:	e006      	b.n	80031c0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031ba:	e001      	b.n	80031c0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e104      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	2b0c      	cmp	r3, #12
 80031c4:	f200 80ae 	bhi.w	8003324 <HAL_TIM_PWM_Start_DMA+0x290>
 80031c8:	a201      	add	r2, pc, #4	; (adr r2, 80031d0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	08003205 	.word	0x08003205
 80031d4:	08003325 	.word	0x08003325
 80031d8:	08003325 	.word	0x08003325
 80031dc:	08003325 	.word	0x08003325
 80031e0:	0800324d 	.word	0x0800324d
 80031e4:	08003325 	.word	0x08003325
 80031e8:	08003325 	.word	0x08003325
 80031ec:	08003325 	.word	0x08003325
 80031f0:	08003295 	.word	0x08003295
 80031f4:	08003325 	.word	0x08003325
 80031f8:	08003325 	.word	0x08003325
 80031fc:	08003325 	.word	0x08003325
 8003200:	080032dd 	.word	0x080032dd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	4a72      	ldr	r2, [pc, #456]	; (80033d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800320a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	4a71      	ldr	r2, [pc, #452]	; (80033d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8003212:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	4a70      	ldr	r2, [pc, #448]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x348>)
 800321a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3334      	adds	r3, #52	; 0x34
 8003228:	461a      	mov	r2, r3
 800322a:	887b      	ldrh	r3, [r7, #2]
 800322c:	f7fe fd58 	bl	8001ce0 <HAL_DMA_Start_IT>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e0c7      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68da      	ldr	r2, [r3, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003248:	60da      	str	r2, [r3, #12]
      break;
 800324a:	e06e      	b.n	800332a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003250:	4a60      	ldr	r2, [pc, #384]	; (80033d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8003252:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003258:	4a5f      	ldr	r2, [pc, #380]	; (80033d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	4a5e      	ldr	r2, [pc, #376]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8003262:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3338      	adds	r3, #56	; 0x38
 8003270:	461a      	mov	r2, r3
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	f7fe fd34 	bl	8001ce0 <HAL_DMA_Start_IT>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e0a3      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003290:	60da      	str	r2, [r3, #12]
      break;
 8003292:	e04a      	b.n	800332a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003298:	4a4e      	ldr	r2, [pc, #312]	; (80033d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800329a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	4a4d      	ldr	r2, [pc, #308]	; (80033d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a8:	4a4c      	ldr	r2, [pc, #304]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x348>)
 80032aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	333c      	adds	r3, #60	; 0x3c
 80032b8:	461a      	mov	r2, r3
 80032ba:	887b      	ldrh	r3, [r7, #2]
 80032bc:	f7fe fd10 	bl	8001ce0 <HAL_DMA_Start_IT>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07f      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d8:	60da      	str	r2, [r3, #12]
      break;
 80032da:	e026      	b.n	800332a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4a3c      	ldr	r2, [pc, #240]	; (80033d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80032e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e8:	4a3b      	ldr	r2, [pc, #236]	; (80033d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	4a3a      	ldr	r2, [pc, #232]	; (80033dc <HAL_TIM_PWM_Start_DMA+0x348>)
 80032f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3340      	adds	r3, #64	; 0x40
 8003300:	461a      	mov	r2, r3
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	f7fe fcec 	bl	8001ce0 <HAL_DMA_Start_IT>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e05b      	b.n	80033ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003320:	60da      	str	r2, [r3, #12]
      break;
 8003322:	e002      	b.n	800332a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	75fb      	strb	r3, [r7, #23]
      break;
 8003328:	bf00      	nop
  }

  if (status == HAL_OK)
 800332a:	7dfb      	ldrb	r3, [r7, #23]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d14b      	bne.n	80033c8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2201      	movs	r2, #1
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fc19 	bl	8003b70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a27      	ldr	r2, [pc, #156]	; (80033e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d107      	bne.n	8003358 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a20      	ldr	r2, [pc, #128]	; (80033e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d018      	beq.n	8003394 <HAL_TIM_PWM_Start_DMA+0x300>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800336a:	d013      	beq.n	8003394 <HAL_TIM_PWM_Start_DMA+0x300>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00e      	beq.n	8003394 <HAL_TIM_PWM_Start_DMA+0x300>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d009      	beq.n	8003394 <HAL_TIM_PWM_Start_DMA+0x300>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a19      	ldr	r2, [pc, #100]	; (80033ec <HAL_TIM_PWM_Start_DMA+0x358>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d004      	beq.n	8003394 <HAL_TIM_PWM_Start_DMA+0x300>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d111      	bne.n	80033b8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b06      	cmp	r3, #6
 80033a4:	d010      	beq.n	80033c8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b6:	e007      	b.n	80033c8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	08003647 	.word	0x08003647
 80033d8:	080036ef 	.word	0x080036ef
 80033dc:	080035b5 	.word	0x080035b5
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800
 80033ec:	40000c00 	.word	0x40000c00
 80033f0:	40014000 	.word	0x40014000

080033f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800340e:	2302      	movs	r3, #2
 8003410:	e0ae      	b.n	8003570 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b0c      	cmp	r3, #12
 800341e:	f200 809f 	bhi.w	8003560 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003422:	a201      	add	r2, pc, #4	; (adr r2, 8003428 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	0800345d 	.word	0x0800345d
 800342c:	08003561 	.word	0x08003561
 8003430:	08003561 	.word	0x08003561
 8003434:	08003561 	.word	0x08003561
 8003438:	0800349d 	.word	0x0800349d
 800343c:	08003561 	.word	0x08003561
 8003440:	08003561 	.word	0x08003561
 8003444:	08003561 	.word	0x08003561
 8003448:	080034df 	.word	0x080034df
 800344c:	08003561 	.word	0x08003561
 8003450:	08003561 	.word	0x08003561
 8003454:	08003561 	.word	0x08003561
 8003458:	0800351f 	.word	0x0800351f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f9f8 	bl	8003858 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	699a      	ldr	r2, [r3, #24]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f042 0208 	orr.w	r2, r2, #8
 8003476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f022 0204 	bic.w	r2, r2, #4
 8003486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6999      	ldr	r1, [r3, #24]
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	691a      	ldr	r2, [r3, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	619a      	str	r2, [r3, #24]
      break;
 800349a:	e064      	b.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68b9      	ldr	r1, [r7, #8]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fa3e 	bl	8003924 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	699a      	ldr	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6999      	ldr	r1, [r3, #24]
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	021a      	lsls	r2, r3, #8
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	619a      	str	r2, [r3, #24]
      break;
 80034dc:	e043      	b.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68b9      	ldr	r1, [r7, #8]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fa89 	bl	80039fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 0208 	orr.w	r2, r2, #8
 80034f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0204 	bic.w	r2, r2, #4
 8003508:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69d9      	ldr	r1, [r3, #28]
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	61da      	str	r2, [r3, #28]
      break;
 800351c:	e023      	b.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68b9      	ldr	r1, [r7, #8]
 8003524:	4618      	mov	r0, r3
 8003526:	f000 fad3 	bl	8003ad0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003538:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003548:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69d9      	ldr	r1, [r3, #28]
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	021a      	lsls	r2, r3, #8
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	430a      	orrs	r2, r1
 800355c:	61da      	str	r2, [r3, #28]
      break;
 800355e:	e002      	b.n	8003566 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	75fb      	strb	r3, [r7, #23]
      break;
 8003564:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800356e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003570:	4618      	mov	r0, r3
 8003572:	3718      	adds	r7, #24
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035c0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d107      	bne.n	80035dc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035da:	e02a      	b.n	8003632 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d107      	bne.n	80035f6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2202      	movs	r2, #2
 80035ea:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035f4:	e01d      	b.n	8003632 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2204      	movs	r2, #4
 8003604:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800360e:	e010      	b.n	8003632 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	429a      	cmp	r2, r3
 8003618:	d107      	bne.n	800362a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2208      	movs	r2, #8
 800361e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003628:	e003      	b.n	8003632 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003632:	68f8      	ldr	r0, [r7, #12]
 8003634:	f7ff ffb4 	bl	80035a0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2200      	movs	r2, #0
 800363c:	771a      	strb	r2, [r3, #28]
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b084      	sub	sp, #16
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	d10b      	bne.n	8003676 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2201      	movs	r2, #1
 8003662:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d136      	bne.n	80036da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003674:	e031      	b.n	80036da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d10b      	bne.n	8003698 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2202      	movs	r2, #2
 8003684:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d125      	bne.n	80036da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003696:	e020      	b.n	80036da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d10b      	bne.n	80036ba <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2204      	movs	r2, #4
 80036a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69db      	ldr	r3, [r3, #28]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d114      	bne.n	80036da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036b8:	e00f      	b.n	80036da <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d10a      	bne.n	80036da <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2208      	movs	r2, #8
 80036c8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d103      	bne.n	80036da <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff ff4c 	bl	8003578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	771a      	strb	r2, [r3, #28]
}
 80036e6:	bf00      	nop
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fa:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	429a      	cmp	r2, r3
 8003704:	d103      	bne.n	800370e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2201      	movs	r2, #1
 800370a:	771a      	strb	r2, [r3, #28]
 800370c:	e019      	b.n	8003742 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d103      	bne.n	8003720 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2202      	movs	r2, #2
 800371c:	771a      	strb	r2, [r3, #28]
 800371e:	e010      	b.n	8003742 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	429a      	cmp	r2, r3
 8003728:	d103      	bne.n	8003732 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2204      	movs	r2, #4
 800372e:	771a      	strb	r2, [r3, #28]
 8003730:	e007      	b.n	8003742 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	429a      	cmp	r2, r3
 800373a:	d102      	bne.n	8003742 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2208      	movs	r2, #8
 8003740:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f7ff ff22 	bl	800358c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2200      	movs	r2, #0
 800374c:	771a      	strb	r2, [r3, #28]
}
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
	...

08003758 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003758:	b480      	push	{r7}
 800375a:	b085      	sub	sp, #20
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a34      	ldr	r2, [pc, #208]	; (800383c <TIM_Base_SetConfig+0xe4>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d00f      	beq.n	8003790 <TIM_Base_SetConfig+0x38>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003776:	d00b      	beq.n	8003790 <TIM_Base_SetConfig+0x38>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a31      	ldr	r2, [pc, #196]	; (8003840 <TIM_Base_SetConfig+0xe8>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d007      	beq.n	8003790 <TIM_Base_SetConfig+0x38>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a30      	ldr	r2, [pc, #192]	; (8003844 <TIM_Base_SetConfig+0xec>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_Base_SetConfig+0x38>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a2f      	ldr	r2, [pc, #188]	; (8003848 <TIM_Base_SetConfig+0xf0>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d108      	bne.n	80037a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a25      	ldr	r2, [pc, #148]	; (800383c <TIM_Base_SetConfig+0xe4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d01b      	beq.n	80037e2 <TIM_Base_SetConfig+0x8a>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d017      	beq.n	80037e2 <TIM_Base_SetConfig+0x8a>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a22      	ldr	r2, [pc, #136]	; (8003840 <TIM_Base_SetConfig+0xe8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <TIM_Base_SetConfig+0x8a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a21      	ldr	r2, [pc, #132]	; (8003844 <TIM_Base_SetConfig+0xec>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d00f      	beq.n	80037e2 <TIM_Base_SetConfig+0x8a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <TIM_Base_SetConfig+0xf0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00b      	beq.n	80037e2 <TIM_Base_SetConfig+0x8a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a1f      	ldr	r2, [pc, #124]	; (800384c <TIM_Base_SetConfig+0xf4>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d007      	beq.n	80037e2 <TIM_Base_SetConfig+0x8a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a1e      	ldr	r2, [pc, #120]	; (8003850 <TIM_Base_SetConfig+0xf8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_Base_SetConfig+0x8a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1d      	ldr	r2, [pc, #116]	; (8003854 <TIM_Base_SetConfig+0xfc>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	68fa      	ldr	r2, [r7, #12]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	4313      	orrs	r3, r2
 8003800:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a08      	ldr	r2, [pc, #32]	; (800383c <TIM_Base_SetConfig+0xe4>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d103      	bne.n	8003828 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	615a      	str	r2, [r3, #20]
}
 800382e:	bf00      	nop
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40010000 	.word	0x40010000
 8003840:	40000400 	.word	0x40000400
 8003844:	40000800 	.word	0x40000800
 8003848:	40000c00 	.word	0x40000c00
 800384c:	40014000 	.word	0x40014000
 8003850:	40014400 	.word	0x40014400
 8003854:	40014800 	.word	0x40014800

08003858 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	f023 0201 	bic.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	699b      	ldr	r3, [r3, #24]
 800387e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003886:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f023 0303 	bic.w	r3, r3, #3
 800388e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	4313      	orrs	r3, r2
 8003898:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f023 0302 	bic.w	r3, r3, #2
 80038a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <TIM_OC1_SetConfig+0xc8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d10c      	bne.n	80038ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f023 0308 	bic.w	r3, r3, #8
 80038ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 0304 	bic.w	r3, r3, #4
 80038cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a13      	ldr	r2, [pc, #76]	; (8003920 <TIM_OC1_SetConfig+0xc8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d111      	bne.n	80038fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80038e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	693a      	ldr	r2, [r7, #16]
 80038ec:	4313      	orrs	r3, r2
 80038ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40010000 	.word	0x40010000

08003924 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003924:	b480      	push	{r7}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f023 0210 	bic.w	r2, r3, #16
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003952:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0320 	bic.w	r3, r3, #32
 800396e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <TIM_OC2_SetConfig+0xd4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d10d      	bne.n	80039a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800398a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	011b      	lsls	r3, r3, #4
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <TIM_OC2_SetConfig+0xd4>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d113      	bne.n	80039d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	695b      	ldr	r3, [r3, #20]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	68fa      	ldr	r2, [r7, #12]
 80039da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	621a      	str	r2, [r3, #32]
}
 80039ea:	bf00      	nop
 80039ec:	371c      	adds	r7, #28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40010000 	.word	0x40010000

080039fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b087      	sub	sp, #28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0303 	bic.w	r3, r3, #3
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	697a      	ldr	r2, [r7, #20]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a1d      	ldr	r2, [pc, #116]	; (8003acc <TIM_OC3_SetConfig+0xd0>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10d      	bne.n	8003a76 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	021b      	lsls	r3, r3, #8
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a14      	ldr	r2, [pc, #80]	; (8003acc <TIM_OC3_SetConfig+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d113      	bne.n	8003aa6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	693a      	ldr	r2, [r7, #16]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	621a      	str	r2, [r3, #32]
}
 8003ac0:	bf00      	nop
 8003ac2:	371c      	adds	r7, #28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr
 8003acc:	40010000 	.word	0x40010000

08003ad0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	021b      	lsls	r3, r3, #8
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b1a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	031b      	lsls	r3, r3, #12
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a10      	ldr	r2, [pc, #64]	; (8003b6c <TIM_OC4_SetConfig+0x9c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d109      	bne.n	8003b44 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	695b      	ldr	r3, [r3, #20]
 8003b3c:	019b      	lsls	r3, r3, #6
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000

08003b70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2201      	movs	r2, #1
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6a1a      	ldr	r2, [r3, #32]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	43db      	mvns	r3, r3
 8003b92:	401a      	ands	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	f003 031f 	and.w	r3, r3, #31
 8003ba2:	6879      	ldr	r1, [r7, #4]
 8003ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e050      	b.n	8003c76 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2202      	movs	r2, #2
 8003be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a1c      	ldr	r2, [pc, #112]	; (8003c84 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d018      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c20:	d013      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00e      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d009      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a15      	ldr	r2, [pc, #84]	; (8003c90 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d004      	beq.n	8003c4a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a13      	ldr	r2, [pc, #76]	; (8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d10c      	bne.n	8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68ba      	ldr	r2, [r7, #8]
 8003c62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	40010000 	.word	0x40010000
 8003c88:	40000400 	.word	0x40000400
 8003c8c:	40000800 	.word	0x40000800
 8003c90:	40000c00 	.word	0x40000c00
 8003c94:	40014000 	.word	0x40014000

08003c98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d101      	bne.n	8003cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	e03d      	b.n	8003d30 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	695b      	ldr	r3, [r3, #20]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e03f      	b.n	8003dce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d106      	bne.n	8003d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7fc ffc0 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2224      	movs	r2, #36	; 0x24
 8003d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68da      	ldr	r2, [r3, #12]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 ff69 	bl	8004c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691a      	ldr	r2, [r3, #16]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	695a      	ldr	r2, [r3, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b08a      	sub	sp, #40	; 0x28
 8003dda:	af02      	add	r7, sp, #8
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	603b      	str	r3, [r7, #0]
 8003de2:	4613      	mov	r3, r2
 8003de4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b20      	cmp	r3, #32
 8003df4:	d17c      	bne.n	8003ef0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_UART_Transmit+0x2c>
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d101      	bne.n	8003e06 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e075      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Transmit+0x3e>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e06e      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2221      	movs	r2, #33	; 0x21
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e2a:	f7fd f977 	bl	800111c <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e44:	d108      	bne.n	8003e58 <HAL_UART_Transmit+0x82>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e003      	b.n	8003e60 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e68:	e02a      	b.n	8003ec0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2180      	movs	r1, #128	; 0x80
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fc21 	bl	80046bc <UART_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e036      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10b      	bne.n	8003ea2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e98:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	3302      	adds	r3, #2
 8003e9e:	61bb      	str	r3, [r7, #24]
 8003ea0:	e007      	b.n	8003eb2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	781a      	ldrb	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d1cf      	bne.n	8003e6a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2140      	movs	r1, #64	; 0x40
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f000 fbf1 	bl	80046bc <UART_WaitOnFlagUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d001      	beq.n	8003ee4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e006      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e000      	b.n	8003ef2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003ef0:	2302      	movs	r3, #2
  }
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3720      	adds	r7, #32
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	4613      	mov	r3, r2
 8003f06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d11d      	bne.n	8003f50 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_UART_Receive_DMA+0x26>
 8003f1a:	88fb      	ldrh	r3, [r7, #6]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d101      	bne.n	8003f24 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e016      	b.n	8003f52 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_UART_Receive_DMA+0x38>
 8003f2e:	2302      	movs	r3, #2
 8003f30:	e00f      	b.n	8003f52 <HAL_UART_Receive_DMA+0x58>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	461a      	mov	r2, r3
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fc26 	bl	8004798 <UART_Start_Receive_DMA>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	e000      	b.n	8003f52 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003f50:	2302      	movs	r3, #2
  }
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b0ba      	sub	sp, #232	; 0xe8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f82:	2300      	movs	r3, #0
 8003f84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 030f 	and.w	r3, r3, #15
 8003f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d10f      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d009      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x66>
 8003fae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fb2:	f003 0320 	and.w	r3, r3, #32
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 fd91 	bl	8004ae2 <UART_Receive_IT>
      return;
 8003fc0:	e256      	b.n	8004470 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	f000 80de 	beq.w	8004188 <HAL_UART_IRQHandler+0x22c>
 8003fcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d106      	bne.n	8003fe6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fdc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80d1 	beq.w	8004188 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00b      	beq.n	800400a <HAL_UART_IRQHandler+0xae>
 8003ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f043 0201 	orr.w	r2, r3, #1
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800400a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800400e:	f003 0304 	and.w	r3, r3, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00b      	beq.n	800402e <HAL_UART_IRQHandler+0xd2>
 8004016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f043 0202 	orr.w	r2, r3, #2
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_UART_IRQHandler+0xf6>
 800403a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d005      	beq.n	8004052 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f043 0204 	orr.w	r2, r3, #4
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004056:	f003 0308 	and.w	r3, r3, #8
 800405a:	2b00      	cmp	r3, #0
 800405c:	d011      	beq.n	8004082 <HAL_UART_IRQHandler+0x126>
 800405e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d105      	bne.n	8004076 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800406a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f043 0208 	orr.w	r2, r3, #8
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 81ed 	beq.w	8004466 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d008      	beq.n	80040aa <HAL_UART_IRQHandler+0x14e>
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f000 fd1c 	bl	8004ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	bf0c      	ite	eq
 80040b8:	2301      	moveq	r3, #1
 80040ba:	2300      	movne	r3, #0
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 0308 	and.w	r3, r3, #8
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d103      	bne.n	80040d6 <HAL_UART_IRQHandler+0x17a>
 80040ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d04f      	beq.n	8004176 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fc24 	bl	8004924 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d141      	bne.n	800416e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3314      	adds	r3, #20
 80040f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040f8:	e853 3f00 	ldrex	r3, [r3]
 80040fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004100:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004108:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	3314      	adds	r3, #20
 8004112:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004116:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800411a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800411e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004122:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800412e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1d9      	bne.n	80040ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413a:	2b00      	cmp	r3, #0
 800413c:	d013      	beq.n	8004166 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	4a7d      	ldr	r2, [pc, #500]	; (8004338 <HAL_UART_IRQHandler+0x3dc>)
 8004144:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414a:	4618      	mov	r0, r3
 800414c:	f7fd fe90 	bl	8001e70 <HAL_DMA_Abort_IT>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d016      	beq.n	8004184 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004160:	4610      	mov	r0, r2
 8004162:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004164:	e00e      	b.n	8004184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f99a 	bl	80044a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	e00a      	b.n	8004184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f996 	bl	80044a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004174:	e006      	b.n	8004184 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f992 	bl	80044a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004182:	e170      	b.n	8004466 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	bf00      	nop
    return;
 8004186:	e16e      	b.n	8004466 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418c:	2b01      	cmp	r3, #1
 800418e:	f040 814a 	bne.w	8004426 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004196:	f003 0310 	and.w	r3, r3, #16
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8143 	beq.w	8004426 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80041a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 813c 	beq.w	8004426 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041ae:	2300      	movs	r3, #0
 80041b0:	60bb      	str	r3, [r7, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ce:	2b40      	cmp	r3, #64	; 0x40
 80041d0:	f040 80b4 	bne.w	800433c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f000 8140 	beq.w	800446a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80041ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041f2:	429a      	cmp	r2, r3
 80041f4:	f080 8139 	bcs.w	800446a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420a:	f000 8088 	beq.w	800431e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	330c      	adds	r3, #12
 8004214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004224:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004228:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800422c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800423a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800423e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004242:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004246:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004252:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d1d9      	bne.n	800420e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3314      	adds	r3, #20
 8004260:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004262:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800426a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800426c:	f023 0301 	bic.w	r3, r3, #1
 8004270:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	3314      	adds	r3, #20
 800427a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800427e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004282:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004286:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004290:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e1      	bne.n	800425a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	3314      	adds	r3, #20
 800429c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	3314      	adds	r3, #20
 80042b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80042ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80042bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80042c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80042c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e3      	bne.n	8004296 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2220      	movs	r2, #32
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	330c      	adds	r3, #12
 80042e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042e6:	e853 3f00 	ldrex	r3, [r3]
 80042ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ee:	f023 0310 	bic.w	r3, r3, #16
 80042f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	330c      	adds	r3, #12
 80042fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004300:	65ba      	str	r2, [r7, #88]	; 0x58
 8004302:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800430e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e3      	bne.n	80042dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	4618      	mov	r0, r3
 800431a:	f7fd fd39 	bl	8001d90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004326:	b29b      	uxth	r3, r3
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	b29b      	uxth	r3, r3
 800432c:	4619      	mov	r1, r3
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8c0 	bl	80044b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004334:	e099      	b.n	800446a <HAL_UART_IRQHandler+0x50e>
 8004336:	bf00      	nop
 8004338:	080049eb 	.word	0x080049eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004344:	b29b      	uxth	r3, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004350:	b29b      	uxth	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 808b 	beq.w	800446e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004358:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800435c:	2b00      	cmp	r3, #0
 800435e:	f000 8086 	beq.w	800446e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436c:	e853 3f00 	ldrex	r3, [r3]
 8004370:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004374:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004378:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	330c      	adds	r3, #12
 8004382:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004386:	647a      	str	r2, [r7, #68]	; 0x44
 8004388:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800438c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800438e:	e841 2300 	strex	r3, r2, [r1]
 8004392:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1e3      	bne.n	8004362 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	3314      	adds	r3, #20
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	623b      	str	r3, [r7, #32]
   return(result);
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	f023 0301 	bic.w	r3, r3, #1
 80043b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80043be:	633a      	str	r2, [r7, #48]	; 0x30
 80043c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e3      	bne.n	800439a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2220      	movs	r2, #32
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	330c      	adds	r3, #12
 80043e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0310 	bic.w	r3, r3, #16
 80043f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	330c      	adds	r3, #12
 8004400:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004404:	61fa      	str	r2, [r7, #28]
 8004406:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	617b      	str	r3, [r7, #20]
   return(result);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e3      	bne.n	80043e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800441c:	4619      	mov	r1, r3
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f000 f848 	bl	80044b4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004424:	e023      	b.n	800446e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_UART_IRQHandler+0x4ea>
 8004432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 fae7 	bl	8004a12 <UART_Transmit_IT>
    return;
 8004444:	e014      	b.n	8004470 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800444a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00e      	beq.n	8004470 <HAL_UART_IRQHandler+0x514>
 8004452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004456:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445a:	2b00      	cmp	r3, #0
 800445c:	d008      	beq.n	8004470 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fb27 	bl	8004ab2 <UART_EndTransmit_IT>
    return;
 8004464:	e004      	b.n	8004470 <HAL_UART_IRQHandler+0x514>
    return;
 8004466:	bf00      	nop
 8004468:	e002      	b.n	8004470 <HAL_UART_IRQHandler+0x514>
      return;
 800446a:	bf00      	nop
 800446c:	e000      	b.n	8004470 <HAL_UART_IRQHandler+0x514>
      return;
 800446e:	bf00      	nop
  }
}
 8004470:	37e8      	adds	r7, #232	; 0xe8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop

08004478 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004480:	bf00      	nop
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004494:	bf00      	nop
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b09c      	sub	sp, #112	; 0x70
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d172      	bne.n	80045ce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80044e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044ea:	2200      	movs	r2, #0
 80044ec:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	330c      	adds	r3, #12
 80044f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80044fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004504:	66bb      	str	r3, [r7, #104]	; 0x68
 8004506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	330c      	adds	r3, #12
 800450c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800450e:	65ba      	str	r2, [r7, #88]	; 0x58
 8004510:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004514:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800451c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e5      	bne.n	80044ee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	3314      	adds	r3, #20
 8004528:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	e853 3f00 	ldrex	r3, [r3]
 8004530:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	667b      	str	r3, [r7, #100]	; 0x64
 800453a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	3314      	adds	r3, #20
 8004540:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004542:	647a      	str	r2, [r7, #68]	; 0x44
 8004544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800454a:	e841 2300 	strex	r3, r2, [r1]
 800454e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1e5      	bne.n	8004522 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	3314      	adds	r3, #20
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	e853 3f00 	ldrex	r3, [r3]
 8004564:	623b      	str	r3, [r7, #32]
   return(result);
 8004566:	6a3b      	ldr	r3, [r7, #32]
 8004568:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800456c:	663b      	str	r3, [r7, #96]	; 0x60
 800456e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3314      	adds	r3, #20
 8004574:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004576:	633a      	str	r2, [r7, #48]	; 0x30
 8004578:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457e:	e841 2300 	strex	r3, r2, [r1]
 8004582:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1e5      	bne.n	8004556 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800458a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004592:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	2b01      	cmp	r3, #1
 8004598:	d119      	bne.n	80045ce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	e853 3f00 	ldrex	r3, [r3]
 80045a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f023 0310 	bic.w	r3, r3, #16
 80045b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	330c      	adds	r3, #12
 80045b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045ba:	61fa      	str	r2, [r7, #28]
 80045bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045be:	69b9      	ldr	r1, [r7, #24]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	e841 2300 	strex	r3, r2, [r1]
 80045c6:	617b      	str	r3, [r7, #20]
   return(result);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1e5      	bne.n	800459a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d106      	bne.n	80045e4 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045da:	4619      	mov	r1, r3
 80045dc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045de:	f7ff ff69 	bl	80044b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80045e2:	e002      	b.n	80045ea <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80045e4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80045e6:	f7fc fa31 	bl	8000a4c <HAL_UART_RxCpltCallback>
}
 80045ea:	bf00      	nop
 80045ec:	3770      	adds	r7, #112	; 0x70
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b084      	sub	sp, #16
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004604:	2b01      	cmp	r3, #1
 8004606:	d108      	bne.n	800461a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800460c:	085b      	lsrs	r3, r3, #1
 800460e:	b29b      	uxth	r3, r3
 8004610:	4619      	mov	r1, r3
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f7ff ff4e 	bl	80044b4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004618:	e002      	b.n	8004620 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f7ff ff36 	bl	800448c <HAL_UART_RxHalfCpltCallback>
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004638:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695b      	ldr	r3, [r3, #20]
 8004640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b21      	cmp	r3, #33	; 0x21
 800465a:	d108      	bne.n	800466e <UART_DMAError+0x46>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2200      	movs	r2, #0
 8004666:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004668:	68b8      	ldr	r0, [r7, #8]
 800466a:	f000 f933 	bl	80048d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b22      	cmp	r3, #34	; 0x22
 800468e:	d108      	bne.n	80046a2 <UART_DMAError+0x7a>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2200      	movs	r2, #0
 800469a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800469c:	68b8      	ldr	r0, [r7, #8]
 800469e:	f000 f941 	bl	8004924 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f043 0210 	orr.w	r2, r3, #16
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046ae:	68b8      	ldr	r0, [r7, #8]
 80046b0:	f7ff fef6 	bl	80044a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046b4:	bf00      	nop
 80046b6:	3710      	adds	r7, #16
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b090      	sub	sp, #64	; 0x40
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	603b      	str	r3, [r7, #0]
 80046c8:	4613      	mov	r3, r2
 80046ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046cc:	e050      	b.n	8004770 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d04c      	beq.n	8004770 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80046d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <UART_WaitOnFlagUntilTimeout+0x30>
 80046dc:	f7fc fd1e 	bl	800111c <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d241      	bcs.n	8004770 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	330c      	adds	r3, #12
 80046f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	e853 3f00 	ldrex	r3, [r3]
 80046fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	330c      	adds	r3, #12
 800470a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800470c:	637a      	str	r2, [r7, #52]	; 0x34
 800470e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004710:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004712:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004714:	e841 2300 	strex	r3, r2, [r1]
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1e5      	bne.n	80046ec <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	3314      	adds	r3, #20
 8004726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	e853 3f00 	ldrex	r3, [r3]
 800472e:	613b      	str	r3, [r7, #16]
   return(result);
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	f023 0301 	bic.w	r3, r3, #1
 8004736:	63bb      	str	r3, [r7, #56]	; 0x38
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3314      	adds	r3, #20
 800473e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004740:	623a      	str	r2, [r7, #32]
 8004742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004744:	69f9      	ldr	r1, [r7, #28]
 8004746:	6a3a      	ldr	r2, [r7, #32]
 8004748:	e841 2300 	strex	r3, r2, [r1]
 800474c:	61bb      	str	r3, [r7, #24]
   return(result);
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e5      	bne.n	8004720 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2220      	movs	r2, #32
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e00f      	b.n	8004790 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	4013      	ands	r3, r2
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	429a      	cmp	r2, r3
 800477e:	bf0c      	ite	eq
 8004780:	2301      	moveq	r3, #1
 8004782:	2300      	movne	r3, #0
 8004784:	b2db      	uxtb	r3, r3
 8004786:	461a      	mov	r2, r3
 8004788:	79fb      	ldrb	r3, [r7, #7]
 800478a:	429a      	cmp	r2, r3
 800478c:	d09f      	beq.n	80046ce <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	3740      	adds	r7, #64	; 0x40
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}

08004798 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b098      	sub	sp, #96	; 0x60
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	60b9      	str	r1, [r7, #8]
 80047a2:	4613      	mov	r3, r2
 80047a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80047a6:	68ba      	ldr	r2, [r7, #8]
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	88fa      	ldrh	r2, [r7, #6]
 80047b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2222      	movs	r2, #34	; 0x22
 80047bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	4a40      	ldr	r2, [pc, #256]	; (80048c8 <UART_Start_Receive_DMA+0x130>)
 80047c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	4a3f      	ldr	r2, [pc, #252]	; (80048cc <UART_Start_Receive_DMA+0x134>)
 80047ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d4:	4a3e      	ldr	r2, [pc, #248]	; (80048d0 <UART_Start_Receive_DMA+0x138>)
 80047d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	2200      	movs	r2, #0
 80047de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80047e0:	f107 0308 	add.w	r3, r7, #8
 80047e4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	88fb      	ldrh	r3, [r7, #6]
 80047f8:	f7fd fa72 	bl	8001ce0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80047fc:	2300      	movs	r3, #0
 80047fe:	613b      	str	r3, [r7, #16]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	613b      	str	r3, [r7, #16]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	613b      	str	r3, [r7, #16]
 8004810:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d019      	beq.n	8004856 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	330c      	adds	r3, #12
 8004828:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800482c:	e853 3f00 	ldrex	r3, [r3]
 8004830:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004838:	65bb      	str	r3, [r7, #88]	; 0x58
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	330c      	adds	r3, #12
 8004840:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004842:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004844:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004846:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004848:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800484a:	e841 2300 	strex	r3, r2, [r1]
 800484e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1e5      	bne.n	8004822 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3314      	adds	r3, #20
 800485c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	657b      	str	r3, [r7, #84]	; 0x54
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3314      	adds	r3, #20
 8004874:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004876:	63ba      	str	r2, [r7, #56]	; 0x38
 8004878:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800487c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800487e:	e841 2300 	strex	r3, r2, [r1]
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2b00      	cmp	r3, #0
 8004888:	d1e5      	bne.n	8004856 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	3314      	adds	r3, #20
 8004890:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	e853 3f00 	ldrex	r3, [r3]
 8004898:	617b      	str	r3, [r7, #20]
   return(result);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048a0:	653b      	str	r3, [r7, #80]	; 0x50
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3314      	adds	r3, #20
 80048a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80048aa:	627a      	str	r2, [r7, #36]	; 0x24
 80048ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6a39      	ldr	r1, [r7, #32]
 80048b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e5      	bne.n	800488a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3760      	adds	r7, #96	; 0x60
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	080044cd 	.word	0x080044cd
 80048cc:	080045f3 	.word	0x080045f3
 80048d0:	08004629 	.word	0x08004629

080048d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048d4:	b480      	push	{r7}
 80048d6:	b089      	sub	sp, #36	; 0x24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	330c      	adds	r3, #12
 80048e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80048f2:	61fb      	str	r3, [r7, #28]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	330c      	adds	r3, #12
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	61ba      	str	r2, [r7, #24]
 80048fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6979      	ldr	r1, [r7, #20]
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	613b      	str	r3, [r7, #16]
   return(result);
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e5      	bne.n	80048dc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004918:	bf00      	nop
 800491a:	3724      	adds	r7, #36	; 0x24
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b095      	sub	sp, #84	; 0x54
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	330c      	adds	r3, #12
 8004932:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004936:	e853 3f00 	ldrex	r3, [r3]
 800493a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	330c      	adds	r3, #12
 800494a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800494c:	643a      	str	r2, [r7, #64]	; 0x40
 800494e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004952:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e5      	bne.n	800492c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3314      	adds	r3, #20
 8004966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	e853 3f00 	ldrex	r3, [r3]
 800496e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	f023 0301 	bic.w	r3, r3, #1
 8004976:	64bb      	str	r3, [r7, #72]	; 0x48
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004980:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004984:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004986:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004988:	e841 2300 	strex	r3, r2, [r1]
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1e5      	bne.n	8004960 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004998:	2b01      	cmp	r3, #1
 800499a:	d119      	bne.n	80049d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	330c      	adds	r3, #12
 80049a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	e853 3f00 	ldrex	r3, [r3]
 80049aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	f023 0310 	bic.w	r3, r3, #16
 80049b2:	647b      	str	r3, [r7, #68]	; 0x44
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	330c      	adds	r3, #12
 80049ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049bc:	61ba      	str	r2, [r7, #24]
 80049be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	6979      	ldr	r1, [r7, #20]
 80049c2:	69ba      	ldr	r2, [r7, #24]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e5      	bne.n	800499c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2220      	movs	r2, #32
 80049d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80049de:	bf00      	nop
 80049e0:	3754      	adds	r7, #84	; 0x54
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr

080049ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b084      	sub	sp, #16
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff fd4b 	bl	80044a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a0a:	bf00      	nop
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004a12:	b480      	push	{r7}
 8004a14:	b085      	sub	sp, #20
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b21      	cmp	r3, #33	; 0x21
 8004a24:	d13e      	bne.n	8004aa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d114      	bne.n	8004a5a <UART_Transmit_IT+0x48>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d110      	bne.n	8004a5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	1c9a      	adds	r2, r3, #2
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	621a      	str	r2, [r3, #32]
 8004a58:	e008      	b.n	8004a6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	1c59      	adds	r1, r3, #1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6211      	str	r1, [r2, #32]
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4619      	mov	r1, r3
 8004a7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10f      	bne.n	8004aa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68da      	ldr	r2, [r3, #12]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e000      	b.n	8004aa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004aa4:	2302      	movs	r3, #2
  }
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ab2:	b580      	push	{r7, lr}
 8004ab4:	b082      	sub	sp, #8
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2220      	movs	r2, #32
 8004ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7ff fcd0 	bl	8004478 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b08c      	sub	sp, #48	; 0x30
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b22      	cmp	r3, #34	; 0x22
 8004af4:	f040 80ab 	bne.w	8004c4e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b00:	d117      	bne.n	8004b32 <UART_Receive_IT+0x50>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d113      	bne.n	8004b32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2a:	1c9a      	adds	r2, r3, #2
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8004b30:	e026      	b.n	8004b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b44:	d007      	beq.n	8004b56 <UART_Receive_IT+0x74>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10a      	bne.n	8004b64 <UART_Receive_IT+0x82>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d106      	bne.n	8004b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b60:	701a      	strb	r2, [r3, #0]
 8004b62:	e008      	b.n	8004b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b70:	b2da      	uxtb	r2, r3
 8004b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b7a:	1c5a      	adds	r2, r3, #1
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b01      	subs	r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d15a      	bne.n	8004c4a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68da      	ldr	r2, [r3, #12]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0220 	bic.w	r2, r2, #32
 8004ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68da      	ldr	r2, [r3, #12]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	695a      	ldr	r2, [r3, #20]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2220      	movs	r2, #32
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d135      	bne.n	8004c40 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	330c      	adds	r3, #12
 8004be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	e853 3f00 	ldrex	r3, [r3]
 8004be8:	613b      	str	r3, [r7, #16]
   return(result);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f023 0310 	bic.w	r3, r3, #16
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	330c      	adds	r3, #12
 8004bf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bfa:	623a      	str	r2, [r7, #32]
 8004bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfe:	69f9      	ldr	r1, [r7, #28]
 8004c00:	6a3a      	ldr	r2, [r7, #32]
 8004c02:	e841 2300 	strex	r3, r2, [r1]
 8004c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1e5      	bne.n	8004bda <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d10a      	bne.n	8004c32 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7ff fc3b 	bl	80044b4 <HAL_UARTEx_RxEventCallback>
 8004c3e:	e002      	b.n	8004c46 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7fb ff03 	bl	8000a4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e002      	b.n	8004c50 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	e000      	b.n	8004c50 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004c4e:	2302      	movs	r3, #2
  }
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3730      	adds	r7, #48	; 0x30
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c5c:	b0c0      	sub	sp, #256	; 0x100
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c74:	68d9      	ldr	r1, [r3, #12]
 8004c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	ea40 0301 	orr.w	r3, r0, r1
 8004c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c9c:	69db      	ldr	r3, [r3, #28]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cb0:	f021 010c 	bic.w	r1, r1, #12
 8004cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd2:	6999      	ldr	r1, [r3, #24]
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	ea40 0301 	orr.w	r3, r0, r1
 8004cde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	4b8f      	ldr	r3, [pc, #572]	; (8004f24 <UART_SetConfig+0x2cc>)
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d005      	beq.n	8004cf8 <UART_SetConfig+0xa0>
 8004cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	4b8d      	ldr	r3, [pc, #564]	; (8004f28 <UART_SetConfig+0x2d0>)
 8004cf4:	429a      	cmp	r2, r3
 8004cf6:	d104      	bne.n	8004d02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cf8:	f7fe f968 	bl	8002fcc <HAL_RCC_GetPCLK2Freq>
 8004cfc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004d00:	e003      	b.n	8004d0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d02:	f7fe f94f 	bl	8002fa4 <HAL_RCC_GetPCLK1Freq>
 8004d06:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0e:	69db      	ldr	r3, [r3, #28]
 8004d10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d14:	f040 810c 	bne.w	8004f30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004d22:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004d26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004d2a:	4622      	mov	r2, r4
 8004d2c:	462b      	mov	r3, r5
 8004d2e:	1891      	adds	r1, r2, r2
 8004d30:	65b9      	str	r1, [r7, #88]	; 0x58
 8004d32:	415b      	adcs	r3, r3
 8004d34:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d3a:	4621      	mov	r1, r4
 8004d3c:	eb12 0801 	adds.w	r8, r2, r1
 8004d40:	4629      	mov	r1, r5
 8004d42:	eb43 0901 	adc.w	r9, r3, r1
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	f04f 0300 	mov.w	r3, #0
 8004d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d5a:	4690      	mov	r8, r2
 8004d5c:	4699      	mov	r9, r3
 8004d5e:	4623      	mov	r3, r4
 8004d60:	eb18 0303 	adds.w	r3, r8, r3
 8004d64:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004d68:	462b      	mov	r3, r5
 8004d6a:	eb49 0303 	adc.w	r3, r9, r3
 8004d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004d86:	460b      	mov	r3, r1
 8004d88:	18db      	adds	r3, r3, r3
 8004d8a:	653b      	str	r3, [r7, #80]	; 0x50
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	eb42 0303 	adc.w	r3, r2, r3
 8004d92:	657b      	str	r3, [r7, #84]	; 0x54
 8004d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004d98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004d9c:	f7fb fa70 	bl	8000280 <__aeabi_uldivmod>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	4b61      	ldr	r3, [pc, #388]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004da6:	fba3 2302 	umull	r2, r3, r3, r2
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	011c      	lsls	r4, r3, #4
 8004dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004db8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004dbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004dc0:	4642      	mov	r2, r8
 8004dc2:	464b      	mov	r3, r9
 8004dc4:	1891      	adds	r1, r2, r2
 8004dc6:	64b9      	str	r1, [r7, #72]	; 0x48
 8004dc8:	415b      	adcs	r3, r3
 8004dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004dd0:	4641      	mov	r1, r8
 8004dd2:	eb12 0a01 	adds.w	sl, r2, r1
 8004dd6:	4649      	mov	r1, r9
 8004dd8:	eb43 0b01 	adc.w	fp, r3, r1
 8004ddc:	f04f 0200 	mov.w	r2, #0
 8004de0:	f04f 0300 	mov.w	r3, #0
 8004de4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004de8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004df0:	4692      	mov	sl, r2
 8004df2:	469b      	mov	fp, r3
 8004df4:	4643      	mov	r3, r8
 8004df6:	eb1a 0303 	adds.w	r3, sl, r3
 8004dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004dfe:	464b      	mov	r3, r9
 8004e00:	eb4b 0303 	adc.w	r3, fp, r3
 8004e04:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004e14:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004e18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004e1c:	460b      	mov	r3, r1
 8004e1e:	18db      	adds	r3, r3, r3
 8004e20:	643b      	str	r3, [r7, #64]	; 0x40
 8004e22:	4613      	mov	r3, r2
 8004e24:	eb42 0303 	adc.w	r3, r2, r3
 8004e28:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004e2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004e32:	f7fb fa25 	bl	8000280 <__aeabi_uldivmod>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4b3b      	ldr	r3, [pc, #236]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	2264      	movs	r2, #100	; 0x64
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	1acb      	subs	r3, r1, r3
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004e52:	4b36      	ldr	r3, [pc, #216]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004e54:	fba3 2302 	umull	r2, r3, r3, r2
 8004e58:	095b      	lsrs	r3, r3, #5
 8004e5a:	005b      	lsls	r3, r3, #1
 8004e5c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e60:	441c      	add	r4, r3
 8004e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e66:	2200      	movs	r2, #0
 8004e68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004e6c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004e70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004e74:	4642      	mov	r2, r8
 8004e76:	464b      	mov	r3, r9
 8004e78:	1891      	adds	r1, r2, r2
 8004e7a:	63b9      	str	r1, [r7, #56]	; 0x38
 8004e7c:	415b      	adcs	r3, r3
 8004e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e84:	4641      	mov	r1, r8
 8004e86:	1851      	adds	r1, r2, r1
 8004e88:	6339      	str	r1, [r7, #48]	; 0x30
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	414b      	adcs	r3, r1
 8004e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	00cb      	lsls	r3, r1, #3
 8004ea0:	4651      	mov	r1, sl
 8004ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ea6:	4651      	mov	r1, sl
 8004ea8:	00ca      	lsls	r2, r1, #3
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4619      	mov	r1, r3
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	189b      	adds	r3, r3, r2
 8004eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004eb8:	464b      	mov	r3, r9
 8004eba:	460a      	mov	r2, r1
 8004ebc:	eb42 0303 	adc.w	r3, r2, r3
 8004ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ed0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004ed8:	460b      	mov	r3, r1
 8004eda:	18db      	adds	r3, r3, r3
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ede:	4613      	mov	r3, r2
 8004ee0:	eb42 0303 	adc.w	r3, r2, r3
 8004ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004eea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004eee:	f7fb f9c7 	bl	8000280 <__aeabi_uldivmod>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8004efc:	095b      	lsrs	r3, r3, #5
 8004efe:	2164      	movs	r1, #100	; 0x64
 8004f00:	fb01 f303 	mul.w	r3, r1, r3
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	00db      	lsls	r3, r3, #3
 8004f08:	3332      	adds	r3, #50	; 0x32
 8004f0a:	4a08      	ldr	r2, [pc, #32]	; (8004f2c <UART_SetConfig+0x2d4>)
 8004f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f10:	095b      	lsrs	r3, r3, #5
 8004f12:	f003 0207 	and.w	r2, r3, #7
 8004f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4422      	add	r2, r4
 8004f1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004f20:	e105      	b.n	800512e <UART_SetConfig+0x4d6>
 8004f22:	bf00      	nop
 8004f24:	40011000 	.word	0x40011000
 8004f28:	40011400 	.word	0x40011400
 8004f2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f34:	2200      	movs	r2, #0
 8004f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004f3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004f3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004f42:	4642      	mov	r2, r8
 8004f44:	464b      	mov	r3, r9
 8004f46:	1891      	adds	r1, r2, r2
 8004f48:	6239      	str	r1, [r7, #32]
 8004f4a:	415b      	adcs	r3, r3
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f52:	4641      	mov	r1, r8
 8004f54:	1854      	adds	r4, r2, r1
 8004f56:	4649      	mov	r1, r9
 8004f58:	eb43 0501 	adc.w	r5, r3, r1
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	00eb      	lsls	r3, r5, #3
 8004f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f6a:	00e2      	lsls	r2, r4, #3
 8004f6c:	4614      	mov	r4, r2
 8004f6e:	461d      	mov	r5, r3
 8004f70:	4643      	mov	r3, r8
 8004f72:	18e3      	adds	r3, r4, r3
 8004f74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f78:	464b      	mov	r3, r9
 8004f7a:	eb45 0303 	adc.w	r3, r5, r3
 8004f7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004f8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	008b      	lsls	r3, r1, #2
 8004fa2:	4621      	mov	r1, r4
 8004fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fa8:	4621      	mov	r1, r4
 8004faa:	008a      	lsls	r2, r1, #2
 8004fac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004fb0:	f7fb f966 	bl	8000280 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4b60      	ldr	r3, [pc, #384]	; (800513c <UART_SetConfig+0x4e4>)
 8004fba:	fba3 2302 	umull	r2, r3, r3, r2
 8004fbe:	095b      	lsrs	r3, r3, #5
 8004fc0:	011c      	lsls	r4, r3, #4
 8004fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004fcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004fd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004fd4:	4642      	mov	r2, r8
 8004fd6:	464b      	mov	r3, r9
 8004fd8:	1891      	adds	r1, r2, r2
 8004fda:	61b9      	str	r1, [r7, #24]
 8004fdc:	415b      	adcs	r3, r3
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fe4:	4641      	mov	r1, r8
 8004fe6:	1851      	adds	r1, r2, r1
 8004fe8:	6139      	str	r1, [r7, #16]
 8004fea:	4649      	mov	r1, r9
 8004fec:	414b      	adcs	r3, r1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 0300 	mov.w	r3, #0
 8004ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	00cb      	lsls	r3, r1, #3
 8005000:	4651      	mov	r1, sl
 8005002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005006:	4651      	mov	r1, sl
 8005008:	00ca      	lsls	r2, r1, #3
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	4603      	mov	r3, r0
 8005010:	4642      	mov	r2, r8
 8005012:	189b      	adds	r3, r3, r2
 8005014:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005018:	464b      	mov	r3, r9
 800501a:	460a      	mov	r2, r1
 800501c:	eb42 0303 	adc.w	r3, r2, r3
 8005020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	2200      	movs	r2, #0
 800502c:	67bb      	str	r3, [r7, #120]	; 0x78
 800502e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800503c:	4649      	mov	r1, r9
 800503e:	008b      	lsls	r3, r1, #2
 8005040:	4641      	mov	r1, r8
 8005042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005046:	4641      	mov	r1, r8
 8005048:	008a      	lsls	r2, r1, #2
 800504a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800504e:	f7fb f917 	bl	8000280 <__aeabi_uldivmod>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4b39      	ldr	r3, [pc, #228]	; (800513c <UART_SetConfig+0x4e4>)
 8005058:	fba3 1302 	umull	r1, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	2164      	movs	r1, #100	; 0x64
 8005060:	fb01 f303 	mul.w	r3, r1, r3
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	011b      	lsls	r3, r3, #4
 8005068:	3332      	adds	r3, #50	; 0x32
 800506a:	4a34      	ldr	r2, [pc, #208]	; (800513c <UART_SetConfig+0x4e4>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005076:	441c      	add	r4, r3
 8005078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800507c:	2200      	movs	r2, #0
 800507e:	673b      	str	r3, [r7, #112]	; 0x70
 8005080:	677a      	str	r2, [r7, #116]	; 0x74
 8005082:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005086:	4642      	mov	r2, r8
 8005088:	464b      	mov	r3, r9
 800508a:	1891      	adds	r1, r2, r2
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	415b      	adcs	r3, r3
 8005090:	60fb      	str	r3, [r7, #12]
 8005092:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005096:	4641      	mov	r1, r8
 8005098:	1851      	adds	r1, r2, r1
 800509a:	6039      	str	r1, [r7, #0]
 800509c:	4649      	mov	r1, r9
 800509e:	414b      	adcs	r3, r1
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80050ae:	4659      	mov	r1, fp
 80050b0:	00cb      	lsls	r3, r1, #3
 80050b2:	4651      	mov	r1, sl
 80050b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050b8:	4651      	mov	r1, sl
 80050ba:	00ca      	lsls	r2, r1, #3
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	4603      	mov	r3, r0
 80050c2:	4642      	mov	r2, r8
 80050c4:	189b      	adds	r3, r3, r2
 80050c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80050c8:	464b      	mov	r3, r9
 80050ca:	460a      	mov	r2, r1
 80050cc:	eb42 0303 	adc.w	r3, r2, r3
 80050d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80050d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	663b      	str	r3, [r7, #96]	; 0x60
 80050dc:	667a      	str	r2, [r7, #100]	; 0x64
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80050ea:	4649      	mov	r1, r9
 80050ec:	008b      	lsls	r3, r1, #2
 80050ee:	4641      	mov	r1, r8
 80050f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050f4:	4641      	mov	r1, r8
 80050f6:	008a      	lsls	r2, r1, #2
 80050f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80050fc:	f7fb f8c0 	bl	8000280 <__aeabi_uldivmod>
 8005100:	4602      	mov	r2, r0
 8005102:	460b      	mov	r3, r1
 8005104:	4b0d      	ldr	r3, [pc, #52]	; (800513c <UART_SetConfig+0x4e4>)
 8005106:	fba3 1302 	umull	r1, r3, r3, r2
 800510a:	095b      	lsrs	r3, r3, #5
 800510c:	2164      	movs	r1, #100	; 0x64
 800510e:	fb01 f303 	mul.w	r3, r1, r3
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	011b      	lsls	r3, r3, #4
 8005116:	3332      	adds	r3, #50	; 0x32
 8005118:	4a08      	ldr	r2, [pc, #32]	; (800513c <UART_SetConfig+0x4e4>)
 800511a:	fba2 2303 	umull	r2, r3, r2, r3
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	f003 020f 	and.w	r2, r3, #15
 8005124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4422      	add	r2, r4
 800512c:	609a      	str	r2, [r3, #8]
}
 800512e:	bf00      	nop
 8005130:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005134:	46bd      	mov	sp, r7
 8005136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800513a:	bf00      	nop
 800513c:	51eb851f 	.word	0x51eb851f

08005140 <__errno>:
 8005140:	4b01      	ldr	r3, [pc, #4]	; (8005148 <__errno+0x8>)
 8005142:	6818      	ldr	r0, [r3, #0]
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	2000000c 	.word	0x2000000c

0800514c <__libc_init_array>:
 800514c:	b570      	push	{r4, r5, r6, lr}
 800514e:	4d0d      	ldr	r5, [pc, #52]	; (8005184 <__libc_init_array+0x38>)
 8005150:	4c0d      	ldr	r4, [pc, #52]	; (8005188 <__libc_init_array+0x3c>)
 8005152:	1b64      	subs	r4, r4, r5
 8005154:	10a4      	asrs	r4, r4, #2
 8005156:	2600      	movs	r6, #0
 8005158:	42a6      	cmp	r6, r4
 800515a:	d109      	bne.n	8005170 <__libc_init_array+0x24>
 800515c:	4d0b      	ldr	r5, [pc, #44]	; (800518c <__libc_init_array+0x40>)
 800515e:	4c0c      	ldr	r4, [pc, #48]	; (8005190 <__libc_init_array+0x44>)
 8005160:	f000 ffae 	bl	80060c0 <_init>
 8005164:	1b64      	subs	r4, r4, r5
 8005166:	10a4      	asrs	r4, r4, #2
 8005168:	2600      	movs	r6, #0
 800516a:	42a6      	cmp	r6, r4
 800516c:	d105      	bne.n	800517a <__libc_init_array+0x2e>
 800516e:	bd70      	pop	{r4, r5, r6, pc}
 8005170:	f855 3b04 	ldr.w	r3, [r5], #4
 8005174:	4798      	blx	r3
 8005176:	3601      	adds	r6, #1
 8005178:	e7ee      	b.n	8005158 <__libc_init_array+0xc>
 800517a:	f855 3b04 	ldr.w	r3, [r5], #4
 800517e:	4798      	blx	r3
 8005180:	3601      	adds	r6, #1
 8005182:	e7f2      	b.n	800516a <__libc_init_array+0x1e>
 8005184:	080061c4 	.word	0x080061c4
 8005188:	080061c4 	.word	0x080061c4
 800518c:	080061c4 	.word	0x080061c4
 8005190:	080061c8 	.word	0x080061c8

08005194 <memset>:
 8005194:	4402      	add	r2, r0
 8005196:	4603      	mov	r3, r0
 8005198:	4293      	cmp	r3, r2
 800519a:	d100      	bne.n	800519e <memset+0xa>
 800519c:	4770      	bx	lr
 800519e:	f803 1b01 	strb.w	r1, [r3], #1
 80051a2:	e7f9      	b.n	8005198 <memset+0x4>

080051a4 <iprintf>:
 80051a4:	b40f      	push	{r0, r1, r2, r3}
 80051a6:	4b0a      	ldr	r3, [pc, #40]	; (80051d0 <iprintf+0x2c>)
 80051a8:	b513      	push	{r0, r1, r4, lr}
 80051aa:	681c      	ldr	r4, [r3, #0]
 80051ac:	b124      	cbz	r4, 80051b8 <iprintf+0x14>
 80051ae:	69a3      	ldr	r3, [r4, #24]
 80051b0:	b913      	cbnz	r3, 80051b8 <iprintf+0x14>
 80051b2:	4620      	mov	r0, r4
 80051b4:	f000 f866 	bl	8005284 <__sinit>
 80051b8:	ab05      	add	r3, sp, #20
 80051ba:	9a04      	ldr	r2, [sp, #16]
 80051bc:	68a1      	ldr	r1, [r4, #8]
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 f9bd 	bl	8005540 <_vfiprintf_r>
 80051c6:	b002      	add	sp, #8
 80051c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051cc:	b004      	add	sp, #16
 80051ce:	4770      	bx	lr
 80051d0:	2000000c 	.word	0x2000000c

080051d4 <std>:
 80051d4:	2300      	movs	r3, #0
 80051d6:	b510      	push	{r4, lr}
 80051d8:	4604      	mov	r4, r0
 80051da:	e9c0 3300 	strd	r3, r3, [r0]
 80051de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051e2:	6083      	str	r3, [r0, #8]
 80051e4:	8181      	strh	r1, [r0, #12]
 80051e6:	6643      	str	r3, [r0, #100]	; 0x64
 80051e8:	81c2      	strh	r2, [r0, #14]
 80051ea:	6183      	str	r3, [r0, #24]
 80051ec:	4619      	mov	r1, r3
 80051ee:	2208      	movs	r2, #8
 80051f0:	305c      	adds	r0, #92	; 0x5c
 80051f2:	f7ff ffcf 	bl	8005194 <memset>
 80051f6:	4b05      	ldr	r3, [pc, #20]	; (800520c <std+0x38>)
 80051f8:	6263      	str	r3, [r4, #36]	; 0x24
 80051fa:	4b05      	ldr	r3, [pc, #20]	; (8005210 <std+0x3c>)
 80051fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80051fe:	4b05      	ldr	r3, [pc, #20]	; (8005214 <std+0x40>)
 8005200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005202:	4b05      	ldr	r3, [pc, #20]	; (8005218 <std+0x44>)
 8005204:	6224      	str	r4, [r4, #32]
 8005206:	6323      	str	r3, [r4, #48]	; 0x30
 8005208:	bd10      	pop	{r4, pc}
 800520a:	bf00      	nop
 800520c:	08005ae9 	.word	0x08005ae9
 8005210:	08005b0b 	.word	0x08005b0b
 8005214:	08005b43 	.word	0x08005b43
 8005218:	08005b67 	.word	0x08005b67

0800521c <_cleanup_r>:
 800521c:	4901      	ldr	r1, [pc, #4]	; (8005224 <_cleanup_r+0x8>)
 800521e:	f000 b8af 	b.w	8005380 <_fwalk_reent>
 8005222:	bf00      	nop
 8005224:	08005e41 	.word	0x08005e41

08005228 <__sfmoreglue>:
 8005228:	b570      	push	{r4, r5, r6, lr}
 800522a:	2268      	movs	r2, #104	; 0x68
 800522c:	1e4d      	subs	r5, r1, #1
 800522e:	4355      	muls	r5, r2
 8005230:	460e      	mov	r6, r1
 8005232:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005236:	f000 f8e5 	bl	8005404 <_malloc_r>
 800523a:	4604      	mov	r4, r0
 800523c:	b140      	cbz	r0, 8005250 <__sfmoreglue+0x28>
 800523e:	2100      	movs	r1, #0
 8005240:	e9c0 1600 	strd	r1, r6, [r0]
 8005244:	300c      	adds	r0, #12
 8005246:	60a0      	str	r0, [r4, #8]
 8005248:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800524c:	f7ff ffa2 	bl	8005194 <memset>
 8005250:	4620      	mov	r0, r4
 8005252:	bd70      	pop	{r4, r5, r6, pc}

08005254 <__sfp_lock_acquire>:
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <__sfp_lock_acquire+0x8>)
 8005256:	f000 b8b3 	b.w	80053c0 <__retarget_lock_acquire_recursive>
 800525a:	bf00      	nop
 800525c:	20000291 	.word	0x20000291

08005260 <__sfp_lock_release>:
 8005260:	4801      	ldr	r0, [pc, #4]	; (8005268 <__sfp_lock_release+0x8>)
 8005262:	f000 b8ae 	b.w	80053c2 <__retarget_lock_release_recursive>
 8005266:	bf00      	nop
 8005268:	20000291 	.word	0x20000291

0800526c <__sinit_lock_acquire>:
 800526c:	4801      	ldr	r0, [pc, #4]	; (8005274 <__sinit_lock_acquire+0x8>)
 800526e:	f000 b8a7 	b.w	80053c0 <__retarget_lock_acquire_recursive>
 8005272:	bf00      	nop
 8005274:	20000292 	.word	0x20000292

08005278 <__sinit_lock_release>:
 8005278:	4801      	ldr	r0, [pc, #4]	; (8005280 <__sinit_lock_release+0x8>)
 800527a:	f000 b8a2 	b.w	80053c2 <__retarget_lock_release_recursive>
 800527e:	bf00      	nop
 8005280:	20000292 	.word	0x20000292

08005284 <__sinit>:
 8005284:	b510      	push	{r4, lr}
 8005286:	4604      	mov	r4, r0
 8005288:	f7ff fff0 	bl	800526c <__sinit_lock_acquire>
 800528c:	69a3      	ldr	r3, [r4, #24]
 800528e:	b11b      	cbz	r3, 8005298 <__sinit+0x14>
 8005290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005294:	f7ff bff0 	b.w	8005278 <__sinit_lock_release>
 8005298:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800529c:	6523      	str	r3, [r4, #80]	; 0x50
 800529e:	4b13      	ldr	r3, [pc, #76]	; (80052ec <__sinit+0x68>)
 80052a0:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <__sinit+0x6c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	62a2      	str	r2, [r4, #40]	; 0x28
 80052a6:	42a3      	cmp	r3, r4
 80052a8:	bf04      	itt	eq
 80052aa:	2301      	moveq	r3, #1
 80052ac:	61a3      	streq	r3, [r4, #24]
 80052ae:	4620      	mov	r0, r4
 80052b0:	f000 f820 	bl	80052f4 <__sfp>
 80052b4:	6060      	str	r0, [r4, #4]
 80052b6:	4620      	mov	r0, r4
 80052b8:	f000 f81c 	bl	80052f4 <__sfp>
 80052bc:	60a0      	str	r0, [r4, #8]
 80052be:	4620      	mov	r0, r4
 80052c0:	f000 f818 	bl	80052f4 <__sfp>
 80052c4:	2200      	movs	r2, #0
 80052c6:	60e0      	str	r0, [r4, #12]
 80052c8:	2104      	movs	r1, #4
 80052ca:	6860      	ldr	r0, [r4, #4]
 80052cc:	f7ff ff82 	bl	80051d4 <std>
 80052d0:	68a0      	ldr	r0, [r4, #8]
 80052d2:	2201      	movs	r2, #1
 80052d4:	2109      	movs	r1, #9
 80052d6:	f7ff ff7d 	bl	80051d4 <std>
 80052da:	68e0      	ldr	r0, [r4, #12]
 80052dc:	2202      	movs	r2, #2
 80052de:	2112      	movs	r1, #18
 80052e0:	f7ff ff78 	bl	80051d4 <std>
 80052e4:	2301      	movs	r3, #1
 80052e6:	61a3      	str	r3, [r4, #24]
 80052e8:	e7d2      	b.n	8005290 <__sinit+0xc>
 80052ea:	bf00      	nop
 80052ec:	08006124 	.word	0x08006124
 80052f0:	0800521d 	.word	0x0800521d

080052f4 <__sfp>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	4607      	mov	r7, r0
 80052f8:	f7ff ffac 	bl	8005254 <__sfp_lock_acquire>
 80052fc:	4b1e      	ldr	r3, [pc, #120]	; (8005378 <__sfp+0x84>)
 80052fe:	681e      	ldr	r6, [r3, #0]
 8005300:	69b3      	ldr	r3, [r6, #24]
 8005302:	b913      	cbnz	r3, 800530a <__sfp+0x16>
 8005304:	4630      	mov	r0, r6
 8005306:	f7ff ffbd 	bl	8005284 <__sinit>
 800530a:	3648      	adds	r6, #72	; 0x48
 800530c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005310:	3b01      	subs	r3, #1
 8005312:	d503      	bpl.n	800531c <__sfp+0x28>
 8005314:	6833      	ldr	r3, [r6, #0]
 8005316:	b30b      	cbz	r3, 800535c <__sfp+0x68>
 8005318:	6836      	ldr	r6, [r6, #0]
 800531a:	e7f7      	b.n	800530c <__sfp+0x18>
 800531c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005320:	b9d5      	cbnz	r5, 8005358 <__sfp+0x64>
 8005322:	4b16      	ldr	r3, [pc, #88]	; (800537c <__sfp+0x88>)
 8005324:	60e3      	str	r3, [r4, #12]
 8005326:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800532a:	6665      	str	r5, [r4, #100]	; 0x64
 800532c:	f000 f847 	bl	80053be <__retarget_lock_init_recursive>
 8005330:	f7ff ff96 	bl	8005260 <__sfp_lock_release>
 8005334:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005338:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800533c:	6025      	str	r5, [r4, #0]
 800533e:	61a5      	str	r5, [r4, #24]
 8005340:	2208      	movs	r2, #8
 8005342:	4629      	mov	r1, r5
 8005344:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005348:	f7ff ff24 	bl	8005194 <memset>
 800534c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005350:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005354:	4620      	mov	r0, r4
 8005356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005358:	3468      	adds	r4, #104	; 0x68
 800535a:	e7d9      	b.n	8005310 <__sfp+0x1c>
 800535c:	2104      	movs	r1, #4
 800535e:	4638      	mov	r0, r7
 8005360:	f7ff ff62 	bl	8005228 <__sfmoreglue>
 8005364:	4604      	mov	r4, r0
 8005366:	6030      	str	r0, [r6, #0]
 8005368:	2800      	cmp	r0, #0
 800536a:	d1d5      	bne.n	8005318 <__sfp+0x24>
 800536c:	f7ff ff78 	bl	8005260 <__sfp_lock_release>
 8005370:	230c      	movs	r3, #12
 8005372:	603b      	str	r3, [r7, #0]
 8005374:	e7ee      	b.n	8005354 <__sfp+0x60>
 8005376:	bf00      	nop
 8005378:	08006124 	.word	0x08006124
 800537c:	ffff0001 	.word	0xffff0001

08005380 <_fwalk_reent>:
 8005380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005384:	4606      	mov	r6, r0
 8005386:	4688      	mov	r8, r1
 8005388:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800538c:	2700      	movs	r7, #0
 800538e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005392:	f1b9 0901 	subs.w	r9, r9, #1
 8005396:	d505      	bpl.n	80053a4 <_fwalk_reent+0x24>
 8005398:	6824      	ldr	r4, [r4, #0]
 800539a:	2c00      	cmp	r4, #0
 800539c:	d1f7      	bne.n	800538e <_fwalk_reent+0xe>
 800539e:	4638      	mov	r0, r7
 80053a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053a4:	89ab      	ldrh	r3, [r5, #12]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d907      	bls.n	80053ba <_fwalk_reent+0x3a>
 80053aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053ae:	3301      	adds	r3, #1
 80053b0:	d003      	beq.n	80053ba <_fwalk_reent+0x3a>
 80053b2:	4629      	mov	r1, r5
 80053b4:	4630      	mov	r0, r6
 80053b6:	47c0      	blx	r8
 80053b8:	4307      	orrs	r7, r0
 80053ba:	3568      	adds	r5, #104	; 0x68
 80053bc:	e7e9      	b.n	8005392 <_fwalk_reent+0x12>

080053be <__retarget_lock_init_recursive>:
 80053be:	4770      	bx	lr

080053c0 <__retarget_lock_acquire_recursive>:
 80053c0:	4770      	bx	lr

080053c2 <__retarget_lock_release_recursive>:
 80053c2:	4770      	bx	lr

080053c4 <sbrk_aligned>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	4e0e      	ldr	r6, [pc, #56]	; (8005400 <sbrk_aligned+0x3c>)
 80053c8:	460c      	mov	r4, r1
 80053ca:	6831      	ldr	r1, [r6, #0]
 80053cc:	4605      	mov	r5, r0
 80053ce:	b911      	cbnz	r1, 80053d6 <sbrk_aligned+0x12>
 80053d0:	f000 fb7a 	bl	8005ac8 <_sbrk_r>
 80053d4:	6030      	str	r0, [r6, #0]
 80053d6:	4621      	mov	r1, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 fb75 	bl	8005ac8 <_sbrk_r>
 80053de:	1c43      	adds	r3, r0, #1
 80053e0:	d00a      	beq.n	80053f8 <sbrk_aligned+0x34>
 80053e2:	1cc4      	adds	r4, r0, #3
 80053e4:	f024 0403 	bic.w	r4, r4, #3
 80053e8:	42a0      	cmp	r0, r4
 80053ea:	d007      	beq.n	80053fc <sbrk_aligned+0x38>
 80053ec:	1a21      	subs	r1, r4, r0
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 fb6a 	bl	8005ac8 <_sbrk_r>
 80053f4:	3001      	adds	r0, #1
 80053f6:	d101      	bne.n	80053fc <sbrk_aligned+0x38>
 80053f8:	f04f 34ff 	mov.w	r4, #4294967295
 80053fc:	4620      	mov	r0, r4
 80053fe:	bd70      	pop	{r4, r5, r6, pc}
 8005400:	20000298 	.word	0x20000298

08005404 <_malloc_r>:
 8005404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005408:	1ccd      	adds	r5, r1, #3
 800540a:	f025 0503 	bic.w	r5, r5, #3
 800540e:	3508      	adds	r5, #8
 8005410:	2d0c      	cmp	r5, #12
 8005412:	bf38      	it	cc
 8005414:	250c      	movcc	r5, #12
 8005416:	2d00      	cmp	r5, #0
 8005418:	4607      	mov	r7, r0
 800541a:	db01      	blt.n	8005420 <_malloc_r+0x1c>
 800541c:	42a9      	cmp	r1, r5
 800541e:	d905      	bls.n	800542c <_malloc_r+0x28>
 8005420:	230c      	movs	r3, #12
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	2600      	movs	r6, #0
 8005426:	4630      	mov	r0, r6
 8005428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542c:	4e2e      	ldr	r6, [pc, #184]	; (80054e8 <_malloc_r+0xe4>)
 800542e:	f000 fdbb 	bl	8005fa8 <__malloc_lock>
 8005432:	6833      	ldr	r3, [r6, #0]
 8005434:	461c      	mov	r4, r3
 8005436:	bb34      	cbnz	r4, 8005486 <_malloc_r+0x82>
 8005438:	4629      	mov	r1, r5
 800543a:	4638      	mov	r0, r7
 800543c:	f7ff ffc2 	bl	80053c4 <sbrk_aligned>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	4604      	mov	r4, r0
 8005444:	d14d      	bne.n	80054e2 <_malloc_r+0xde>
 8005446:	6834      	ldr	r4, [r6, #0]
 8005448:	4626      	mov	r6, r4
 800544a:	2e00      	cmp	r6, #0
 800544c:	d140      	bne.n	80054d0 <_malloc_r+0xcc>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	4631      	mov	r1, r6
 8005452:	4638      	mov	r0, r7
 8005454:	eb04 0803 	add.w	r8, r4, r3
 8005458:	f000 fb36 	bl	8005ac8 <_sbrk_r>
 800545c:	4580      	cmp	r8, r0
 800545e:	d13a      	bne.n	80054d6 <_malloc_r+0xd2>
 8005460:	6821      	ldr	r1, [r4, #0]
 8005462:	3503      	adds	r5, #3
 8005464:	1a6d      	subs	r5, r5, r1
 8005466:	f025 0503 	bic.w	r5, r5, #3
 800546a:	3508      	adds	r5, #8
 800546c:	2d0c      	cmp	r5, #12
 800546e:	bf38      	it	cc
 8005470:	250c      	movcc	r5, #12
 8005472:	4629      	mov	r1, r5
 8005474:	4638      	mov	r0, r7
 8005476:	f7ff ffa5 	bl	80053c4 <sbrk_aligned>
 800547a:	3001      	adds	r0, #1
 800547c:	d02b      	beq.n	80054d6 <_malloc_r+0xd2>
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	442b      	add	r3, r5
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	e00e      	b.n	80054a4 <_malloc_r+0xa0>
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	1b52      	subs	r2, r2, r5
 800548a:	d41e      	bmi.n	80054ca <_malloc_r+0xc6>
 800548c:	2a0b      	cmp	r2, #11
 800548e:	d916      	bls.n	80054be <_malloc_r+0xba>
 8005490:	1961      	adds	r1, r4, r5
 8005492:	42a3      	cmp	r3, r4
 8005494:	6025      	str	r5, [r4, #0]
 8005496:	bf18      	it	ne
 8005498:	6059      	strne	r1, [r3, #4]
 800549a:	6863      	ldr	r3, [r4, #4]
 800549c:	bf08      	it	eq
 800549e:	6031      	streq	r1, [r6, #0]
 80054a0:	5162      	str	r2, [r4, r5]
 80054a2:	604b      	str	r3, [r1, #4]
 80054a4:	4638      	mov	r0, r7
 80054a6:	f104 060b 	add.w	r6, r4, #11
 80054aa:	f000 fd83 	bl	8005fb4 <__malloc_unlock>
 80054ae:	f026 0607 	bic.w	r6, r6, #7
 80054b2:	1d23      	adds	r3, r4, #4
 80054b4:	1af2      	subs	r2, r6, r3
 80054b6:	d0b6      	beq.n	8005426 <_malloc_r+0x22>
 80054b8:	1b9b      	subs	r3, r3, r6
 80054ba:	50a3      	str	r3, [r4, r2]
 80054bc:	e7b3      	b.n	8005426 <_malloc_r+0x22>
 80054be:	6862      	ldr	r2, [r4, #4]
 80054c0:	42a3      	cmp	r3, r4
 80054c2:	bf0c      	ite	eq
 80054c4:	6032      	streq	r2, [r6, #0]
 80054c6:	605a      	strne	r2, [r3, #4]
 80054c8:	e7ec      	b.n	80054a4 <_malloc_r+0xa0>
 80054ca:	4623      	mov	r3, r4
 80054cc:	6864      	ldr	r4, [r4, #4]
 80054ce:	e7b2      	b.n	8005436 <_malloc_r+0x32>
 80054d0:	4634      	mov	r4, r6
 80054d2:	6876      	ldr	r6, [r6, #4]
 80054d4:	e7b9      	b.n	800544a <_malloc_r+0x46>
 80054d6:	230c      	movs	r3, #12
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4638      	mov	r0, r7
 80054dc:	f000 fd6a 	bl	8005fb4 <__malloc_unlock>
 80054e0:	e7a1      	b.n	8005426 <_malloc_r+0x22>
 80054e2:	6025      	str	r5, [r4, #0]
 80054e4:	e7de      	b.n	80054a4 <_malloc_r+0xa0>
 80054e6:	bf00      	nop
 80054e8:	20000294 	.word	0x20000294

080054ec <__sfputc_r>:
 80054ec:	6893      	ldr	r3, [r2, #8]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	b410      	push	{r4}
 80054f4:	6093      	str	r3, [r2, #8]
 80054f6:	da08      	bge.n	800550a <__sfputc_r+0x1e>
 80054f8:	6994      	ldr	r4, [r2, #24]
 80054fa:	42a3      	cmp	r3, r4
 80054fc:	db01      	blt.n	8005502 <__sfputc_r+0x16>
 80054fe:	290a      	cmp	r1, #10
 8005500:	d103      	bne.n	800550a <__sfputc_r+0x1e>
 8005502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005506:	f000 bb33 	b.w	8005b70 <__swbuf_r>
 800550a:	6813      	ldr	r3, [r2, #0]
 800550c:	1c58      	adds	r0, r3, #1
 800550e:	6010      	str	r0, [r2, #0]
 8005510:	7019      	strb	r1, [r3, #0]
 8005512:	4608      	mov	r0, r1
 8005514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005518:	4770      	bx	lr

0800551a <__sfputs_r>:
 800551a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800551c:	4606      	mov	r6, r0
 800551e:	460f      	mov	r7, r1
 8005520:	4614      	mov	r4, r2
 8005522:	18d5      	adds	r5, r2, r3
 8005524:	42ac      	cmp	r4, r5
 8005526:	d101      	bne.n	800552c <__sfputs_r+0x12>
 8005528:	2000      	movs	r0, #0
 800552a:	e007      	b.n	800553c <__sfputs_r+0x22>
 800552c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005530:	463a      	mov	r2, r7
 8005532:	4630      	mov	r0, r6
 8005534:	f7ff ffda 	bl	80054ec <__sfputc_r>
 8005538:	1c43      	adds	r3, r0, #1
 800553a:	d1f3      	bne.n	8005524 <__sfputs_r+0xa>
 800553c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005540 <_vfiprintf_r>:
 8005540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005544:	460d      	mov	r5, r1
 8005546:	b09d      	sub	sp, #116	; 0x74
 8005548:	4614      	mov	r4, r2
 800554a:	4698      	mov	r8, r3
 800554c:	4606      	mov	r6, r0
 800554e:	b118      	cbz	r0, 8005558 <_vfiprintf_r+0x18>
 8005550:	6983      	ldr	r3, [r0, #24]
 8005552:	b90b      	cbnz	r3, 8005558 <_vfiprintf_r+0x18>
 8005554:	f7ff fe96 	bl	8005284 <__sinit>
 8005558:	4b89      	ldr	r3, [pc, #548]	; (8005780 <_vfiprintf_r+0x240>)
 800555a:	429d      	cmp	r5, r3
 800555c:	d11b      	bne.n	8005596 <_vfiprintf_r+0x56>
 800555e:	6875      	ldr	r5, [r6, #4]
 8005560:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005562:	07d9      	lsls	r1, r3, #31
 8005564:	d405      	bmi.n	8005572 <_vfiprintf_r+0x32>
 8005566:	89ab      	ldrh	r3, [r5, #12]
 8005568:	059a      	lsls	r2, r3, #22
 800556a:	d402      	bmi.n	8005572 <_vfiprintf_r+0x32>
 800556c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800556e:	f7ff ff27 	bl	80053c0 <__retarget_lock_acquire_recursive>
 8005572:	89ab      	ldrh	r3, [r5, #12]
 8005574:	071b      	lsls	r3, r3, #28
 8005576:	d501      	bpl.n	800557c <_vfiprintf_r+0x3c>
 8005578:	692b      	ldr	r3, [r5, #16]
 800557a:	b9eb      	cbnz	r3, 80055b8 <_vfiprintf_r+0x78>
 800557c:	4629      	mov	r1, r5
 800557e:	4630      	mov	r0, r6
 8005580:	f000 fb5a 	bl	8005c38 <__swsetup_r>
 8005584:	b1c0      	cbz	r0, 80055b8 <_vfiprintf_r+0x78>
 8005586:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005588:	07dc      	lsls	r4, r3, #31
 800558a:	d50e      	bpl.n	80055aa <_vfiprintf_r+0x6a>
 800558c:	f04f 30ff 	mov.w	r0, #4294967295
 8005590:	b01d      	add	sp, #116	; 0x74
 8005592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005596:	4b7b      	ldr	r3, [pc, #492]	; (8005784 <_vfiprintf_r+0x244>)
 8005598:	429d      	cmp	r5, r3
 800559a:	d101      	bne.n	80055a0 <_vfiprintf_r+0x60>
 800559c:	68b5      	ldr	r5, [r6, #8]
 800559e:	e7df      	b.n	8005560 <_vfiprintf_r+0x20>
 80055a0:	4b79      	ldr	r3, [pc, #484]	; (8005788 <_vfiprintf_r+0x248>)
 80055a2:	429d      	cmp	r5, r3
 80055a4:	bf08      	it	eq
 80055a6:	68f5      	ldreq	r5, [r6, #12]
 80055a8:	e7da      	b.n	8005560 <_vfiprintf_r+0x20>
 80055aa:	89ab      	ldrh	r3, [r5, #12]
 80055ac:	0598      	lsls	r0, r3, #22
 80055ae:	d4ed      	bmi.n	800558c <_vfiprintf_r+0x4c>
 80055b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80055b2:	f7ff ff06 	bl	80053c2 <__retarget_lock_release_recursive>
 80055b6:	e7e9      	b.n	800558c <_vfiprintf_r+0x4c>
 80055b8:	2300      	movs	r3, #0
 80055ba:	9309      	str	r3, [sp, #36]	; 0x24
 80055bc:	2320      	movs	r3, #32
 80055be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80055c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80055c6:	2330      	movs	r3, #48	; 0x30
 80055c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800578c <_vfiprintf_r+0x24c>
 80055cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80055d0:	f04f 0901 	mov.w	r9, #1
 80055d4:	4623      	mov	r3, r4
 80055d6:	469a      	mov	sl, r3
 80055d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80055dc:	b10a      	cbz	r2, 80055e2 <_vfiprintf_r+0xa2>
 80055de:	2a25      	cmp	r2, #37	; 0x25
 80055e0:	d1f9      	bne.n	80055d6 <_vfiprintf_r+0x96>
 80055e2:	ebba 0b04 	subs.w	fp, sl, r4
 80055e6:	d00b      	beq.n	8005600 <_vfiprintf_r+0xc0>
 80055e8:	465b      	mov	r3, fp
 80055ea:	4622      	mov	r2, r4
 80055ec:	4629      	mov	r1, r5
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7ff ff93 	bl	800551a <__sfputs_r>
 80055f4:	3001      	adds	r0, #1
 80055f6:	f000 80aa 	beq.w	800574e <_vfiprintf_r+0x20e>
 80055fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80055fc:	445a      	add	r2, fp
 80055fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005600:	f89a 3000 	ldrb.w	r3, [sl]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a2 	beq.w	800574e <_vfiprintf_r+0x20e>
 800560a:	2300      	movs	r3, #0
 800560c:	f04f 32ff 	mov.w	r2, #4294967295
 8005610:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005614:	f10a 0a01 	add.w	sl, sl, #1
 8005618:	9304      	str	r3, [sp, #16]
 800561a:	9307      	str	r3, [sp, #28]
 800561c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005620:	931a      	str	r3, [sp, #104]	; 0x68
 8005622:	4654      	mov	r4, sl
 8005624:	2205      	movs	r2, #5
 8005626:	f814 1b01 	ldrb.w	r1, [r4], #1
 800562a:	4858      	ldr	r0, [pc, #352]	; (800578c <_vfiprintf_r+0x24c>)
 800562c:	f7fa fdd8 	bl	80001e0 <memchr>
 8005630:	9a04      	ldr	r2, [sp, #16]
 8005632:	b9d8      	cbnz	r0, 800566c <_vfiprintf_r+0x12c>
 8005634:	06d1      	lsls	r1, r2, #27
 8005636:	bf44      	itt	mi
 8005638:	2320      	movmi	r3, #32
 800563a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800563e:	0713      	lsls	r3, r2, #28
 8005640:	bf44      	itt	mi
 8005642:	232b      	movmi	r3, #43	; 0x2b
 8005644:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005648:	f89a 3000 	ldrb.w	r3, [sl]
 800564c:	2b2a      	cmp	r3, #42	; 0x2a
 800564e:	d015      	beq.n	800567c <_vfiprintf_r+0x13c>
 8005650:	9a07      	ldr	r2, [sp, #28]
 8005652:	4654      	mov	r4, sl
 8005654:	2000      	movs	r0, #0
 8005656:	f04f 0c0a 	mov.w	ip, #10
 800565a:	4621      	mov	r1, r4
 800565c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005660:	3b30      	subs	r3, #48	; 0x30
 8005662:	2b09      	cmp	r3, #9
 8005664:	d94e      	bls.n	8005704 <_vfiprintf_r+0x1c4>
 8005666:	b1b0      	cbz	r0, 8005696 <_vfiprintf_r+0x156>
 8005668:	9207      	str	r2, [sp, #28]
 800566a:	e014      	b.n	8005696 <_vfiprintf_r+0x156>
 800566c:	eba0 0308 	sub.w	r3, r0, r8
 8005670:	fa09 f303 	lsl.w	r3, r9, r3
 8005674:	4313      	orrs	r3, r2
 8005676:	9304      	str	r3, [sp, #16]
 8005678:	46a2      	mov	sl, r4
 800567a:	e7d2      	b.n	8005622 <_vfiprintf_r+0xe2>
 800567c:	9b03      	ldr	r3, [sp, #12]
 800567e:	1d19      	adds	r1, r3, #4
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	9103      	str	r1, [sp, #12]
 8005684:	2b00      	cmp	r3, #0
 8005686:	bfbb      	ittet	lt
 8005688:	425b      	neglt	r3, r3
 800568a:	f042 0202 	orrlt.w	r2, r2, #2
 800568e:	9307      	strge	r3, [sp, #28]
 8005690:	9307      	strlt	r3, [sp, #28]
 8005692:	bfb8      	it	lt
 8005694:	9204      	strlt	r2, [sp, #16]
 8005696:	7823      	ldrb	r3, [r4, #0]
 8005698:	2b2e      	cmp	r3, #46	; 0x2e
 800569a:	d10c      	bne.n	80056b6 <_vfiprintf_r+0x176>
 800569c:	7863      	ldrb	r3, [r4, #1]
 800569e:	2b2a      	cmp	r3, #42	; 0x2a
 80056a0:	d135      	bne.n	800570e <_vfiprintf_r+0x1ce>
 80056a2:	9b03      	ldr	r3, [sp, #12]
 80056a4:	1d1a      	adds	r2, r3, #4
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	9203      	str	r2, [sp, #12]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bfb8      	it	lt
 80056ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80056b2:	3402      	adds	r4, #2
 80056b4:	9305      	str	r3, [sp, #20]
 80056b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800579c <_vfiprintf_r+0x25c>
 80056ba:	7821      	ldrb	r1, [r4, #0]
 80056bc:	2203      	movs	r2, #3
 80056be:	4650      	mov	r0, sl
 80056c0:	f7fa fd8e 	bl	80001e0 <memchr>
 80056c4:	b140      	cbz	r0, 80056d8 <_vfiprintf_r+0x198>
 80056c6:	2340      	movs	r3, #64	; 0x40
 80056c8:	eba0 000a 	sub.w	r0, r0, sl
 80056cc:	fa03 f000 	lsl.w	r0, r3, r0
 80056d0:	9b04      	ldr	r3, [sp, #16]
 80056d2:	4303      	orrs	r3, r0
 80056d4:	3401      	adds	r4, #1
 80056d6:	9304      	str	r3, [sp, #16]
 80056d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056dc:	482c      	ldr	r0, [pc, #176]	; (8005790 <_vfiprintf_r+0x250>)
 80056de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80056e2:	2206      	movs	r2, #6
 80056e4:	f7fa fd7c 	bl	80001e0 <memchr>
 80056e8:	2800      	cmp	r0, #0
 80056ea:	d03f      	beq.n	800576c <_vfiprintf_r+0x22c>
 80056ec:	4b29      	ldr	r3, [pc, #164]	; (8005794 <_vfiprintf_r+0x254>)
 80056ee:	bb1b      	cbnz	r3, 8005738 <_vfiprintf_r+0x1f8>
 80056f0:	9b03      	ldr	r3, [sp, #12]
 80056f2:	3307      	adds	r3, #7
 80056f4:	f023 0307 	bic.w	r3, r3, #7
 80056f8:	3308      	adds	r3, #8
 80056fa:	9303      	str	r3, [sp, #12]
 80056fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056fe:	443b      	add	r3, r7
 8005700:	9309      	str	r3, [sp, #36]	; 0x24
 8005702:	e767      	b.n	80055d4 <_vfiprintf_r+0x94>
 8005704:	fb0c 3202 	mla	r2, ip, r2, r3
 8005708:	460c      	mov	r4, r1
 800570a:	2001      	movs	r0, #1
 800570c:	e7a5      	b.n	800565a <_vfiprintf_r+0x11a>
 800570e:	2300      	movs	r3, #0
 8005710:	3401      	adds	r4, #1
 8005712:	9305      	str	r3, [sp, #20]
 8005714:	4619      	mov	r1, r3
 8005716:	f04f 0c0a 	mov.w	ip, #10
 800571a:	4620      	mov	r0, r4
 800571c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005720:	3a30      	subs	r2, #48	; 0x30
 8005722:	2a09      	cmp	r2, #9
 8005724:	d903      	bls.n	800572e <_vfiprintf_r+0x1ee>
 8005726:	2b00      	cmp	r3, #0
 8005728:	d0c5      	beq.n	80056b6 <_vfiprintf_r+0x176>
 800572a:	9105      	str	r1, [sp, #20]
 800572c:	e7c3      	b.n	80056b6 <_vfiprintf_r+0x176>
 800572e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005732:	4604      	mov	r4, r0
 8005734:	2301      	movs	r3, #1
 8005736:	e7f0      	b.n	800571a <_vfiprintf_r+0x1da>
 8005738:	ab03      	add	r3, sp, #12
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	462a      	mov	r2, r5
 800573e:	4b16      	ldr	r3, [pc, #88]	; (8005798 <_vfiprintf_r+0x258>)
 8005740:	a904      	add	r1, sp, #16
 8005742:	4630      	mov	r0, r6
 8005744:	f3af 8000 	nop.w
 8005748:	4607      	mov	r7, r0
 800574a:	1c78      	adds	r0, r7, #1
 800574c:	d1d6      	bne.n	80056fc <_vfiprintf_r+0x1bc>
 800574e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005750:	07d9      	lsls	r1, r3, #31
 8005752:	d405      	bmi.n	8005760 <_vfiprintf_r+0x220>
 8005754:	89ab      	ldrh	r3, [r5, #12]
 8005756:	059a      	lsls	r2, r3, #22
 8005758:	d402      	bmi.n	8005760 <_vfiprintf_r+0x220>
 800575a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800575c:	f7ff fe31 	bl	80053c2 <__retarget_lock_release_recursive>
 8005760:	89ab      	ldrh	r3, [r5, #12]
 8005762:	065b      	lsls	r3, r3, #25
 8005764:	f53f af12 	bmi.w	800558c <_vfiprintf_r+0x4c>
 8005768:	9809      	ldr	r0, [sp, #36]	; 0x24
 800576a:	e711      	b.n	8005590 <_vfiprintf_r+0x50>
 800576c:	ab03      	add	r3, sp, #12
 800576e:	9300      	str	r3, [sp, #0]
 8005770:	462a      	mov	r2, r5
 8005772:	4b09      	ldr	r3, [pc, #36]	; (8005798 <_vfiprintf_r+0x258>)
 8005774:	a904      	add	r1, sp, #16
 8005776:	4630      	mov	r0, r6
 8005778:	f000 f880 	bl	800587c <_printf_i>
 800577c:	e7e4      	b.n	8005748 <_vfiprintf_r+0x208>
 800577e:	bf00      	nop
 8005780:	08006148 	.word	0x08006148
 8005784:	08006168 	.word	0x08006168
 8005788:	08006128 	.word	0x08006128
 800578c:	08006188 	.word	0x08006188
 8005790:	08006192 	.word	0x08006192
 8005794:	00000000 	.word	0x00000000
 8005798:	0800551b 	.word	0x0800551b
 800579c:	0800618e 	.word	0x0800618e

080057a0 <_printf_common>:
 80057a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	4616      	mov	r6, r2
 80057a6:	4699      	mov	r9, r3
 80057a8:	688a      	ldr	r2, [r1, #8]
 80057aa:	690b      	ldr	r3, [r1, #16]
 80057ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057b0:	4293      	cmp	r3, r2
 80057b2:	bfb8      	it	lt
 80057b4:	4613      	movlt	r3, r2
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057bc:	4607      	mov	r7, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	b10a      	cbz	r2, 80057c6 <_printf_common+0x26>
 80057c2:	3301      	adds	r3, #1
 80057c4:	6033      	str	r3, [r6, #0]
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	0699      	lsls	r1, r3, #26
 80057ca:	bf42      	ittt	mi
 80057cc:	6833      	ldrmi	r3, [r6, #0]
 80057ce:	3302      	addmi	r3, #2
 80057d0:	6033      	strmi	r3, [r6, #0]
 80057d2:	6825      	ldr	r5, [r4, #0]
 80057d4:	f015 0506 	ands.w	r5, r5, #6
 80057d8:	d106      	bne.n	80057e8 <_printf_common+0x48>
 80057da:	f104 0a19 	add.w	sl, r4, #25
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	6832      	ldr	r2, [r6, #0]
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	42ab      	cmp	r3, r5
 80057e6:	dc26      	bgt.n	8005836 <_printf_common+0x96>
 80057e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057ec:	1e13      	subs	r3, r2, #0
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	bf18      	it	ne
 80057f2:	2301      	movne	r3, #1
 80057f4:	0692      	lsls	r2, r2, #26
 80057f6:	d42b      	bmi.n	8005850 <_printf_common+0xb0>
 80057f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057fc:	4649      	mov	r1, r9
 80057fe:	4638      	mov	r0, r7
 8005800:	47c0      	blx	r8
 8005802:	3001      	adds	r0, #1
 8005804:	d01e      	beq.n	8005844 <_printf_common+0xa4>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	68e5      	ldr	r5, [r4, #12]
 800580a:	6832      	ldr	r2, [r6, #0]
 800580c:	f003 0306 	and.w	r3, r3, #6
 8005810:	2b04      	cmp	r3, #4
 8005812:	bf08      	it	eq
 8005814:	1aad      	subeq	r5, r5, r2
 8005816:	68a3      	ldr	r3, [r4, #8]
 8005818:	6922      	ldr	r2, [r4, #16]
 800581a:	bf0c      	ite	eq
 800581c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005820:	2500      	movne	r5, #0
 8005822:	4293      	cmp	r3, r2
 8005824:	bfc4      	itt	gt
 8005826:	1a9b      	subgt	r3, r3, r2
 8005828:	18ed      	addgt	r5, r5, r3
 800582a:	2600      	movs	r6, #0
 800582c:	341a      	adds	r4, #26
 800582e:	42b5      	cmp	r5, r6
 8005830:	d11a      	bne.n	8005868 <_printf_common+0xc8>
 8005832:	2000      	movs	r0, #0
 8005834:	e008      	b.n	8005848 <_printf_common+0xa8>
 8005836:	2301      	movs	r3, #1
 8005838:	4652      	mov	r2, sl
 800583a:	4649      	mov	r1, r9
 800583c:	4638      	mov	r0, r7
 800583e:	47c0      	blx	r8
 8005840:	3001      	adds	r0, #1
 8005842:	d103      	bne.n	800584c <_printf_common+0xac>
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584c:	3501      	adds	r5, #1
 800584e:	e7c6      	b.n	80057de <_printf_common+0x3e>
 8005850:	18e1      	adds	r1, r4, r3
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	2030      	movs	r0, #48	; 0x30
 8005856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800585a:	4422      	add	r2, r4
 800585c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005864:	3302      	adds	r3, #2
 8005866:	e7c7      	b.n	80057f8 <_printf_common+0x58>
 8005868:	2301      	movs	r3, #1
 800586a:	4622      	mov	r2, r4
 800586c:	4649      	mov	r1, r9
 800586e:	4638      	mov	r0, r7
 8005870:	47c0      	blx	r8
 8005872:	3001      	adds	r0, #1
 8005874:	d0e6      	beq.n	8005844 <_printf_common+0xa4>
 8005876:	3601      	adds	r6, #1
 8005878:	e7d9      	b.n	800582e <_printf_common+0x8e>
	...

0800587c <_printf_i>:
 800587c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005880:	7e0f      	ldrb	r7, [r1, #24]
 8005882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005884:	2f78      	cmp	r7, #120	; 0x78
 8005886:	4691      	mov	r9, r2
 8005888:	4680      	mov	r8, r0
 800588a:	460c      	mov	r4, r1
 800588c:	469a      	mov	sl, r3
 800588e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005892:	d807      	bhi.n	80058a4 <_printf_i+0x28>
 8005894:	2f62      	cmp	r7, #98	; 0x62
 8005896:	d80a      	bhi.n	80058ae <_printf_i+0x32>
 8005898:	2f00      	cmp	r7, #0
 800589a:	f000 80d8 	beq.w	8005a4e <_printf_i+0x1d2>
 800589e:	2f58      	cmp	r7, #88	; 0x58
 80058a0:	f000 80a3 	beq.w	80059ea <_printf_i+0x16e>
 80058a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ac:	e03a      	b.n	8005924 <_printf_i+0xa8>
 80058ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058b2:	2b15      	cmp	r3, #21
 80058b4:	d8f6      	bhi.n	80058a4 <_printf_i+0x28>
 80058b6:	a101      	add	r1, pc, #4	; (adr r1, 80058bc <_printf_i+0x40>)
 80058b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058bc:	08005915 	.word	0x08005915
 80058c0:	08005929 	.word	0x08005929
 80058c4:	080058a5 	.word	0x080058a5
 80058c8:	080058a5 	.word	0x080058a5
 80058cc:	080058a5 	.word	0x080058a5
 80058d0:	080058a5 	.word	0x080058a5
 80058d4:	08005929 	.word	0x08005929
 80058d8:	080058a5 	.word	0x080058a5
 80058dc:	080058a5 	.word	0x080058a5
 80058e0:	080058a5 	.word	0x080058a5
 80058e4:	080058a5 	.word	0x080058a5
 80058e8:	08005a35 	.word	0x08005a35
 80058ec:	08005959 	.word	0x08005959
 80058f0:	08005a17 	.word	0x08005a17
 80058f4:	080058a5 	.word	0x080058a5
 80058f8:	080058a5 	.word	0x080058a5
 80058fc:	08005a57 	.word	0x08005a57
 8005900:	080058a5 	.word	0x080058a5
 8005904:	08005959 	.word	0x08005959
 8005908:	080058a5 	.word	0x080058a5
 800590c:	080058a5 	.word	0x080058a5
 8005910:	08005a1f 	.word	0x08005a1f
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	1d1a      	adds	r2, r3, #4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	602a      	str	r2, [r5, #0]
 800591c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005924:	2301      	movs	r3, #1
 8005926:	e0a3      	b.n	8005a70 <_printf_i+0x1f4>
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	6829      	ldr	r1, [r5, #0]
 800592c:	0606      	lsls	r6, r0, #24
 800592e:	f101 0304 	add.w	r3, r1, #4
 8005932:	d50a      	bpl.n	800594a <_printf_i+0xce>
 8005934:	680e      	ldr	r6, [r1, #0]
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	2e00      	cmp	r6, #0
 800593a:	da03      	bge.n	8005944 <_printf_i+0xc8>
 800593c:	232d      	movs	r3, #45	; 0x2d
 800593e:	4276      	negs	r6, r6
 8005940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005944:	485e      	ldr	r0, [pc, #376]	; (8005ac0 <_printf_i+0x244>)
 8005946:	230a      	movs	r3, #10
 8005948:	e019      	b.n	800597e <_printf_i+0x102>
 800594a:	680e      	ldr	r6, [r1, #0]
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005952:	bf18      	it	ne
 8005954:	b236      	sxthne	r6, r6
 8005956:	e7ef      	b.n	8005938 <_printf_i+0xbc>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	6820      	ldr	r0, [r4, #0]
 800595c:	1d19      	adds	r1, r3, #4
 800595e:	6029      	str	r1, [r5, #0]
 8005960:	0601      	lsls	r1, r0, #24
 8005962:	d501      	bpl.n	8005968 <_printf_i+0xec>
 8005964:	681e      	ldr	r6, [r3, #0]
 8005966:	e002      	b.n	800596e <_printf_i+0xf2>
 8005968:	0646      	lsls	r6, r0, #25
 800596a:	d5fb      	bpl.n	8005964 <_printf_i+0xe8>
 800596c:	881e      	ldrh	r6, [r3, #0]
 800596e:	4854      	ldr	r0, [pc, #336]	; (8005ac0 <_printf_i+0x244>)
 8005970:	2f6f      	cmp	r7, #111	; 0x6f
 8005972:	bf0c      	ite	eq
 8005974:	2308      	moveq	r3, #8
 8005976:	230a      	movne	r3, #10
 8005978:	2100      	movs	r1, #0
 800597a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800597e:	6865      	ldr	r5, [r4, #4]
 8005980:	60a5      	str	r5, [r4, #8]
 8005982:	2d00      	cmp	r5, #0
 8005984:	bfa2      	ittt	ge
 8005986:	6821      	ldrge	r1, [r4, #0]
 8005988:	f021 0104 	bicge.w	r1, r1, #4
 800598c:	6021      	strge	r1, [r4, #0]
 800598e:	b90e      	cbnz	r6, 8005994 <_printf_i+0x118>
 8005990:	2d00      	cmp	r5, #0
 8005992:	d04d      	beq.n	8005a30 <_printf_i+0x1b4>
 8005994:	4615      	mov	r5, r2
 8005996:	fbb6 f1f3 	udiv	r1, r6, r3
 800599a:	fb03 6711 	mls	r7, r3, r1, r6
 800599e:	5dc7      	ldrb	r7, [r0, r7]
 80059a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059a4:	4637      	mov	r7, r6
 80059a6:	42bb      	cmp	r3, r7
 80059a8:	460e      	mov	r6, r1
 80059aa:	d9f4      	bls.n	8005996 <_printf_i+0x11a>
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d10b      	bne.n	80059c8 <_printf_i+0x14c>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	07de      	lsls	r6, r3, #31
 80059b4:	d508      	bpl.n	80059c8 <_printf_i+0x14c>
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6861      	ldr	r1, [r4, #4]
 80059ba:	4299      	cmp	r1, r3
 80059bc:	bfde      	ittt	le
 80059be:	2330      	movle	r3, #48	; 0x30
 80059c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059c8:	1b52      	subs	r2, r2, r5
 80059ca:	6122      	str	r2, [r4, #16]
 80059cc:	f8cd a000 	str.w	sl, [sp]
 80059d0:	464b      	mov	r3, r9
 80059d2:	aa03      	add	r2, sp, #12
 80059d4:	4621      	mov	r1, r4
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7ff fee2 	bl	80057a0 <_printf_common>
 80059dc:	3001      	adds	r0, #1
 80059de:	d14c      	bne.n	8005a7a <_printf_i+0x1fe>
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	b004      	add	sp, #16
 80059e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ea:	4835      	ldr	r0, [pc, #212]	; (8005ac0 <_printf_i+0x244>)
 80059ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059f0:	6829      	ldr	r1, [r5, #0]
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059f8:	6029      	str	r1, [r5, #0]
 80059fa:	061d      	lsls	r5, r3, #24
 80059fc:	d514      	bpl.n	8005a28 <_printf_i+0x1ac>
 80059fe:	07df      	lsls	r7, r3, #31
 8005a00:	bf44      	itt	mi
 8005a02:	f043 0320 	orrmi.w	r3, r3, #32
 8005a06:	6023      	strmi	r3, [r4, #0]
 8005a08:	b91e      	cbnz	r6, 8005a12 <_printf_i+0x196>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f023 0320 	bic.w	r3, r3, #32
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	2310      	movs	r3, #16
 8005a14:	e7b0      	b.n	8005978 <_printf_i+0xfc>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f043 0320 	orr.w	r3, r3, #32
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	2378      	movs	r3, #120	; 0x78
 8005a20:	4828      	ldr	r0, [pc, #160]	; (8005ac4 <_printf_i+0x248>)
 8005a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a26:	e7e3      	b.n	80059f0 <_printf_i+0x174>
 8005a28:	0659      	lsls	r1, r3, #25
 8005a2a:	bf48      	it	mi
 8005a2c:	b2b6      	uxthmi	r6, r6
 8005a2e:	e7e6      	b.n	80059fe <_printf_i+0x182>
 8005a30:	4615      	mov	r5, r2
 8005a32:	e7bb      	b.n	80059ac <_printf_i+0x130>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	6826      	ldr	r6, [r4, #0]
 8005a38:	6961      	ldr	r1, [r4, #20]
 8005a3a:	1d18      	adds	r0, r3, #4
 8005a3c:	6028      	str	r0, [r5, #0]
 8005a3e:	0635      	lsls	r5, r6, #24
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	d501      	bpl.n	8005a48 <_printf_i+0x1cc>
 8005a44:	6019      	str	r1, [r3, #0]
 8005a46:	e002      	b.n	8005a4e <_printf_i+0x1d2>
 8005a48:	0670      	lsls	r0, r6, #25
 8005a4a:	d5fb      	bpl.n	8005a44 <_printf_i+0x1c8>
 8005a4c:	8019      	strh	r1, [r3, #0]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	4615      	mov	r5, r2
 8005a54:	e7ba      	b.n	80059cc <_printf_i+0x150>
 8005a56:	682b      	ldr	r3, [r5, #0]
 8005a58:	1d1a      	adds	r2, r3, #4
 8005a5a:	602a      	str	r2, [r5, #0]
 8005a5c:	681d      	ldr	r5, [r3, #0]
 8005a5e:	6862      	ldr	r2, [r4, #4]
 8005a60:	2100      	movs	r1, #0
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7fa fbbc 	bl	80001e0 <memchr>
 8005a68:	b108      	cbz	r0, 8005a6e <_printf_i+0x1f2>
 8005a6a:	1b40      	subs	r0, r0, r5
 8005a6c:	6060      	str	r0, [r4, #4]
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	2300      	movs	r3, #0
 8005a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a78:	e7a8      	b.n	80059cc <_printf_i+0x150>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	4649      	mov	r1, r9
 8005a80:	4640      	mov	r0, r8
 8005a82:	47d0      	blx	sl
 8005a84:	3001      	adds	r0, #1
 8005a86:	d0ab      	beq.n	80059e0 <_printf_i+0x164>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	079b      	lsls	r3, r3, #30
 8005a8c:	d413      	bmi.n	8005ab6 <_printf_i+0x23a>
 8005a8e:	68e0      	ldr	r0, [r4, #12]
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	4298      	cmp	r0, r3
 8005a94:	bfb8      	it	lt
 8005a96:	4618      	movlt	r0, r3
 8005a98:	e7a4      	b.n	80059e4 <_printf_i+0x168>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4632      	mov	r2, r6
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	47d0      	blx	sl
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d09b      	beq.n	80059e0 <_printf_i+0x164>
 8005aa8:	3501      	adds	r5, #1
 8005aaa:	68e3      	ldr	r3, [r4, #12]
 8005aac:	9903      	ldr	r1, [sp, #12]
 8005aae:	1a5b      	subs	r3, r3, r1
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dcf2      	bgt.n	8005a9a <_printf_i+0x21e>
 8005ab4:	e7eb      	b.n	8005a8e <_printf_i+0x212>
 8005ab6:	2500      	movs	r5, #0
 8005ab8:	f104 0619 	add.w	r6, r4, #25
 8005abc:	e7f5      	b.n	8005aaa <_printf_i+0x22e>
 8005abe:	bf00      	nop
 8005ac0:	08006199 	.word	0x08006199
 8005ac4:	080061aa 	.word	0x080061aa

08005ac8 <_sbrk_r>:
 8005ac8:	b538      	push	{r3, r4, r5, lr}
 8005aca:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_sbrk_r+0x1c>)
 8005acc:	2300      	movs	r3, #0
 8005ace:	4604      	mov	r4, r0
 8005ad0:	4608      	mov	r0, r1
 8005ad2:	602b      	str	r3, [r5, #0]
 8005ad4:	f7fb fa4a 	bl	8000f6c <_sbrk>
 8005ad8:	1c43      	adds	r3, r0, #1
 8005ada:	d102      	bne.n	8005ae2 <_sbrk_r+0x1a>
 8005adc:	682b      	ldr	r3, [r5, #0]
 8005ade:	b103      	cbz	r3, 8005ae2 <_sbrk_r+0x1a>
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	bd38      	pop	{r3, r4, r5, pc}
 8005ae4:	2000029c 	.word	0x2000029c

08005ae8 <__sread>:
 8005ae8:	b510      	push	{r4, lr}
 8005aea:	460c      	mov	r4, r1
 8005aec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005af0:	f000 fab2 	bl	8006058 <_read_r>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	bfab      	itete	ge
 8005af8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005afa:	89a3      	ldrhlt	r3, [r4, #12]
 8005afc:	181b      	addge	r3, r3, r0
 8005afe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b02:	bfac      	ite	ge
 8005b04:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b06:	81a3      	strhlt	r3, [r4, #12]
 8005b08:	bd10      	pop	{r4, pc}

08005b0a <__swrite>:
 8005b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0e:	461f      	mov	r7, r3
 8005b10:	898b      	ldrh	r3, [r1, #12]
 8005b12:	05db      	lsls	r3, r3, #23
 8005b14:	4605      	mov	r5, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	4616      	mov	r6, r2
 8005b1a:	d505      	bpl.n	8005b28 <__swrite+0x1e>
 8005b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b20:	2302      	movs	r3, #2
 8005b22:	2200      	movs	r2, #0
 8005b24:	f000 f9c8 	bl	8005eb8 <_lseek_r>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b32:	81a3      	strh	r3, [r4, #12]
 8005b34:	4632      	mov	r2, r6
 8005b36:	463b      	mov	r3, r7
 8005b38:	4628      	mov	r0, r5
 8005b3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3e:	f000 b869 	b.w	8005c14 <_write_r>

08005b42 <__sseek>:
 8005b42:	b510      	push	{r4, lr}
 8005b44:	460c      	mov	r4, r1
 8005b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b4a:	f000 f9b5 	bl	8005eb8 <_lseek_r>
 8005b4e:	1c43      	adds	r3, r0, #1
 8005b50:	89a3      	ldrh	r3, [r4, #12]
 8005b52:	bf15      	itete	ne
 8005b54:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b5e:	81a3      	strheq	r3, [r4, #12]
 8005b60:	bf18      	it	ne
 8005b62:	81a3      	strhne	r3, [r4, #12]
 8005b64:	bd10      	pop	{r4, pc}

08005b66 <__sclose>:
 8005b66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b6a:	f000 b8d3 	b.w	8005d14 <_close_r>
	...

08005b70 <__swbuf_r>:
 8005b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b72:	460e      	mov	r6, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	4605      	mov	r5, r0
 8005b78:	b118      	cbz	r0, 8005b82 <__swbuf_r+0x12>
 8005b7a:	6983      	ldr	r3, [r0, #24]
 8005b7c:	b90b      	cbnz	r3, 8005b82 <__swbuf_r+0x12>
 8005b7e:	f7ff fb81 	bl	8005284 <__sinit>
 8005b82:	4b21      	ldr	r3, [pc, #132]	; (8005c08 <__swbuf_r+0x98>)
 8005b84:	429c      	cmp	r4, r3
 8005b86:	d12b      	bne.n	8005be0 <__swbuf_r+0x70>
 8005b88:	686c      	ldr	r4, [r5, #4]
 8005b8a:	69a3      	ldr	r3, [r4, #24]
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	89a3      	ldrh	r3, [r4, #12]
 8005b90:	071a      	lsls	r2, r3, #28
 8005b92:	d52f      	bpl.n	8005bf4 <__swbuf_r+0x84>
 8005b94:	6923      	ldr	r3, [r4, #16]
 8005b96:	b36b      	cbz	r3, 8005bf4 <__swbuf_r+0x84>
 8005b98:	6923      	ldr	r3, [r4, #16]
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	1ac0      	subs	r0, r0, r3
 8005b9e:	6963      	ldr	r3, [r4, #20]
 8005ba0:	b2f6      	uxtb	r6, r6
 8005ba2:	4283      	cmp	r3, r0
 8005ba4:	4637      	mov	r7, r6
 8005ba6:	dc04      	bgt.n	8005bb2 <__swbuf_r+0x42>
 8005ba8:	4621      	mov	r1, r4
 8005baa:	4628      	mov	r0, r5
 8005bac:	f000 f948 	bl	8005e40 <_fflush_r>
 8005bb0:	bb30      	cbnz	r0, 8005c00 <__swbuf_r+0x90>
 8005bb2:	68a3      	ldr	r3, [r4, #8]
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	60a3      	str	r3, [r4, #8]
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	6022      	str	r2, [r4, #0]
 8005bbe:	701e      	strb	r6, [r3, #0]
 8005bc0:	6963      	ldr	r3, [r4, #20]
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	4283      	cmp	r3, r0
 8005bc6:	d004      	beq.n	8005bd2 <__swbuf_r+0x62>
 8005bc8:	89a3      	ldrh	r3, [r4, #12]
 8005bca:	07db      	lsls	r3, r3, #31
 8005bcc:	d506      	bpl.n	8005bdc <__swbuf_r+0x6c>
 8005bce:	2e0a      	cmp	r6, #10
 8005bd0:	d104      	bne.n	8005bdc <__swbuf_r+0x6c>
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	f000 f933 	bl	8005e40 <_fflush_r>
 8005bda:	b988      	cbnz	r0, 8005c00 <__swbuf_r+0x90>
 8005bdc:	4638      	mov	r0, r7
 8005bde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <__swbuf_r+0x9c>)
 8005be2:	429c      	cmp	r4, r3
 8005be4:	d101      	bne.n	8005bea <__swbuf_r+0x7a>
 8005be6:	68ac      	ldr	r4, [r5, #8]
 8005be8:	e7cf      	b.n	8005b8a <__swbuf_r+0x1a>
 8005bea:	4b09      	ldr	r3, [pc, #36]	; (8005c10 <__swbuf_r+0xa0>)
 8005bec:	429c      	cmp	r4, r3
 8005bee:	bf08      	it	eq
 8005bf0:	68ec      	ldreq	r4, [r5, #12]
 8005bf2:	e7ca      	b.n	8005b8a <__swbuf_r+0x1a>
 8005bf4:	4621      	mov	r1, r4
 8005bf6:	4628      	mov	r0, r5
 8005bf8:	f000 f81e 	bl	8005c38 <__swsetup_r>
 8005bfc:	2800      	cmp	r0, #0
 8005bfe:	d0cb      	beq.n	8005b98 <__swbuf_r+0x28>
 8005c00:	f04f 37ff 	mov.w	r7, #4294967295
 8005c04:	e7ea      	b.n	8005bdc <__swbuf_r+0x6c>
 8005c06:	bf00      	nop
 8005c08:	08006148 	.word	0x08006148
 8005c0c:	08006168 	.word	0x08006168
 8005c10:	08006128 	.word	0x08006128

08005c14 <_write_r>:
 8005c14:	b538      	push	{r3, r4, r5, lr}
 8005c16:	4d07      	ldr	r5, [pc, #28]	; (8005c34 <_write_r+0x20>)
 8005c18:	4604      	mov	r4, r0
 8005c1a:	4608      	mov	r0, r1
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	2200      	movs	r2, #0
 8005c20:	602a      	str	r2, [r5, #0]
 8005c22:	461a      	mov	r2, r3
 8005c24:	f7fb f951 	bl	8000eca <_write>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	d102      	bne.n	8005c32 <_write_r+0x1e>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b103      	cbz	r3, 8005c32 <_write_r+0x1e>
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	bd38      	pop	{r3, r4, r5, pc}
 8005c34:	2000029c 	.word	0x2000029c

08005c38 <__swsetup_r>:
 8005c38:	4b32      	ldr	r3, [pc, #200]	; (8005d04 <__swsetup_r+0xcc>)
 8005c3a:	b570      	push	{r4, r5, r6, lr}
 8005c3c:	681d      	ldr	r5, [r3, #0]
 8005c3e:	4606      	mov	r6, r0
 8005c40:	460c      	mov	r4, r1
 8005c42:	b125      	cbz	r5, 8005c4e <__swsetup_r+0x16>
 8005c44:	69ab      	ldr	r3, [r5, #24]
 8005c46:	b913      	cbnz	r3, 8005c4e <__swsetup_r+0x16>
 8005c48:	4628      	mov	r0, r5
 8005c4a:	f7ff fb1b 	bl	8005284 <__sinit>
 8005c4e:	4b2e      	ldr	r3, [pc, #184]	; (8005d08 <__swsetup_r+0xd0>)
 8005c50:	429c      	cmp	r4, r3
 8005c52:	d10f      	bne.n	8005c74 <__swsetup_r+0x3c>
 8005c54:	686c      	ldr	r4, [r5, #4]
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c5c:	0719      	lsls	r1, r3, #28
 8005c5e:	d42c      	bmi.n	8005cba <__swsetup_r+0x82>
 8005c60:	06dd      	lsls	r5, r3, #27
 8005c62:	d411      	bmi.n	8005c88 <__swsetup_r+0x50>
 8005c64:	2309      	movs	r3, #9
 8005c66:	6033      	str	r3, [r6, #0]
 8005c68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c6c:	81a3      	strh	r3, [r4, #12]
 8005c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c72:	e03e      	b.n	8005cf2 <__swsetup_r+0xba>
 8005c74:	4b25      	ldr	r3, [pc, #148]	; (8005d0c <__swsetup_r+0xd4>)
 8005c76:	429c      	cmp	r4, r3
 8005c78:	d101      	bne.n	8005c7e <__swsetup_r+0x46>
 8005c7a:	68ac      	ldr	r4, [r5, #8]
 8005c7c:	e7eb      	b.n	8005c56 <__swsetup_r+0x1e>
 8005c7e:	4b24      	ldr	r3, [pc, #144]	; (8005d10 <__swsetup_r+0xd8>)
 8005c80:	429c      	cmp	r4, r3
 8005c82:	bf08      	it	eq
 8005c84:	68ec      	ldreq	r4, [r5, #12]
 8005c86:	e7e6      	b.n	8005c56 <__swsetup_r+0x1e>
 8005c88:	0758      	lsls	r0, r3, #29
 8005c8a:	d512      	bpl.n	8005cb2 <__swsetup_r+0x7a>
 8005c8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c8e:	b141      	cbz	r1, 8005ca2 <__swsetup_r+0x6a>
 8005c90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c94:	4299      	cmp	r1, r3
 8005c96:	d002      	beq.n	8005c9e <__swsetup_r+0x66>
 8005c98:	4630      	mov	r0, r6
 8005c9a:	f000 f991 	bl	8005fc0 <_free_r>
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6363      	str	r3, [r4, #52]	; 0x34
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ca8:	81a3      	strh	r3, [r4, #12]
 8005caa:	2300      	movs	r3, #0
 8005cac:	6063      	str	r3, [r4, #4]
 8005cae:	6923      	ldr	r3, [r4, #16]
 8005cb0:	6023      	str	r3, [r4, #0]
 8005cb2:	89a3      	ldrh	r3, [r4, #12]
 8005cb4:	f043 0308 	orr.w	r3, r3, #8
 8005cb8:	81a3      	strh	r3, [r4, #12]
 8005cba:	6923      	ldr	r3, [r4, #16]
 8005cbc:	b94b      	cbnz	r3, 8005cd2 <__swsetup_r+0x9a>
 8005cbe:	89a3      	ldrh	r3, [r4, #12]
 8005cc0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cc8:	d003      	beq.n	8005cd2 <__swsetup_r+0x9a>
 8005cca:	4621      	mov	r1, r4
 8005ccc:	4630      	mov	r0, r6
 8005cce:	f000 f92b 	bl	8005f28 <__smakebuf_r>
 8005cd2:	89a0      	ldrh	r0, [r4, #12]
 8005cd4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cd8:	f010 0301 	ands.w	r3, r0, #1
 8005cdc:	d00a      	beq.n	8005cf4 <__swsetup_r+0xbc>
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60a3      	str	r3, [r4, #8]
 8005ce2:	6963      	ldr	r3, [r4, #20]
 8005ce4:	425b      	negs	r3, r3
 8005ce6:	61a3      	str	r3, [r4, #24]
 8005ce8:	6923      	ldr	r3, [r4, #16]
 8005cea:	b943      	cbnz	r3, 8005cfe <__swsetup_r+0xc6>
 8005cec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cf0:	d1ba      	bne.n	8005c68 <__swsetup_r+0x30>
 8005cf2:	bd70      	pop	{r4, r5, r6, pc}
 8005cf4:	0781      	lsls	r1, r0, #30
 8005cf6:	bf58      	it	pl
 8005cf8:	6963      	ldrpl	r3, [r4, #20]
 8005cfa:	60a3      	str	r3, [r4, #8]
 8005cfc:	e7f4      	b.n	8005ce8 <__swsetup_r+0xb0>
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e7f7      	b.n	8005cf2 <__swsetup_r+0xba>
 8005d02:	bf00      	nop
 8005d04:	2000000c 	.word	0x2000000c
 8005d08:	08006148 	.word	0x08006148
 8005d0c:	08006168 	.word	0x08006168
 8005d10:	08006128 	.word	0x08006128

08005d14 <_close_r>:
 8005d14:	b538      	push	{r3, r4, r5, lr}
 8005d16:	4d06      	ldr	r5, [pc, #24]	; (8005d30 <_close_r+0x1c>)
 8005d18:	2300      	movs	r3, #0
 8005d1a:	4604      	mov	r4, r0
 8005d1c:	4608      	mov	r0, r1
 8005d1e:	602b      	str	r3, [r5, #0]
 8005d20:	f7fb f8ef 	bl	8000f02 <_close>
 8005d24:	1c43      	adds	r3, r0, #1
 8005d26:	d102      	bne.n	8005d2e <_close_r+0x1a>
 8005d28:	682b      	ldr	r3, [r5, #0]
 8005d2a:	b103      	cbz	r3, 8005d2e <_close_r+0x1a>
 8005d2c:	6023      	str	r3, [r4, #0]
 8005d2e:	bd38      	pop	{r3, r4, r5, pc}
 8005d30:	2000029c 	.word	0x2000029c

08005d34 <__sflush_r>:
 8005d34:	898a      	ldrh	r2, [r1, #12]
 8005d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d3a:	4605      	mov	r5, r0
 8005d3c:	0710      	lsls	r0, r2, #28
 8005d3e:	460c      	mov	r4, r1
 8005d40:	d458      	bmi.n	8005df4 <__sflush_r+0xc0>
 8005d42:	684b      	ldr	r3, [r1, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	dc05      	bgt.n	8005d54 <__sflush_r+0x20>
 8005d48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	dc02      	bgt.n	8005d54 <__sflush_r+0x20>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d56:	2e00      	cmp	r6, #0
 8005d58:	d0f9      	beq.n	8005d4e <__sflush_r+0x1a>
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d60:	682f      	ldr	r7, [r5, #0]
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	d032      	beq.n	8005dcc <__sflush_r+0x98>
 8005d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	075a      	lsls	r2, r3, #29
 8005d6c:	d505      	bpl.n	8005d7a <__sflush_r+0x46>
 8005d6e:	6863      	ldr	r3, [r4, #4]
 8005d70:	1ac0      	subs	r0, r0, r3
 8005d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d74:	b10b      	cbz	r3, 8005d7a <__sflush_r+0x46>
 8005d76:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d78:	1ac0      	subs	r0, r0, r3
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d80:	6a21      	ldr	r1, [r4, #32]
 8005d82:	4628      	mov	r0, r5
 8005d84:	47b0      	blx	r6
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	89a3      	ldrh	r3, [r4, #12]
 8005d8a:	d106      	bne.n	8005d9a <__sflush_r+0x66>
 8005d8c:	6829      	ldr	r1, [r5, #0]
 8005d8e:	291d      	cmp	r1, #29
 8005d90:	d82c      	bhi.n	8005dec <__sflush_r+0xb8>
 8005d92:	4a2a      	ldr	r2, [pc, #168]	; (8005e3c <__sflush_r+0x108>)
 8005d94:	40ca      	lsrs	r2, r1
 8005d96:	07d6      	lsls	r6, r2, #31
 8005d98:	d528      	bpl.n	8005dec <__sflush_r+0xb8>
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	6062      	str	r2, [r4, #4]
 8005d9e:	04d9      	lsls	r1, r3, #19
 8005da0:	6922      	ldr	r2, [r4, #16]
 8005da2:	6022      	str	r2, [r4, #0]
 8005da4:	d504      	bpl.n	8005db0 <__sflush_r+0x7c>
 8005da6:	1c42      	adds	r2, r0, #1
 8005da8:	d101      	bne.n	8005dae <__sflush_r+0x7a>
 8005daa:	682b      	ldr	r3, [r5, #0]
 8005dac:	b903      	cbnz	r3, 8005db0 <__sflush_r+0x7c>
 8005dae:	6560      	str	r0, [r4, #84]	; 0x54
 8005db0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005db2:	602f      	str	r7, [r5, #0]
 8005db4:	2900      	cmp	r1, #0
 8005db6:	d0ca      	beq.n	8005d4e <__sflush_r+0x1a>
 8005db8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005dbc:	4299      	cmp	r1, r3
 8005dbe:	d002      	beq.n	8005dc6 <__sflush_r+0x92>
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f000 f8fd 	bl	8005fc0 <_free_r>
 8005dc6:	2000      	movs	r0, #0
 8005dc8:	6360      	str	r0, [r4, #52]	; 0x34
 8005dca:	e7c1      	b.n	8005d50 <__sflush_r+0x1c>
 8005dcc:	6a21      	ldr	r1, [r4, #32]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b0      	blx	r6
 8005dd4:	1c41      	adds	r1, r0, #1
 8005dd6:	d1c7      	bne.n	8005d68 <__sflush_r+0x34>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0c4      	beq.n	8005d68 <__sflush_r+0x34>
 8005dde:	2b1d      	cmp	r3, #29
 8005de0:	d001      	beq.n	8005de6 <__sflush_r+0xb2>
 8005de2:	2b16      	cmp	r3, #22
 8005de4:	d101      	bne.n	8005dea <__sflush_r+0xb6>
 8005de6:	602f      	str	r7, [r5, #0]
 8005de8:	e7b1      	b.n	8005d4e <__sflush_r+0x1a>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005df0:	81a3      	strh	r3, [r4, #12]
 8005df2:	e7ad      	b.n	8005d50 <__sflush_r+0x1c>
 8005df4:	690f      	ldr	r7, [r1, #16]
 8005df6:	2f00      	cmp	r7, #0
 8005df8:	d0a9      	beq.n	8005d4e <__sflush_r+0x1a>
 8005dfa:	0793      	lsls	r3, r2, #30
 8005dfc:	680e      	ldr	r6, [r1, #0]
 8005dfe:	bf08      	it	eq
 8005e00:	694b      	ldreq	r3, [r1, #20]
 8005e02:	600f      	str	r7, [r1, #0]
 8005e04:	bf18      	it	ne
 8005e06:	2300      	movne	r3, #0
 8005e08:	eba6 0807 	sub.w	r8, r6, r7
 8005e0c:	608b      	str	r3, [r1, #8]
 8005e0e:	f1b8 0f00 	cmp.w	r8, #0
 8005e12:	dd9c      	ble.n	8005d4e <__sflush_r+0x1a>
 8005e14:	6a21      	ldr	r1, [r4, #32]
 8005e16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e18:	4643      	mov	r3, r8
 8005e1a:	463a      	mov	r2, r7
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b0      	blx	r6
 8005e20:	2800      	cmp	r0, #0
 8005e22:	dc06      	bgt.n	8005e32 <__sflush_r+0xfe>
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	e78e      	b.n	8005d50 <__sflush_r+0x1c>
 8005e32:	4407      	add	r7, r0
 8005e34:	eba8 0800 	sub.w	r8, r8, r0
 8005e38:	e7e9      	b.n	8005e0e <__sflush_r+0xda>
 8005e3a:	bf00      	nop
 8005e3c:	20400001 	.word	0x20400001

08005e40 <_fflush_r>:
 8005e40:	b538      	push	{r3, r4, r5, lr}
 8005e42:	690b      	ldr	r3, [r1, #16]
 8005e44:	4605      	mov	r5, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	b913      	cbnz	r3, 8005e50 <_fflush_r+0x10>
 8005e4a:	2500      	movs	r5, #0
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	bd38      	pop	{r3, r4, r5, pc}
 8005e50:	b118      	cbz	r0, 8005e5a <_fflush_r+0x1a>
 8005e52:	6983      	ldr	r3, [r0, #24]
 8005e54:	b90b      	cbnz	r3, 8005e5a <_fflush_r+0x1a>
 8005e56:	f7ff fa15 	bl	8005284 <__sinit>
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <_fflush_r+0x6c>)
 8005e5c:	429c      	cmp	r4, r3
 8005e5e:	d11b      	bne.n	8005e98 <_fflush_r+0x58>
 8005e60:	686c      	ldr	r4, [r5, #4]
 8005e62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0ef      	beq.n	8005e4a <_fflush_r+0xa>
 8005e6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e6c:	07d0      	lsls	r0, r2, #31
 8005e6e:	d404      	bmi.n	8005e7a <_fflush_r+0x3a>
 8005e70:	0599      	lsls	r1, r3, #22
 8005e72:	d402      	bmi.n	8005e7a <_fflush_r+0x3a>
 8005e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e76:	f7ff faa3 	bl	80053c0 <__retarget_lock_acquire_recursive>
 8005e7a:	4628      	mov	r0, r5
 8005e7c:	4621      	mov	r1, r4
 8005e7e:	f7ff ff59 	bl	8005d34 <__sflush_r>
 8005e82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e84:	07da      	lsls	r2, r3, #31
 8005e86:	4605      	mov	r5, r0
 8005e88:	d4e0      	bmi.n	8005e4c <_fflush_r+0xc>
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	059b      	lsls	r3, r3, #22
 8005e8e:	d4dd      	bmi.n	8005e4c <_fflush_r+0xc>
 8005e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e92:	f7ff fa96 	bl	80053c2 <__retarget_lock_release_recursive>
 8005e96:	e7d9      	b.n	8005e4c <_fflush_r+0xc>
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <_fflush_r+0x70>)
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	d101      	bne.n	8005ea2 <_fflush_r+0x62>
 8005e9e:	68ac      	ldr	r4, [r5, #8]
 8005ea0:	e7df      	b.n	8005e62 <_fflush_r+0x22>
 8005ea2:	4b04      	ldr	r3, [pc, #16]	; (8005eb4 <_fflush_r+0x74>)
 8005ea4:	429c      	cmp	r4, r3
 8005ea6:	bf08      	it	eq
 8005ea8:	68ec      	ldreq	r4, [r5, #12]
 8005eaa:	e7da      	b.n	8005e62 <_fflush_r+0x22>
 8005eac:	08006148 	.word	0x08006148
 8005eb0:	08006168 	.word	0x08006168
 8005eb4:	08006128 	.word	0x08006128

08005eb8 <_lseek_r>:
 8005eb8:	b538      	push	{r3, r4, r5, lr}
 8005eba:	4d07      	ldr	r5, [pc, #28]	; (8005ed8 <_lseek_r+0x20>)
 8005ebc:	4604      	mov	r4, r0
 8005ebe:	4608      	mov	r0, r1
 8005ec0:	4611      	mov	r1, r2
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	602a      	str	r2, [r5, #0]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f7fb f842 	bl	8000f50 <_lseek>
 8005ecc:	1c43      	adds	r3, r0, #1
 8005ece:	d102      	bne.n	8005ed6 <_lseek_r+0x1e>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	b103      	cbz	r3, 8005ed6 <_lseek_r+0x1e>
 8005ed4:	6023      	str	r3, [r4, #0]
 8005ed6:	bd38      	pop	{r3, r4, r5, pc}
 8005ed8:	2000029c 	.word	0x2000029c

08005edc <__swhatbuf_r>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	460e      	mov	r6, r1
 8005ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	b096      	sub	sp, #88	; 0x58
 8005ee8:	4614      	mov	r4, r2
 8005eea:	461d      	mov	r5, r3
 8005eec:	da08      	bge.n	8005f00 <__swhatbuf_r+0x24>
 8005eee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	602a      	str	r2, [r5, #0]
 8005ef6:	061a      	lsls	r2, r3, #24
 8005ef8:	d410      	bmi.n	8005f1c <__swhatbuf_r+0x40>
 8005efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005efe:	e00e      	b.n	8005f1e <__swhatbuf_r+0x42>
 8005f00:	466a      	mov	r2, sp
 8005f02:	f000 f8bb 	bl	800607c <_fstat_r>
 8005f06:	2800      	cmp	r0, #0
 8005f08:	dbf1      	blt.n	8005eee <__swhatbuf_r+0x12>
 8005f0a:	9a01      	ldr	r2, [sp, #4]
 8005f0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f14:	425a      	negs	r2, r3
 8005f16:	415a      	adcs	r2, r3
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	e7ee      	b.n	8005efa <__swhatbuf_r+0x1e>
 8005f1c:	2340      	movs	r3, #64	; 0x40
 8005f1e:	2000      	movs	r0, #0
 8005f20:	6023      	str	r3, [r4, #0]
 8005f22:	b016      	add	sp, #88	; 0x58
 8005f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f28 <__smakebuf_r>:
 8005f28:	898b      	ldrh	r3, [r1, #12]
 8005f2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f2c:	079d      	lsls	r5, r3, #30
 8005f2e:	4606      	mov	r6, r0
 8005f30:	460c      	mov	r4, r1
 8005f32:	d507      	bpl.n	8005f44 <__smakebuf_r+0x1c>
 8005f34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	6123      	str	r3, [r4, #16]
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	6163      	str	r3, [r4, #20]
 8005f40:	b002      	add	sp, #8
 8005f42:	bd70      	pop	{r4, r5, r6, pc}
 8005f44:	ab01      	add	r3, sp, #4
 8005f46:	466a      	mov	r2, sp
 8005f48:	f7ff ffc8 	bl	8005edc <__swhatbuf_r>
 8005f4c:	9900      	ldr	r1, [sp, #0]
 8005f4e:	4605      	mov	r5, r0
 8005f50:	4630      	mov	r0, r6
 8005f52:	f7ff fa57 	bl	8005404 <_malloc_r>
 8005f56:	b948      	cbnz	r0, 8005f6c <__smakebuf_r+0x44>
 8005f58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f5c:	059a      	lsls	r2, r3, #22
 8005f5e:	d4ef      	bmi.n	8005f40 <__smakebuf_r+0x18>
 8005f60:	f023 0303 	bic.w	r3, r3, #3
 8005f64:	f043 0302 	orr.w	r3, r3, #2
 8005f68:	81a3      	strh	r3, [r4, #12]
 8005f6a:	e7e3      	b.n	8005f34 <__smakebuf_r+0xc>
 8005f6c:	4b0d      	ldr	r3, [pc, #52]	; (8005fa4 <__smakebuf_r+0x7c>)
 8005f6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f70:	89a3      	ldrh	r3, [r4, #12]
 8005f72:	6020      	str	r0, [r4, #0]
 8005f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f78:	81a3      	strh	r3, [r4, #12]
 8005f7a:	9b00      	ldr	r3, [sp, #0]
 8005f7c:	6163      	str	r3, [r4, #20]
 8005f7e:	9b01      	ldr	r3, [sp, #4]
 8005f80:	6120      	str	r0, [r4, #16]
 8005f82:	b15b      	cbz	r3, 8005f9c <__smakebuf_r+0x74>
 8005f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f88:	4630      	mov	r0, r6
 8005f8a:	f000 f889 	bl	80060a0 <_isatty_r>
 8005f8e:	b128      	cbz	r0, 8005f9c <__smakebuf_r+0x74>
 8005f90:	89a3      	ldrh	r3, [r4, #12]
 8005f92:	f023 0303 	bic.w	r3, r3, #3
 8005f96:	f043 0301 	orr.w	r3, r3, #1
 8005f9a:	81a3      	strh	r3, [r4, #12]
 8005f9c:	89a0      	ldrh	r0, [r4, #12]
 8005f9e:	4305      	orrs	r5, r0
 8005fa0:	81a5      	strh	r5, [r4, #12]
 8005fa2:	e7cd      	b.n	8005f40 <__smakebuf_r+0x18>
 8005fa4:	0800521d 	.word	0x0800521d

08005fa8 <__malloc_lock>:
 8005fa8:	4801      	ldr	r0, [pc, #4]	; (8005fb0 <__malloc_lock+0x8>)
 8005faa:	f7ff ba09 	b.w	80053c0 <__retarget_lock_acquire_recursive>
 8005fae:	bf00      	nop
 8005fb0:	20000290 	.word	0x20000290

08005fb4 <__malloc_unlock>:
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <__malloc_unlock+0x8>)
 8005fb6:	f7ff ba04 	b.w	80053c2 <__retarget_lock_release_recursive>
 8005fba:	bf00      	nop
 8005fbc:	20000290 	.word	0x20000290

08005fc0 <_free_r>:
 8005fc0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005fc2:	2900      	cmp	r1, #0
 8005fc4:	d044      	beq.n	8006050 <_free_r+0x90>
 8005fc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005fca:	9001      	str	r0, [sp, #4]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f1a1 0404 	sub.w	r4, r1, #4
 8005fd2:	bfb8      	it	lt
 8005fd4:	18e4      	addlt	r4, r4, r3
 8005fd6:	f7ff ffe7 	bl	8005fa8 <__malloc_lock>
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <_free_r+0x94>)
 8005fdc:	9801      	ldr	r0, [sp, #4]
 8005fde:	6813      	ldr	r3, [r2, #0]
 8005fe0:	b933      	cbnz	r3, 8005ff0 <_free_r+0x30>
 8005fe2:	6063      	str	r3, [r4, #4]
 8005fe4:	6014      	str	r4, [r2, #0]
 8005fe6:	b003      	add	sp, #12
 8005fe8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005fec:	f7ff bfe2 	b.w	8005fb4 <__malloc_unlock>
 8005ff0:	42a3      	cmp	r3, r4
 8005ff2:	d908      	bls.n	8006006 <_free_r+0x46>
 8005ff4:	6825      	ldr	r5, [r4, #0]
 8005ff6:	1961      	adds	r1, r4, r5
 8005ff8:	428b      	cmp	r3, r1
 8005ffa:	bf01      	itttt	eq
 8005ffc:	6819      	ldreq	r1, [r3, #0]
 8005ffe:	685b      	ldreq	r3, [r3, #4]
 8006000:	1949      	addeq	r1, r1, r5
 8006002:	6021      	streq	r1, [r4, #0]
 8006004:	e7ed      	b.n	8005fe2 <_free_r+0x22>
 8006006:	461a      	mov	r2, r3
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b10b      	cbz	r3, 8006010 <_free_r+0x50>
 800600c:	42a3      	cmp	r3, r4
 800600e:	d9fa      	bls.n	8006006 <_free_r+0x46>
 8006010:	6811      	ldr	r1, [r2, #0]
 8006012:	1855      	adds	r5, r2, r1
 8006014:	42a5      	cmp	r5, r4
 8006016:	d10b      	bne.n	8006030 <_free_r+0x70>
 8006018:	6824      	ldr	r4, [r4, #0]
 800601a:	4421      	add	r1, r4
 800601c:	1854      	adds	r4, r2, r1
 800601e:	42a3      	cmp	r3, r4
 8006020:	6011      	str	r1, [r2, #0]
 8006022:	d1e0      	bne.n	8005fe6 <_free_r+0x26>
 8006024:	681c      	ldr	r4, [r3, #0]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6053      	str	r3, [r2, #4]
 800602a:	4421      	add	r1, r4
 800602c:	6011      	str	r1, [r2, #0]
 800602e:	e7da      	b.n	8005fe6 <_free_r+0x26>
 8006030:	d902      	bls.n	8006038 <_free_r+0x78>
 8006032:	230c      	movs	r3, #12
 8006034:	6003      	str	r3, [r0, #0]
 8006036:	e7d6      	b.n	8005fe6 <_free_r+0x26>
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1961      	adds	r1, r4, r5
 800603c:	428b      	cmp	r3, r1
 800603e:	bf04      	itt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	6063      	str	r3, [r4, #4]
 8006046:	bf04      	itt	eq
 8006048:	1949      	addeq	r1, r1, r5
 800604a:	6021      	streq	r1, [r4, #0]
 800604c:	6054      	str	r4, [r2, #4]
 800604e:	e7ca      	b.n	8005fe6 <_free_r+0x26>
 8006050:	b003      	add	sp, #12
 8006052:	bd30      	pop	{r4, r5, pc}
 8006054:	20000294 	.word	0x20000294

08006058 <_read_r>:
 8006058:	b538      	push	{r3, r4, r5, lr}
 800605a:	4d07      	ldr	r5, [pc, #28]	; (8006078 <_read_r+0x20>)
 800605c:	4604      	mov	r4, r0
 800605e:	4608      	mov	r0, r1
 8006060:	4611      	mov	r1, r2
 8006062:	2200      	movs	r2, #0
 8006064:	602a      	str	r2, [r5, #0]
 8006066:	461a      	mov	r2, r3
 8006068:	f7fa ff12 	bl	8000e90 <_read>
 800606c:	1c43      	adds	r3, r0, #1
 800606e:	d102      	bne.n	8006076 <_read_r+0x1e>
 8006070:	682b      	ldr	r3, [r5, #0]
 8006072:	b103      	cbz	r3, 8006076 <_read_r+0x1e>
 8006074:	6023      	str	r3, [r4, #0]
 8006076:	bd38      	pop	{r3, r4, r5, pc}
 8006078:	2000029c 	.word	0x2000029c

0800607c <_fstat_r>:
 800607c:	b538      	push	{r3, r4, r5, lr}
 800607e:	4d07      	ldr	r5, [pc, #28]	; (800609c <_fstat_r+0x20>)
 8006080:	2300      	movs	r3, #0
 8006082:	4604      	mov	r4, r0
 8006084:	4608      	mov	r0, r1
 8006086:	4611      	mov	r1, r2
 8006088:	602b      	str	r3, [r5, #0]
 800608a:	f7fa ff46 	bl	8000f1a <_fstat>
 800608e:	1c43      	adds	r3, r0, #1
 8006090:	d102      	bne.n	8006098 <_fstat_r+0x1c>
 8006092:	682b      	ldr	r3, [r5, #0]
 8006094:	b103      	cbz	r3, 8006098 <_fstat_r+0x1c>
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	bd38      	pop	{r3, r4, r5, pc}
 800609a:	bf00      	nop
 800609c:	2000029c 	.word	0x2000029c

080060a0 <_isatty_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	4d06      	ldr	r5, [pc, #24]	; (80060bc <_isatty_r+0x1c>)
 80060a4:	2300      	movs	r3, #0
 80060a6:	4604      	mov	r4, r0
 80060a8:	4608      	mov	r0, r1
 80060aa:	602b      	str	r3, [r5, #0]
 80060ac:	f7fa ff45 	bl	8000f3a <_isatty>
 80060b0:	1c43      	adds	r3, r0, #1
 80060b2:	d102      	bne.n	80060ba <_isatty_r+0x1a>
 80060b4:	682b      	ldr	r3, [r5, #0]
 80060b6:	b103      	cbz	r3, 80060ba <_isatty_r+0x1a>
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	bd38      	pop	{r3, r4, r5, pc}
 80060bc:	2000029c 	.word	0x2000029c

080060c0 <_init>:
 80060c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060c2:	bf00      	nop
 80060c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060c6:	bc08      	pop	{r3}
 80060c8:	469e      	mov	lr, r3
 80060ca:	4770      	bx	lr

080060cc <_fini>:
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	bf00      	nop
 80060d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060d2:	bc08      	pop	{r3}
 80060d4:	469e      	mov	lr, r3
 80060d6:	4770      	bx	lr
