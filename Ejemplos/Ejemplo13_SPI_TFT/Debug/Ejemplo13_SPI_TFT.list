
Ejemplo13_SPI_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b00  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  08003ca0  08003ca0  00013ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041d4  080041d4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080041d4  080041d4  000141d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041dc  080041dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041dc  080041dc  000141dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041e0  080041e0  000141e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080041e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000070  08004254  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000140  08004254  00020140  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a42c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001882  00000000  00000000  0002a4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002bd50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000828  00000000  00000000  0002c610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001608c  00000000  00000000  0002ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4ba  00000000  00000000  00042ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087523  00000000  00000000  0004d37e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d48a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028b8  00000000  00000000  000d48f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003c88 	.word	0x08003c88

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003c88 	.word	0x08003c88

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__gedf2>:
 80005f8:	f04f 3cff 	mov.w	ip, #4294967295
 80005fc:	e006      	b.n	800060c <__cmpdf2+0x4>
 80005fe:	bf00      	nop

08000600 <__ledf2>:
 8000600:	f04f 0c01 	mov.w	ip, #1
 8000604:	e002      	b.n	800060c <__cmpdf2+0x4>
 8000606:	bf00      	nop

08000608 <__cmpdf2>:
 8000608:	f04f 0c01 	mov.w	ip, #1
 800060c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000610:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800061c:	bf18      	it	ne
 800061e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000622:	d01b      	beq.n	800065c <__cmpdf2+0x54>
 8000624:	b001      	add	sp, #4
 8000626:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800062a:	bf0c      	ite	eq
 800062c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000630:	ea91 0f03 	teqne	r1, r3
 8000634:	bf02      	ittt	eq
 8000636:	ea90 0f02 	teqeq	r0, r2
 800063a:	2000      	moveq	r0, #0
 800063c:	4770      	bxeq	lr
 800063e:	f110 0f00 	cmn.w	r0, #0
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf58      	it	pl
 8000648:	4299      	cmppl	r1, r3
 800064a:	bf08      	it	eq
 800064c:	4290      	cmpeq	r0, r2
 800064e:	bf2c      	ite	cs
 8000650:	17d8      	asrcs	r0, r3, #31
 8000652:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000656:	f040 0001 	orr.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000660:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000664:	d102      	bne.n	800066c <__cmpdf2+0x64>
 8000666:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800066a:	d107      	bne.n	800067c <__cmpdf2+0x74>
 800066c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000670:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000674:	d1d6      	bne.n	8000624 <__cmpdf2+0x1c>
 8000676:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800067a:	d0d3      	beq.n	8000624 <__cmpdf2+0x1c>
 800067c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <__aeabi_cdrcmple>:
 8000684:	4684      	mov	ip, r0
 8000686:	4610      	mov	r0, r2
 8000688:	4662      	mov	r2, ip
 800068a:	468c      	mov	ip, r1
 800068c:	4619      	mov	r1, r3
 800068e:	4663      	mov	r3, ip
 8000690:	e000      	b.n	8000694 <__aeabi_cdcmpeq>
 8000692:	bf00      	nop

08000694 <__aeabi_cdcmpeq>:
 8000694:	b501      	push	{r0, lr}
 8000696:	f7ff ffb7 	bl	8000608 <__cmpdf2>
 800069a:	2800      	cmp	r0, #0
 800069c:	bf48      	it	mi
 800069e:	f110 0f00 	cmnmi.w	r0, #0
 80006a2:	bd01      	pop	{r0, pc}

080006a4 <__aeabi_dcmpeq>:
 80006a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006a8:	f7ff fff4 	bl	8000694 <__aeabi_cdcmpeq>
 80006ac:	bf0c      	ite	eq
 80006ae:	2001      	moveq	r0, #1
 80006b0:	2000      	movne	r0, #0
 80006b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006b6:	bf00      	nop

080006b8 <__aeabi_dcmplt>:
 80006b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006bc:	f7ff ffea 	bl	8000694 <__aeabi_cdcmpeq>
 80006c0:	bf34      	ite	cc
 80006c2:	2001      	movcc	r0, #1
 80006c4:	2000      	movcs	r0, #0
 80006c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ca:	bf00      	nop

080006cc <__aeabi_dcmple>:
 80006cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d0:	f7ff ffe0 	bl	8000694 <__aeabi_cdcmpeq>
 80006d4:	bf94      	ite	ls
 80006d6:	2001      	movls	r0, #1
 80006d8:	2000      	movhi	r0, #0
 80006da:	f85d fb08 	ldr.w	pc, [sp], #8
 80006de:	bf00      	nop

080006e0 <__aeabi_dcmpge>:
 80006e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e4:	f7ff ffce 	bl	8000684 <__aeabi_cdrcmple>
 80006e8:	bf94      	ite	ls
 80006ea:	2001      	movls	r0, #1
 80006ec:	2000      	movhi	r0, #0
 80006ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f2:	bf00      	nop

080006f4 <__aeabi_dcmpgt>:
 80006f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f8:	f7ff ffc4 	bl	8000684 <__aeabi_cdrcmple>
 80006fc:	bf34      	ite	cc
 80006fe:	2001      	movcc	r0, #1
 8000700:	2000      	movcs	r0, #0
 8000702:	f85d fb08 	ldr.w	pc, [sp], #8
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b974 	b.w	8000a08 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	4604      	mov	r4, r0
 8000740:	468e      	mov	lr, r1
 8000742:	2b00      	cmp	r3, #0
 8000744:	d14d      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000746:	428a      	cmp	r2, r1
 8000748:	4694      	mov	ip, r2
 800074a:	d969      	bls.n	8000820 <__udivmoddi4+0xe8>
 800074c:	fab2 f282 	clz	r2, r2
 8000750:	b152      	cbz	r2, 8000768 <__udivmoddi4+0x30>
 8000752:	fa01 f302 	lsl.w	r3, r1, r2
 8000756:	f1c2 0120 	rsb	r1, r2, #32
 800075a:	fa20 f101 	lsr.w	r1, r0, r1
 800075e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000762:	ea41 0e03 	orr.w	lr, r1, r3
 8000766:	4094      	lsls	r4, r2
 8000768:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800076c:	0c21      	lsrs	r1, r4, #16
 800076e:	fbbe f6f8 	udiv	r6, lr, r8
 8000772:	fa1f f78c 	uxth.w	r7, ip
 8000776:	fb08 e316 	mls	r3, r8, r6, lr
 800077a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800077e:	fb06 f107 	mul.w	r1, r6, r7
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f106 30ff 	add.w	r0, r6, #4294967295
 800078e:	f080 811f 	bcs.w	80009d0 <__udivmoddi4+0x298>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 811c 	bls.w	80009d0 <__udivmoddi4+0x298>
 8000798:	3e02      	subs	r6, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a5b      	subs	r3, r3, r1
 800079e:	b2a4      	uxth	r4, r4
 80007a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80007a4:	fb08 3310 	mls	r3, r8, r0, r3
 80007a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80007ac:	fb00 f707 	mul.w	r7, r0, r7
 80007b0:	42a7      	cmp	r7, r4
 80007b2:	d90a      	bls.n	80007ca <__udivmoddi4+0x92>
 80007b4:	eb1c 0404 	adds.w	r4, ip, r4
 80007b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80007bc:	f080 810a 	bcs.w	80009d4 <__udivmoddi4+0x29c>
 80007c0:	42a7      	cmp	r7, r4
 80007c2:	f240 8107 	bls.w	80009d4 <__udivmoddi4+0x29c>
 80007c6:	4464      	add	r4, ip
 80007c8:	3802      	subs	r0, #2
 80007ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80007ce:	1be4      	subs	r4, r4, r7
 80007d0:	2600      	movs	r6, #0
 80007d2:	b11d      	cbz	r5, 80007dc <__udivmoddi4+0xa4>
 80007d4:	40d4      	lsrs	r4, r2
 80007d6:	2300      	movs	r3, #0
 80007d8:	e9c5 4300 	strd	r4, r3, [r5]
 80007dc:	4631      	mov	r1, r6
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d909      	bls.n	80007fa <__udivmoddi4+0xc2>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	f000 80ef 	beq.w	80009ca <__udivmoddi4+0x292>
 80007ec:	2600      	movs	r6, #0
 80007ee:	e9c5 0100 	strd	r0, r1, [r5]
 80007f2:	4630      	mov	r0, r6
 80007f4:	4631      	mov	r1, r6
 80007f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fa:	fab3 f683 	clz	r6, r3
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d14a      	bne.n	8000898 <__udivmoddi4+0x160>
 8000802:	428b      	cmp	r3, r1
 8000804:	d302      	bcc.n	800080c <__udivmoddi4+0xd4>
 8000806:	4282      	cmp	r2, r0
 8000808:	f200 80f9 	bhi.w	80009fe <__udivmoddi4+0x2c6>
 800080c:	1a84      	subs	r4, r0, r2
 800080e:	eb61 0303 	sbc.w	r3, r1, r3
 8000812:	2001      	movs	r0, #1
 8000814:	469e      	mov	lr, r3
 8000816:	2d00      	cmp	r5, #0
 8000818:	d0e0      	beq.n	80007dc <__udivmoddi4+0xa4>
 800081a:	e9c5 4e00 	strd	r4, lr, [r5]
 800081e:	e7dd      	b.n	80007dc <__udivmoddi4+0xa4>
 8000820:	b902      	cbnz	r2, 8000824 <__udivmoddi4+0xec>
 8000822:	deff      	udf	#255	; 0xff
 8000824:	fab2 f282 	clz	r2, r2
 8000828:	2a00      	cmp	r2, #0
 800082a:	f040 8092 	bne.w	8000952 <__udivmoddi4+0x21a>
 800082e:	eba1 010c 	sub.w	r1, r1, ip
 8000832:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000836:	fa1f fe8c 	uxth.w	lr, ip
 800083a:	2601      	movs	r6, #1
 800083c:	0c20      	lsrs	r0, r4, #16
 800083e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000842:	fb07 1113 	mls	r1, r7, r3, r1
 8000846:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800084a:	fb0e f003 	mul.w	r0, lr, r3
 800084e:	4288      	cmp	r0, r1
 8000850:	d908      	bls.n	8000864 <__udivmoddi4+0x12c>
 8000852:	eb1c 0101 	adds.w	r1, ip, r1
 8000856:	f103 38ff 	add.w	r8, r3, #4294967295
 800085a:	d202      	bcs.n	8000862 <__udivmoddi4+0x12a>
 800085c:	4288      	cmp	r0, r1
 800085e:	f200 80cb 	bhi.w	80009f8 <__udivmoddi4+0x2c0>
 8000862:	4643      	mov	r3, r8
 8000864:	1a09      	subs	r1, r1, r0
 8000866:	b2a4      	uxth	r4, r4
 8000868:	fbb1 f0f7 	udiv	r0, r1, r7
 800086c:	fb07 1110 	mls	r1, r7, r0, r1
 8000870:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000874:	fb0e fe00 	mul.w	lr, lr, r0
 8000878:	45a6      	cmp	lr, r4
 800087a:	d908      	bls.n	800088e <__udivmoddi4+0x156>
 800087c:	eb1c 0404 	adds.w	r4, ip, r4
 8000880:	f100 31ff 	add.w	r1, r0, #4294967295
 8000884:	d202      	bcs.n	800088c <__udivmoddi4+0x154>
 8000886:	45a6      	cmp	lr, r4
 8000888:	f200 80bb 	bhi.w	8000a02 <__udivmoddi4+0x2ca>
 800088c:	4608      	mov	r0, r1
 800088e:	eba4 040e 	sub.w	r4, r4, lr
 8000892:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000896:	e79c      	b.n	80007d2 <__udivmoddi4+0x9a>
 8000898:	f1c6 0720 	rsb	r7, r6, #32
 800089c:	40b3      	lsls	r3, r6
 800089e:	fa22 fc07 	lsr.w	ip, r2, r7
 80008a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80008a6:	fa20 f407 	lsr.w	r4, r0, r7
 80008aa:	fa01 f306 	lsl.w	r3, r1, r6
 80008ae:	431c      	orrs	r4, r3
 80008b0:	40f9      	lsrs	r1, r7
 80008b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80008b6:	fa00 f306 	lsl.w	r3, r0, r6
 80008ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80008be:	0c20      	lsrs	r0, r4, #16
 80008c0:	fa1f fe8c 	uxth.w	lr, ip
 80008c4:	fb09 1118 	mls	r1, r9, r8, r1
 80008c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008cc:	fb08 f00e 	mul.w	r0, r8, lr
 80008d0:	4288      	cmp	r0, r1
 80008d2:	fa02 f206 	lsl.w	r2, r2, r6
 80008d6:	d90b      	bls.n	80008f0 <__udivmoddi4+0x1b8>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80008e0:	f080 8088 	bcs.w	80009f4 <__udivmoddi4+0x2bc>
 80008e4:	4288      	cmp	r0, r1
 80008e6:	f240 8085 	bls.w	80009f4 <__udivmoddi4+0x2bc>
 80008ea:	f1a8 0802 	sub.w	r8, r8, #2
 80008ee:	4461      	add	r1, ip
 80008f0:	1a09      	subs	r1, r1, r0
 80008f2:	b2a4      	uxth	r4, r4
 80008f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008f8:	fb09 1110 	mls	r1, r9, r0, r1
 80008fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000900:	fb00 fe0e 	mul.w	lr, r0, lr
 8000904:	458e      	cmp	lr, r1
 8000906:	d908      	bls.n	800091a <__udivmoddi4+0x1e2>
 8000908:	eb1c 0101 	adds.w	r1, ip, r1
 800090c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000910:	d26c      	bcs.n	80009ec <__udivmoddi4+0x2b4>
 8000912:	458e      	cmp	lr, r1
 8000914:	d96a      	bls.n	80009ec <__udivmoddi4+0x2b4>
 8000916:	3802      	subs	r0, #2
 8000918:	4461      	add	r1, ip
 800091a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800091e:	fba0 9402 	umull	r9, r4, r0, r2
 8000922:	eba1 010e 	sub.w	r1, r1, lr
 8000926:	42a1      	cmp	r1, r4
 8000928:	46c8      	mov	r8, r9
 800092a:	46a6      	mov	lr, r4
 800092c:	d356      	bcc.n	80009dc <__udivmoddi4+0x2a4>
 800092e:	d053      	beq.n	80009d8 <__udivmoddi4+0x2a0>
 8000930:	b15d      	cbz	r5, 800094a <__udivmoddi4+0x212>
 8000932:	ebb3 0208 	subs.w	r2, r3, r8
 8000936:	eb61 010e 	sbc.w	r1, r1, lr
 800093a:	fa01 f707 	lsl.w	r7, r1, r7
 800093e:	fa22 f306 	lsr.w	r3, r2, r6
 8000942:	40f1      	lsrs	r1, r6
 8000944:	431f      	orrs	r7, r3
 8000946:	e9c5 7100 	strd	r7, r1, [r5]
 800094a:	2600      	movs	r6, #0
 800094c:	4631      	mov	r1, r6
 800094e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000952:	f1c2 0320 	rsb	r3, r2, #32
 8000956:	40d8      	lsrs	r0, r3
 8000958:	fa0c fc02 	lsl.w	ip, ip, r2
 800095c:	fa21 f303 	lsr.w	r3, r1, r3
 8000960:	4091      	lsls	r1, r2
 8000962:	4301      	orrs	r1, r0
 8000964:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000968:	fa1f fe8c 	uxth.w	lr, ip
 800096c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000970:	fb07 3610 	mls	r6, r7, r0, r3
 8000974:	0c0b      	lsrs	r3, r1, #16
 8000976:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800097a:	fb00 f60e 	mul.w	r6, r0, lr
 800097e:	429e      	cmp	r6, r3
 8000980:	fa04 f402 	lsl.w	r4, r4, r2
 8000984:	d908      	bls.n	8000998 <__udivmoddi4+0x260>
 8000986:	eb1c 0303 	adds.w	r3, ip, r3
 800098a:	f100 38ff 	add.w	r8, r0, #4294967295
 800098e:	d22f      	bcs.n	80009f0 <__udivmoddi4+0x2b8>
 8000990:	429e      	cmp	r6, r3
 8000992:	d92d      	bls.n	80009f0 <__udivmoddi4+0x2b8>
 8000994:	3802      	subs	r0, #2
 8000996:	4463      	add	r3, ip
 8000998:	1b9b      	subs	r3, r3, r6
 800099a:	b289      	uxth	r1, r1
 800099c:	fbb3 f6f7 	udiv	r6, r3, r7
 80009a0:	fb07 3316 	mls	r3, r7, r6, r3
 80009a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009a8:	fb06 f30e 	mul.w	r3, r6, lr
 80009ac:	428b      	cmp	r3, r1
 80009ae:	d908      	bls.n	80009c2 <__udivmoddi4+0x28a>
 80009b0:	eb1c 0101 	adds.w	r1, ip, r1
 80009b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80009b8:	d216      	bcs.n	80009e8 <__udivmoddi4+0x2b0>
 80009ba:	428b      	cmp	r3, r1
 80009bc:	d914      	bls.n	80009e8 <__udivmoddi4+0x2b0>
 80009be:	3e02      	subs	r6, #2
 80009c0:	4461      	add	r1, ip
 80009c2:	1ac9      	subs	r1, r1, r3
 80009c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80009c8:	e738      	b.n	800083c <__udivmoddi4+0x104>
 80009ca:	462e      	mov	r6, r5
 80009cc:	4628      	mov	r0, r5
 80009ce:	e705      	b.n	80007dc <__udivmoddi4+0xa4>
 80009d0:	4606      	mov	r6, r0
 80009d2:	e6e3      	b.n	800079c <__udivmoddi4+0x64>
 80009d4:	4618      	mov	r0, r3
 80009d6:	e6f8      	b.n	80007ca <__udivmoddi4+0x92>
 80009d8:	454b      	cmp	r3, r9
 80009da:	d2a9      	bcs.n	8000930 <__udivmoddi4+0x1f8>
 80009dc:	ebb9 0802 	subs.w	r8, r9, r2
 80009e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009e4:	3801      	subs	r0, #1
 80009e6:	e7a3      	b.n	8000930 <__udivmoddi4+0x1f8>
 80009e8:	4646      	mov	r6, r8
 80009ea:	e7ea      	b.n	80009c2 <__udivmoddi4+0x28a>
 80009ec:	4620      	mov	r0, r4
 80009ee:	e794      	b.n	800091a <__udivmoddi4+0x1e2>
 80009f0:	4640      	mov	r0, r8
 80009f2:	e7d1      	b.n	8000998 <__udivmoddi4+0x260>
 80009f4:	46d0      	mov	r8, sl
 80009f6:	e77b      	b.n	80008f0 <__udivmoddi4+0x1b8>
 80009f8:	3b02      	subs	r3, #2
 80009fa:	4461      	add	r1, ip
 80009fc:	e732      	b.n	8000864 <__udivmoddi4+0x12c>
 80009fe:	4630      	mov	r0, r6
 8000a00:	e709      	b.n	8000816 <__udivmoddi4+0xde>
 8000a02:	4464      	add	r4, ip
 8000a04:	3802      	subs	r0, #2
 8000a06:	e742      	b.n	800088e <__udivmoddi4+0x156>

08000a08 <__aeabi_idiv0>:
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8000a16:	1df9      	adds	r1, r7, #7
 8000a18:	2364      	movs	r3, #100	; 0x64
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4803      	ldr	r0, [pc, #12]	; (8000a2c <spi_write+0x20>)
 8000a1e:	f001 ffca 	bl	80029b6 <HAL_SPI_Transmit>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	2000008c 	.word	0x2000008c

08000a30 <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2140      	movs	r1, #64	; 0x40
 8000a3e:	480b      	ldr	r0, [pc, #44]	; (8000a6c <lcd_write_data+0x3c>)
 8000a40:	f001 fa7e 	bl	8001f40 <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 8000a44:	2201      	movs	r2, #1
 8000a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a4a:	4809      	ldr	r0, [pc, #36]	; (8000a70 <lcd_write_data+0x40>)
 8000a4c:	f001 fa78 	bl	8001f40 <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 8000a50:	79fb      	ldrb	r3, [r7, #7]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ffda 	bl	8000a0c <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2140      	movs	r1, #64	; 0x40
 8000a5c:	4803      	ldr	r0, [pc, #12]	; (8000a6c <lcd_write_data+0x3c>)
 8000a5e:	f001 fa6f 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40020400 	.word	0x40020400
 8000a70:	40020000 	.word	0x40020000

08000a74 <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8000a7e:	2200      	movs	r2, #0
 8000a80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a84:	480a      	ldr	r0, [pc, #40]	; (8000ab0 <lcd_write_command+0x3c>)
 8000a86:	f001 fa5b 	bl	8001f40 <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2140      	movs	r1, #64	; 0x40
 8000a8e:	4809      	ldr	r0, [pc, #36]	; (8000ab4 <lcd_write_command+0x40>)
 8000a90:	f001 fa56 	bl	8001f40 <HAL_GPIO_WritePin>
    spi_write(data);
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ffb8 	bl	8000a0c <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2140      	movs	r1, #64	; 0x40
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <lcd_write_command+0x40>)
 8000aa2:	f001 fa4d 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	40020400 	.word	0x40020400

08000ab8 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f7ff ffd3 	bl	8000a74 <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff ffce 	bl	8000a74 <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	0a1b      	lsrs	r3, r3, #8
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff ffa6 	bl	8000a30 <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ffa1 	bl	8000a30 <lcd_write_data>
}
 8000aee:	bf00      	nop
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8000af6:	b480      	push	{r7}
 8000af8:	b085      	sub	sp, #20
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	6078      	str	r0, [r7, #4]
 8000afe:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	781a      	ldrb	r2, [r3, #0]
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	7bfa      	ldrb	r2, [r7, #15]
 8000b12:	701a      	strb	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3714      	adds	r7, #20
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr

08000b20 <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	ed87 0b00 	vstr	d0, [r7]
    int multiplier = 4;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	617b      	str	r3, [r7, #20]
    double counter = millis;
 8000b2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b32:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000b36:	e01c      	b.n	8000b72 <delay_ms+0x52>
        while(counter--);
 8000b38:	bf00      	nop
 8000b3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000b3e:	f04f 0200 	mov.w	r2, #0
 8000b42:	4b11      	ldr	r3, [pc, #68]	; (8000b88 <delay_ms+0x68>)
 8000b44:	4620      	mov	r0, r4
 8000b46:	4629      	mov	r1, r5
 8000b48:	f7ff fb9e 	bl	8000288 <__aeabi_dsub>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	460b      	mov	r3, r1
 8000b50:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8000b54:	f04f 0200 	mov.w	r2, #0
 8000b58:	f04f 0300 	mov.w	r3, #0
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	4629      	mov	r1, r5
 8000b60:	f7ff fda0 	bl	80006a4 <__aeabi_dcmpeq>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0e7      	beq.n	8000b3a <delay_ms+0x1a>
        counter = millis;
 8000b6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b6e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    while(multiplier--) {
 8000b72:	697b      	ldr	r3, [r7, #20]
 8000b74:	1e5a      	subs	r2, r3, #1
 8000b76:	617a      	str	r2, [r7, #20]
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d1dd      	bne.n	8000b38 <delay_ms+0x18>
    }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bdb0      	pop	{r4, r5, r7, pc}
 8000b86:	bf00      	nop
 8000b88:	3ff00000 	.word	0x3ff00000
 8000b8c:	00000000 	.word	0x00000000

08000b90 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
    
    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	4813      	ldr	r0, [pc, #76]	; (8000be8 <lcd_init+0x58>)
 8000b9a:	f001 f9d1 	bl	8001f40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba4:	4811      	ldr	r0, [pc, #68]	; (8000bec <lcd_init+0x5c>)
 8000ba6:	f001 f9cb 	bl	8001f40 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 8000baa:	2201      	movs	r2, #1
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	4810      	ldr	r0, [pc, #64]	; (8000bf0 <lcd_init+0x60>)
 8000bb0:	f001 f9c6 	bl	8001f40 <HAL_GPIO_WritePin>
    
    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	480d      	ldr	r0, [pc, #52]	; (8000bf0 <lcd_init+0x60>)
 8000bba:	f001 f9c1 	bl	8001f40 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000bbe:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8000be0 <lcd_init+0x50>
 8000bc2:	f7ff ffad 	bl	8000b20 <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2180      	movs	r1, #128	; 0x80
 8000bca:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <lcd_init+0x60>)
 8000bcc:	f001 f9b8 	bl	8001f40 <HAL_GPIO_WritePin>
    delay_ms(500);
 8000bd0:	ed9f 0b03 	vldr	d0, [pc, #12]	; 8000be0 <lcd_init+0x50>
 8000bd4:	f7ff ffa4 	bl	8000b20 <delay_ms>
    
    lcd_init_command_list();
 8000bd8:	f000 f80e 	bl	8000bf8 <lcd_init_command_list>
    
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	00000000 	.word	0x00000000
 8000be4:	407f4000 	.word	0x407f4000
 8000be8:	40020400 	.word	0x40020400
 8000bec:	40020000 	.word	0x40020000
 8000bf0:	40020800 	.word	0x40020800
 8000bf4:	00000000 	.word	0x00000000

08000bf8 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
    
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2010      	movs	r0, #16
 8000c00:	f7ff ff5a 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8000c04:	2100      	movs	r1, #0
 8000c06:	2011      	movs	r0, #17
 8000c08:	f7ff ff56 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2012      	movs	r0, #18
 8000c10:	f7ff ff52 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8000c14:	2100      	movs	r1, #0
 8000c16:	2013      	movs	r0, #19
 8000c18:	f7ff ff4e 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	2014      	movs	r0, #20
 8000c20:	f7ff ff4a 	bl	8000ab8 <lcd_write_register>
    
    delay_ms(10);
 8000c24:	ed9f 0b60 	vldr	d0, [pc, #384]	; 8000da8 <lcd_init_command_list+0x1b0>
 8000c28:	f7ff ff7a 	bl	8000b20 <delay_ms>
    
    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // EVERYTHING ON
 8000c2c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c30:	2011      	movs	r0, #17
 8000c32:	f7ff ff41 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL3, 0x7000); // Set BT,DC1,DC2,DC3
 8000c36:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000c3a:	2012      	movs	r0, #18
 8000c3c:	f7ff ff3c 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8000c40:	216f      	movs	r1, #111	; 0x6f
 8000c42:	2013      	movs	r0, #19
 8000c44:	f7ff ff38 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8000c48:	f644 115f 	movw	r1, #18783	; 0x495f
 8000c4c:	2014      	movs	r0, #20
 8000c4e:	f7ff ff33 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0F00); // Set SAP,DSTB,STB
 8000c52:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 8000c56:	2010      	movs	r0, #16
 8000c58:	f7ff ff2e 	bl	8000ab8 <lcd_write_register>
    
    delay_ms(10);
 8000c5c:	ed9f 0b52 	vldr	d0, [pc, #328]	; 8000da8 <lcd_init_command_list+0x1b0>
 8000c60:	f7ff ff5e 	bl	8000b20 <delay_ms>
    

    lcd_write_register(ILI9225_POWER_CTRL2, 0xFFFF); // Set APON,PON,AON,VCI1EN,VC
 8000c64:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c68:	2011      	movs	r0, #17
 8000c6a:	f7ff ff25 	bl	8000ab8 <lcd_write_register>

    delay_ms(50);
 8000c6e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8000db0 <lcd_init_command_list+0x1b8>
 8000c72:	f7ff ff55 	bl	8000b20 <delay_ms>


    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8000c76:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8000c7a:	2001      	movs	r0, #1
 8000c7c:	f7ff ff1c 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8000c80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff ff17 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1.
 8000c8a:	f241 0130 	movw	r1, #4144	; 0x1030
 8000c8e:	2003      	movs	r0, #3
 8000c90:	f7ff ff12 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8000c94:	2100      	movs	r1, #0
 8000c96:	2007      	movs	r0, #7
 8000c98:	f7ff ff0e 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0202); // set the back porch and front porch (2 lines, minimum)
 8000c9c:	f240 2102 	movw	r1, #514	; 0x202
 8000ca0:	2008      	movs	r0, #8
 8000ca2:	f7ff ff09 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	200b      	movs	r0, #11
 8000caa:	f7ff ff05 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8000cae:	2100      	movs	r1, #0
 8000cb0:	200c      	movs	r0, #12
 8000cb2:	f7ff ff01 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Set Osc
 8000cb6:	f640 7101 	movw	r1, #3841	; 0xf01
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f7ff fefc 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2015      	movs	r0, #21
 8000cc4:	f7ff fef8 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2020      	movs	r0, #32
 8000ccc:	f7ff fef4 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	2021      	movs	r0, #33	; 0x21
 8000cd4:	f7ff fef0 	bl	8000ab8 <lcd_write_register>

    /* Set GRAM area */
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000); 
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2030      	movs	r0, #48	; 0x30
 8000cdc:	f7ff feec 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); 
 8000ce0:	21db      	movs	r1, #219	; 0xdb
 8000ce2:	2031      	movs	r0, #49	; 0x31
 8000ce4:	f7ff fee8 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); 
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2032      	movs	r0, #50	; 0x32
 8000cec:	f7ff fee4 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); 
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2033      	movs	r0, #51	; 0x33
 8000cf4:	f7ff fee0 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); 
 8000cf8:	21db      	movs	r1, #219	; 0xdb
 8000cfa:	2034      	movs	r0, #52	; 0x34
 8000cfc:	f7ff fedc 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); 
 8000d00:	2100      	movs	r1, #0
 8000d02:	2035      	movs	r0, #53	; 0x35
 8000d04:	f7ff fed8 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); 
 8000d08:	21af      	movs	r1, #175	; 0xaf
 8000d0a:	2036      	movs	r0, #54	; 0x36
 8000d0c:	f7ff fed4 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); 
 8000d10:	2100      	movs	r1, #0
 8000d12:	2037      	movs	r0, #55	; 0x37
 8000d14:	f7ff fed0 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); 
 8000d18:	21db      	movs	r1, #219	; 0xdb
 8000d1a:	2038      	movs	r0, #56	; 0x38
 8000d1c:	f7ff fecc 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); 
 8000d20:	2100      	movs	r1, #0
 8000d22:	2039      	movs	r0, #57	; 0x39
 8000d24:	f7ff fec8 	bl	8000ab8 <lcd_write_register>

    /* Set GAMMA curve */
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000); 
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2050      	movs	r0, #80	; 0x50
 8000d2c:	f7ff fec4 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808); 
 8000d30:	f640 0108 	movw	r1, #2056	; 0x808
 8000d34:	2051      	movs	r0, #81	; 0x51
 8000d36:	f7ff febf 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A); 
 8000d3a:	f640 010a 	movw	r1, #2058	; 0x80a
 8000d3e:	2052      	movs	r0, #82	; 0x52
 8000d40:	f7ff feba 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A); 
 8000d44:	210a      	movs	r1, #10
 8000d46:	2053      	movs	r0, #83	; 0x53
 8000d48:	f7ff feb6 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08); 
 8000d4c:	f640 2108 	movw	r1, #2568	; 0xa08
 8000d50:	2054      	movs	r0, #84	; 0x54
 8000d52:	f7ff feb1 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808); 
 8000d56:	f640 0108 	movw	r1, #2056	; 0x808
 8000d5a:	2055      	movs	r0, #85	; 0x55
 8000d5c:	f7ff feac 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000); 
 8000d60:	2100      	movs	r1, #0
 8000d62:	2056      	movs	r0, #86	; 0x56
 8000d64:	f7ff fea8 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00); 
 8000d68:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8000d6c:	2057      	movs	r0, #87	; 0x57
 8000d6e:	f7ff fea3 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710); 
 8000d72:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8000d76:	2058      	movs	r0, #88	; 0x58
 8000d78:	f7ff fe9e 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710); 
 8000d7c:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8000d80:	2059      	movs	r0, #89	; 0x59
 8000d82:	f7ff fe99 	bl	8000ab8 <lcd_write_register>

    lcd_write_register(ILI9225_DISP_CTRL1, 0x0012); 
 8000d86:	2112      	movs	r1, #18
 8000d88:	2007      	movs	r0, #7
 8000d8a:	f7ff fe95 	bl	8000ab8 <lcd_write_register>

    delay_ms(50); 
 8000d8e:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8000db0 <lcd_init_command_list+0x1b8>
 8000d92:	f7ff fec5 	bl	8000b20 <delay_ms>
    
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017);
 8000d96:	f241 0117 	movw	r1, #4119	; 0x1017
 8000d9a:	2007      	movs	r0, #7
 8000d9c:	f7ff fe8c 	bl	8000ab8 <lcd_write_register>

    
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	f3af 8000 	nop.w
 8000da8:	00000000 	.word	0x00000000
 8000dac:	40240000 	.word	0x40240000
 8000db0:	00000000 	.word	0x00000000
 8000db4:	40490000 	.word	0x40490000

08000db8 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with 
 * Colour.
 * 
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	603a      	str	r2, [r7, #0]
 8000dc2:	71fb      	strb	r3, [r7, #7]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 8000dc8:	1dba      	adds	r2, r7, #6
 8000dca:	1dfb      	adds	r3, r7, #7
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fe91 	bl	8000af6 <swap_char>
        y = WIDTH - y;
 8000dd4:	79ba      	ldrb	r2, [r7, #6]
 8000dd6:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8000dda:	1a9b      	subs	r3, r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	71bb      	strb	r3, [r7, #6]
    }
    
    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 8000de0:	79f8      	ldrb	r0, [r7, #7]
 8000de2:	79b9      	ldrb	r1, [r7, #6]
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	3301      	adds	r3, #1
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	3301      	adds	r3, #1
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f000 f87a 	bl	8000ee8 <set_draw_window>
    lcd_write_data(colour >> 8);
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	0a1b      	lsrs	r3, r3, #8
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff fe18 	bl	8000a30 <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	4618      	mov	r0, r3
 8000e06:	f7ff fe13 	bl	8000a30 <lcd_write_data>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	4611      	mov	r1, r2
 8000e20:	461a      	mov	r2, r3
 8000e22:	4623      	mov	r3, r4
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	4603      	mov	r3, r0
 8000e28:	71bb      	strb	r3, [r7, #6]
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	717b      	strb	r3, [r7, #5]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 8000e32:	1dba      	adds	r2, r7, #6
 8000e34:	1dfb      	adds	r3, r7, #7
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fe5c 	bl	8000af6 <swap_char>
        swap_char(&x2, &y2);
 8000e3e:	1d3a      	adds	r2, r7, #4
 8000e40:	1d7b      	adds	r3, r7, #5
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff fe56 	bl	8000af6 <swap_char>
        y1 = WIDTH - y1;
 8000e4a:	79ba      	ldrb	r2, [r7, #6]
 8000e4c:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8000e50:	1a9b      	subs	r3, r3, r2
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 8000e56:	793a      	ldrb	r2, [r7, #4]
 8000e58:	f06f 0323 	mvn.w	r3, #35	; 0x23
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 8000e62:	1dba      	adds	r2, r7, #6
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	4611      	mov	r1, r2
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff fe44 	bl	8000af6 <swap_char>
    }
    
    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 8000e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	73bb      	strb	r3, [r7, #14]
    
    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8000e78:	79f8      	ldrb	r0, [r7, #7]
 8000e7a:	79b9      	ldrb	r1, [r7, #6]
 8000e7c:	797a      	ldrb	r2, [r7, #5]
 8000e7e:	793b      	ldrb	r3, [r7, #4]
 8000e80:	f000 f832 	bl	8000ee8 <set_draw_window>
    
    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between 
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <fill_rectangle+0xd0>)
 8000e8a:	f001 f859 	bl	8001f40 <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e017      	b.n	8000ec4 <fill_rectangle+0xb0>
        for(int x = 0; x < x2-x1+1; x++) {
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	e00a      	b.n	8000eb0 <fill_rectangle+0x9c>
            lcd_write_data(colour_high);
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fdc7 	bl	8000a30 <lcd_write_data>
            lcd_write_data(colour_low);
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fdc3 	bl	8000a30 <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	3301      	adds	r3, #1
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	797b      	ldrb	r3, [r7, #5]
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	1ad3      	subs	r3, r2, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	dded      	ble.n	8000e9a <fill_rectangle+0x86>
    for(int y = 0; y < y2-y1+1 ; y++) {
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	793b      	ldrb	r3, [r7, #4]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	79bb      	ldrb	r3, [r7, #6]
 8000eca:	1ad3      	subs	r3, r2, r3
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dde0      	ble.n	8000e94 <fill_rectangle+0x80>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2140      	movs	r1, #64	; 0x40
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <fill_rectangle+0xd0>)
 8000ed8:	f001 f832 	bl	8001f40 <HAL_GPIO_WritePin>
}
 8000edc:	bf00      	nop
 8000ede:	371c      	adds	r7, #28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	40020400 	.word	0x40020400

08000ee8 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 * 
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4604      	mov	r4, r0
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4623      	mov	r3, r4
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	4603      	mov	r3, r0
 8000efc:	71bb      	strb	r3, [r7, #6]
 8000efe:	460b      	mov	r3, r1
 8000f00:	717b      	strb	r3, [r7, #5]
 8000f02:	4613      	mov	r3, r2
 8000f04:	713b      	strb	r3, [r7, #4]
    
    //Check that the values are in order
    if(x2 < x1)
 8000f06:	797a      	ldrb	r2, [r7, #5]
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d205      	bcs.n	8000f1a <set_draw_window+0x32>
        swap_char(&x2, &x1);
 8000f0e:	1dfa      	adds	r2, r7, #7
 8000f10:	1d7b      	adds	r3, r7, #5
 8000f12:	4611      	mov	r1, r2
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fdee 	bl	8000af6 <swap_char>
    if(y2 < y1)
 8000f1a:	793a      	ldrb	r2, [r7, #4]
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	d205      	bcs.n	8000f2e <set_draw_window+0x46>
        swap_char(&y2, &y1);
 8000f22:	1dba      	adds	r2, r7, #6
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff fde4 	bl	8000af6 <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	4619      	mov	r1, r3
 8000f32:	2036      	movs	r0, #54	; 0x36
 8000f34:	f7ff fdc0 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	2037      	movs	r0, #55	; 0x37
 8000f3e:	f7ff fdbb 	bl	8000ab8 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 8000f42:	793b      	ldrb	r3, [r7, #4]
 8000f44:	4619      	mov	r1, r3
 8000f46:	2038      	movs	r0, #56	; 0x38
 8000f48:	f7ff fdb6 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2039      	movs	r0, #57	; 0x39
 8000f52:	f7ff fdb1 	bl	8000ab8 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	4619      	mov	r1, r3
 8000f5a:	2020      	movs	r0, #32
 8000f5c:	f7ff fdac 	bl	8000ab8 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 8000f60:	79bb      	ldrb	r3, [r7, #6]
 8000f62:	4619      	mov	r1, r3
 8000f64:	2021      	movs	r0, #33	; 0x21
 8000f66:	f7ff fda7 	bl	8000ab8 <lcd_write_register>

    lcd_write_command(0x00);
 8000f6a:	2000      	movs	r0, #0
 8000f6c:	f7ff fd82 	bl	8000a74 <lcd_write_command>
    lcd_write_command(0x22);
 8000f70:	2022      	movs	r0, #34	; 0x22
 8000f72:	f7ff fd7f 	bl	8000a74 <lcd_write_command>
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd90      	pop	{r4, r7, pc}
	...

08000f80 <draw_char>:
 * 
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af02      	add	r7, sp, #8
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	4603      	mov	r3, r0
 8000f8a:	71fb      	strb	r3, [r7, #7]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	71bb      	strb	r3, [r7, #6]
 8000f90:	4613      	mov	r3, r2
 8000f92:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 8000f94:	797b      	ldrb	r3, [r7, #5]
 8000f96:	3b20      	subs	r3, #32
 8000f98:	60fb      	str	r3, [r7, #12]
    
    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	617b      	str	r3, [r7, #20]
 8000f9e:	e070      	b.n	8001082 <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f1c3 010c 	rsb	r1, r3, #12
 8000fa6:	483b      	ldr	r0, [pc, #236]	; (8001094 <draw_char+0x114>)
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4613      	mov	r3, r2
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	4413      	add	r3, r2
 8000fb4:	4403      	add	r3, r0
 8000fb6:	440b      	add	r3, r1
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	72fb      	strb	r3, [r7, #11]
        
        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	e059      	b.n	8001076 <draw_char+0xf6>
            if(line & (0x01 << j)) {
 8000fc2:	7afa      	ldrb	r2, [r7, #11]
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	fa42 f303 	asr.w	r3, r2, r3
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d04e      	beq.n	8001070 <draw_char+0xf0>
                if(size == 1) {
 8000fd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d110      	bne.n	8000ffc <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	79fa      	ldrb	r2, [r7, #7]
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	3308      	adds	r3, #8
 8000fe6:	b2d8      	uxtb	r0, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	79bb      	ldrb	r3, [r7, #6]
 8000fee:	4413      	add	r3, r2
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f7ff fedf 	bl	8000db8 <draw_pixel>
 8000ffa:	e039      	b.n	8001070 <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	f1c3 0308 	rsb	r3, r3, #8
 8001002:	b2db      	uxtb	r3, r3
 8001004:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001008:	fb12 f303 	smulbb	r3, r2, r3
 800100c:	b2da      	uxtb	r2, r3
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4413      	add	r3, r2
 8001012:	b2d8      	uxtb	r0, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800101c:	fb12 f303 	smulbb	r3, r2, r3
 8001020:	b2da      	uxtb	r2, r3
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	4413      	add	r3, r2
 8001026:	b2d9      	uxtb	r1, r3
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	f1c3 0308 	rsb	r3, r3, #8
 800102e:	b2db      	uxtb	r3, r3
 8001030:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001034:	fb12 f303 	smulbb	r3, r2, r3
 8001038:	b2da      	uxtb	r2, r3
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4413      	add	r3, r2
 800103e:	b2da      	uxtb	r2, r3
 8001040:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001044:	4413      	add	r3, r2
 8001046:	b2dc      	uxtb	r4, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001050:	fb12 f303 	smulbb	r3, r2, r3
 8001054:	b2da      	uxtb	r2, r3
 8001056:	79bb      	ldrb	r3, [r7, #6]
 8001058:	4413      	add	r3, r2
 800105a:	b2da      	uxtb	r2, r3
 800105c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001060:	4413      	add	r3, r2
 8001062:	b2da      	uxtb	r2, r3
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	4613      	mov	r3, r2
 800106a:	4622      	mov	r2, r4
 800106c:	f7ff fed2 	bl	8000e14 <fill_rectangle>
        for(j=0; j<8; j++) {
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	3301      	adds	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	2b07      	cmp	r3, #7
 800107a:	dda2      	ble.n	8000fc2 <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	3301      	adds	r3, #1
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b0c      	cmp	r3, #12
 8001086:	dd8b      	ble.n	8000fa0 <draw_char+0x20>
                }
            }
        }
    }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	371c      	adds	r7, #28
 800108e:	46bd      	mov	sp, r7
 8001090:	bd90      	pop	{r4, r7, pc}
 8001092:	bf00      	nop
 8001094:	08003cb4 	.word	0x08003cb4

08001098 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with 
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b088      	sub	sp, #32
 800109c:	af02      	add	r7, sp, #8
 800109e:	603a      	str	r2, [r7, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	460b      	mov	r3, r1
 80010a8:	71bb      	strb	r3, [r7, #6]
 80010aa:	4613      	mov	r3, r2
 80010ac:	717b      	strb	r3, [r7, #5]
    
    //Work out the size of each character
    int char_width = size * 9;
 80010ae:	797a      	ldrb	r2, [r7, #5]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	4413      	add	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80010bc:	e015      	b.n	80010ea <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	6939      	ldr	r1, [r7, #16]
 80010c4:	fb01 f303 	mul.w	r3, r1, r3
 80010c8:	4413      	add	r3, r2
 80010ca:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	b2d8      	uxtb	r0, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	6a3a      	ldr	r2, [r7, #32]
 80010d4:	4413      	add	r3, r2
 80010d6:	781a      	ldrb	r2, [r3, #0]
 80010d8:	79b9      	ldrb	r1, [r7, #6]
 80010da:	797b      	ldrb	r3, [r7, #5]
 80010dc:	9300      	str	r3, [sp, #0]
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	f7ff ff4e 	bl	8000f80 <draw_char>
        //Next character
        counter++;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	6a3a      	ldr	r2, [r7, #32]
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1e3      	bne.n	80010be <draw_string+0x26>
    }
}
 80010f6:	bf00      	nop
 80010f8:	bf00      	nop
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <drawCircle>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void drawCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	4604      	mov	r4, r0
 8001108:	4608      	mov	r0, r1
 800110a:	4611      	mov	r1, r2
 800110c:	461a      	mov	r2, r3
 800110e:	4623      	mov	r3, r4
 8001110:	80fb      	strh	r3, [r7, #6]
 8001112:	4603      	mov	r3, r0
 8001114:	80bb      	strh	r3, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	807b      	strh	r3, [r7, #2]
 800111a:	4613      	mov	r3, r2
 800111c:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 800111e:	887b      	ldrh	r3, [r7, #2]
 8001120:	f1c3 0301 	rsb	r3, r3, #1
 8001124:	b29b      	uxth	r3, r3
 8001126:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 8001128:	2301      	movs	r3, #1
 800112a:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	461a      	mov	r2, r3
 8001130:	03d2      	lsls	r2, r2, #15
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	b29b      	uxth	r3, r3
 8001138:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	81fb      	strh	r3, [r7, #14]

    draw_pixel(x0  , y0+r, color);
 8001142:	88fb      	ldrh	r3, [r7, #6]
 8001144:	b2d8      	uxtb	r0, r3
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4413      	add	r3, r2
 8001150:	b2db      	uxtb	r3, r3
 8001152:	883a      	ldrh	r2, [r7, #0]
 8001154:	4619      	mov	r1, r3
 8001156:	f7ff fe2f 	bl	8000db8 <draw_pixel>
    draw_pixel(x0  , y0-r, color);
 800115a:	88fb      	ldrh	r3, [r7, #6]
 800115c:	b2d8      	uxtb	r0, r3
 800115e:	88bb      	ldrh	r3, [r7, #4]
 8001160:	b2da      	uxtb	r2, r3
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	b2db      	uxtb	r3, r3
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	b2db      	uxtb	r3, r3
 800116a:	883a      	ldrh	r2, [r7, #0]
 800116c:	4619      	mov	r1, r3
 800116e:	f7ff fe23 	bl	8000db8 <draw_pixel>
    draw_pixel(x0+r, y0  , color);
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	b2da      	uxtb	r2, r3
 8001176:	887b      	ldrh	r3, [r7, #2]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	4413      	add	r3, r2
 800117c:	b2db      	uxtb	r3, r3
 800117e:	88ba      	ldrh	r2, [r7, #4]
 8001180:	b2d1      	uxtb	r1, r2
 8001182:	883a      	ldrh	r2, [r7, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fe17 	bl	8000db8 <draw_pixel>
    draw_pixel(x0-r, y0  , color);
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	887b      	ldrh	r3, [r7, #2]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	b2db      	uxtb	r3, r3
 8001196:	88ba      	ldrh	r2, [r7, #4]
 8001198:	b2d1      	uxtb	r1, r2
 800119a:	883a      	ldrh	r2, [r7, #0]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fe0b 	bl	8000db8 <draw_pixel>

    while (x<y) {
 80011a2:	e0a1      	b.n	80012e8 <drawCircle+0x1e8>
        if (f >= 0) {
 80011a4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0e      	blt.n	80011ca <drawCircle+0xca>
            y--;
 80011ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80011b8:	8a7b      	ldrh	r3, [r7, #18]
 80011ba:	3302      	adds	r3, #2
 80011bc:	b29b      	uxth	r3, r3
 80011be:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80011c0:	8afa      	ldrh	r2, [r7, #22]
 80011c2:	8a7b      	ldrh	r3, [r7, #18]
 80011c4:	4413      	add	r3, r2
 80011c6:	b29b      	uxth	r3, r3
 80011c8:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80011ca:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3301      	adds	r3, #1
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80011d6:	8abb      	ldrh	r3, [r7, #20]
 80011d8:	3302      	adds	r3, #2
 80011da:	b29b      	uxth	r3, r3
 80011dc:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80011de:	8afa      	ldrh	r2, [r7, #22]
 80011e0:	8abb      	ldrh	r3, [r7, #20]
 80011e2:	4413      	add	r3, r2
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	82fb      	strh	r3, [r7, #22]

        draw_pixel(x0 + x, y0 + y, color);
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	8a3b      	ldrh	r3, [r7, #16]
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b2d8      	uxtb	r0, r3
 80011f4:	88bb      	ldrh	r3, [r7, #4]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	89fb      	ldrh	r3, [r7, #14]
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	4413      	add	r3, r2
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	883a      	ldrh	r2, [r7, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fdd8 	bl	8000db8 <draw_pixel>
        draw_pixel(x0 - x, y0 + y, color);
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	b2da      	uxtb	r2, r3
 800120c:	8a3b      	ldrh	r3, [r7, #16]
 800120e:	b2db      	uxtb	r3, r3
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	b2d8      	uxtb	r0, r3
 8001214:	88bb      	ldrh	r3, [r7, #4]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	b2db      	uxtb	r3, r3
 800121c:	4413      	add	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	883a      	ldrh	r2, [r7, #0]
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fdc8 	bl	8000db8 <draw_pixel>
        draw_pixel(x0 + x, y0 - y, color);
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	b2da      	uxtb	r2, r3
 800122c:	8a3b      	ldrh	r3, [r7, #16]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	4413      	add	r3, r2
 8001232:	b2d8      	uxtb	r0, r3
 8001234:	88bb      	ldrh	r3, [r7, #4]
 8001236:	b2da      	uxtb	r2, r3
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	b2db      	uxtb	r3, r3
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	b2db      	uxtb	r3, r3
 8001240:	883a      	ldrh	r2, [r7, #0]
 8001242:	4619      	mov	r1, r3
 8001244:	f7ff fdb8 	bl	8000db8 <draw_pixel>
        draw_pixel(x0 - x, y0 - y, color);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	8a3b      	ldrh	r3, [r7, #16]
 800124e:	b2db      	uxtb	r3, r3
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	b2d8      	uxtb	r0, r3
 8001254:	88bb      	ldrh	r3, [r7, #4]
 8001256:	b2da      	uxtb	r2, r3
 8001258:	89fb      	ldrh	r3, [r7, #14]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	b2db      	uxtb	r3, r3
 8001260:	883a      	ldrh	r2, [r7, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fda8 	bl	8000db8 <draw_pixel>
        draw_pixel(x0 + y, y0 + x, color);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4413      	add	r3, r2
 8001272:	b2d8      	uxtb	r0, r3
 8001274:	88bb      	ldrh	r3, [r7, #4]
 8001276:	b2da      	uxtb	r2, r3
 8001278:	8a3b      	ldrh	r3, [r7, #16]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	4413      	add	r3, r2
 800127e:	b2db      	uxtb	r3, r3
 8001280:	883a      	ldrh	r2, [r7, #0]
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fd98 	bl	8000db8 <draw_pixel>
        draw_pixel(x0 - y, y0 + x, color);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	b2da      	uxtb	r2, r3
 800128c:	89fb      	ldrh	r3, [r7, #14]
 800128e:	b2db      	uxtb	r3, r3
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	b2d8      	uxtb	r0, r3
 8001294:	88bb      	ldrh	r3, [r7, #4]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	8a3b      	ldrh	r3, [r7, #16]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	4413      	add	r3, r2
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	883a      	ldrh	r2, [r7, #0]
 80012a2:	4619      	mov	r1, r3
 80012a4:	f7ff fd88 	bl	8000db8 <draw_pixel>
        draw_pixel(x0 + y, y0 - x, color);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	89fb      	ldrh	r3, [r7, #14]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	4413      	add	r3, r2
 80012b2:	b2d8      	uxtb	r0, r3
 80012b4:	88bb      	ldrh	r3, [r7, #4]
 80012b6:	b2da      	uxtb	r2, r3
 80012b8:	8a3b      	ldrh	r3, [r7, #16]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	883a      	ldrh	r2, [r7, #0]
 80012c2:	4619      	mov	r1, r3
 80012c4:	f7ff fd78 	bl	8000db8 <draw_pixel>
        draw_pixel(x0 - y, y0 - x, color);
 80012c8:	88fb      	ldrh	r3, [r7, #6]
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	89fb      	ldrh	r3, [r7, #14]
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	b2d8      	uxtb	r0, r3
 80012d4:	88bb      	ldrh	r3, [r7, #4]
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	8a3b      	ldrh	r3, [r7, #16]
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	b2db      	uxtb	r3, r3
 80012e0:	883a      	ldrh	r2, [r7, #0]
 80012e2:	4619      	mov	r1, r3
 80012e4:	f7ff fd68 	bl	8000db8 <draw_pixel>
    while (x<y) {
 80012e8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	f6ff af57 	blt.w	80011a4 <drawCircle+0xa4>
    }
}
 80012f6:	bf00      	nop
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd90      	pop	{r4, r7, pc}

08001300 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001306:	f000 fb1b 	bl	8001940 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800130a:	f000 f85d 	bl	80013c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800130e:	f000 f925 	bl	800155c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001312:	f000 f8f9 	bl	8001508 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001316:	f000 f8c1 	bl	800149c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800131a:	f7ff fc39 	bl	8000b90 <lcd_init>
  fill_rectangle(0, 0, WIDTH, HEIGHT,COLOR_BEIGE);
 800131e:	f24f 73bb 	movw	r3, #63419	; 0xf7bb
 8001322:	9300      	str	r3, [sp, #0]
 8001324:	23b0      	movs	r3, #176	; 0xb0
 8001326:	22dc      	movs	r2, #220	; 0xdc
 8001328:	2100      	movs	r1, #0
 800132a:	2000      	movs	r0, #0
 800132c:	f7ff fd72 	bl	8000e14 <fill_rectangle>
  fill_rectangle(0, 0, WIDTH, HEIGHT,COLOR_GREEN);
 8001330:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	23b0      	movs	r3, #176	; 0xb0
 8001338:	22dc      	movs	r2, #220	; 0xdc
 800133a:	2100      	movs	r1, #0
 800133c:	2000      	movs	r0, #0
 800133e:	f7ff fd69 	bl	8000e14 <fill_rectangle>
  fill_rectangle(0, 0, WIDTH, HEIGHT,COLOR_RED);
 8001342:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	23b0      	movs	r3, #176	; 0xb0
 800134a:	22dc      	movs	r2, #220	; 0xdc
 800134c:	2100      	movs	r1, #0
 800134e:	2000      	movs	r0, #0
 8001350:	f7ff fd60 	bl	8000e14 <fill_rectangle>
  fill_rectangle(0, 0, WIDTH, HEIGHT,COLOR_BLACK);
 8001354:	2300      	movs	r3, #0
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	23b0      	movs	r3, #176	; 0xb0
 800135a:	22dc      	movs	r2, #220	; 0xdc
 800135c:	2100      	movs	r1, #0
 800135e:	2000      	movs	r0, #0
 8001360:	f7ff fd58 	bl	8000e14 <fill_rectangle>
  draw_string(20, 50, COLOR_BLUE, 2, "Hola stm32");
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <main+0xc0>)
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2302      	movs	r3, #2
 800136a:	221f      	movs	r2, #31
 800136c:	2132      	movs	r1, #50	; 0x32
 800136e:	2014      	movs	r0, #20
 8001370:	f7ff fe92 	bl	8001098 <draw_string>
  drawCircle(50,100,20,COLOR_BLUE);
 8001374:	231f      	movs	r3, #31
 8001376:	2214      	movs	r2, #20
 8001378:	2164      	movs	r1, #100	; 0x64
 800137a:	2032      	movs	r0, #50	; 0x32
 800137c:	f7ff fec0 	bl	8001100 <drawCircle>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (i = 0; i < 256; ++i) {
 8001380:	2300      	movs	r3, #0
 8001382:	71fb      	strb	r3, [r7, #7]
		  sprintf(buff,"%03u",i);
 8001384:	79fa      	ldrb	r2, [r7, #7]
 8001386:	463b      	mov	r3, r7
 8001388:	490e      	ldr	r1, [pc, #56]	; (80013c4 <main+0xc4>)
 800138a:	4618      	mov	r0, r3
 800138c:	f002 f80e 	bl	80033ac <siprintf>
		  draw_string(100, 80, COLOR_BLUE,2,buff);
 8001390:	463b      	mov	r3, r7
 8001392:	9300      	str	r3, [sp, #0]
 8001394:	2302      	movs	r3, #2
 8001396:	221f      	movs	r2, #31
 8001398:	2150      	movs	r1, #80	; 0x50
 800139a:	2064      	movs	r0, #100	; 0x64
 800139c:	f7ff fe7c 	bl	8001098 <draw_string>
		  HAL_Delay(20);
 80013a0:	2014      	movs	r0, #20
 80013a2:	f000 fb3f 	bl	8001a24 <HAL_Delay>
		  draw_string(100, 80, COLOR_BLACK,2,buff);
 80013a6:	463b      	mov	r3, r7
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2302      	movs	r3, #2
 80013ac:	2200      	movs	r2, #0
 80013ae:	2150      	movs	r1, #80	; 0x50
 80013b0:	2064      	movs	r0, #100	; 0x64
 80013b2:	f7ff fe71 	bl	8001098 <draw_string>
	  for (i = 0; i < 256; ++i) {
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	3301      	adds	r3, #1
 80013ba:	71fb      	strb	r3, [r7, #7]
		  sprintf(buff,"%03u",i);
 80013bc:	e7e2      	b.n	8001384 <main+0x84>
 80013be:	bf00      	nop
 80013c0:	08003ca0 	.word	0x08003ca0
 80013c4:	08003cac 	.word	0x08003cac

080013c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b094      	sub	sp, #80	; 0x50
 80013cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ce:	f107 0320 	add.w	r3, r7, #32
 80013d2:	2230      	movs	r2, #48	; 0x30
 80013d4:	2100      	movs	r1, #0
 80013d6:	4618      	mov	r0, r3
 80013d8:	f001 ffe0 	bl	800339c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
 80013e6:	609a      	str	r2, [r3, #8]
 80013e8:	60da      	str	r2, [r3, #12]
 80013ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ec:	2300      	movs	r3, #0
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <SystemClock_Config+0xcc>)
 80013f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f4:	4a27      	ldr	r2, [pc, #156]	; (8001494 <SystemClock_Config+0xcc>)
 80013f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013fa:	6413      	str	r3, [r2, #64]	; 0x40
 80013fc:	4b25      	ldr	r3, [pc, #148]	; (8001494 <SystemClock_Config+0xcc>)
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001404:	60bb      	str	r3, [r7, #8]
 8001406:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001408:	2300      	movs	r3, #0
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	4b22      	ldr	r3, [pc, #136]	; (8001498 <SystemClock_Config+0xd0>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001414:	4a20      	ldr	r2, [pc, #128]	; (8001498 <SystemClock_Config+0xd0>)
 8001416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	4b1e      	ldr	r3, [pc, #120]	; (8001498 <SystemClock_Config+0xd0>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001428:	2302      	movs	r3, #2
 800142a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	2301      	movs	r3, #1
 800142e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001430:	2310      	movs	r3, #16
 8001432:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001434:	2302      	movs	r3, #2
 8001436:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001438:	2300      	movs	r3, #0
 800143a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800143c:	2308      	movs	r3, #8
 800143e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8001440:	2340      	movs	r3, #64	; 0x40
 8001442:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001444:	2302      	movs	r3, #2
 8001446:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001448:	2307      	movs	r3, #7
 800144a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800144c:	f107 0320 	add.w	r3, r7, #32
 8001450:	4618      	mov	r0, r3
 8001452:	f000 fd8f 	bl	8001f74 <HAL_RCC_OscConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800145c:	f000 f916 	bl	800168c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2302      	movs	r3, #2
 8001466:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001470:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	2300      	movs	r3, #0
 8001474:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001476:	f107 030c 	add.w	r3, r7, #12
 800147a:	2101      	movs	r1, #1
 800147c:	4618      	mov	r0, r3
 800147e:	f000 fff1 	bl	8002464 <HAL_RCC_ClockConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001488:	f000 f900 	bl	800168c <Error_Handler>
  }
}
 800148c:	bf00      	nop
 800148e:	3750      	adds	r7, #80	; 0x50
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_SPI1_Init+0x64>)
 80014a2:	4a18      	ldr	r2, [pc, #96]	; (8001504 <MX_SPI1_Init+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b16      	ldr	r3, [pc, #88]	; (8001500 <MX_SPI1_Init+0x64>)
 80014a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_SPI1_Init+0x64>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_SPI1_Init+0x64>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ba:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_SPI1_Init+0x64>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c0:	4b0f      	ldr	r3, [pc, #60]	; (8001500 <MX_SPI1_Init+0x64>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_SPI1_Init+0x64>)
 80014c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80014ce:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_SPI1_Init+0x64>)
 80014d0:	2218      	movs	r2, #24
 80014d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_SPI1_Init+0x64>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014da:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_SPI1_Init+0x64>)
 80014dc:	2200      	movs	r2, #0
 80014de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <MX_SPI1_Init+0x64>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80014e6:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_SPI1_Init+0x64>)
 80014e8:	220a      	movs	r2, #10
 80014ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ec:	4804      	ldr	r0, [pc, #16]	; (8001500 <MX_SPI1_Init+0x64>)
 80014ee:	f001 f9d9 	bl	80028a4 <HAL_SPI_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80014f8:	f000 f8c8 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	2000008c 	.word	0x2000008c
 8001504:	40013000 	.word	0x40013000

08001508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <MX_USART2_UART_Init+0x50>)
 8001510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001514:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b0e      	ldr	r3, [pc, #56]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b09      	ldr	r3, [pc, #36]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b08      	ldr	r3, [pc, #32]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800153e:	4805      	ldr	r0, [pc, #20]	; (8001554 <MX_USART2_UART_Init+0x4c>)
 8001540:	f001 fc40 	bl	8002dc4 <HAL_UART_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800154a:	f000 f89f 	bl	800168c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	200000e4 	.word	0x200000e4
 8001558:	40004400 	.word	0x40004400

0800155c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
 8001576:	4b41      	ldr	r3, [pc, #260]	; (800167c <MX_GPIO_Init+0x120>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a40      	ldr	r2, [pc, #256]	; (800167c <MX_GPIO_Init+0x120>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b3e      	ldr	r3, [pc, #248]	; (800167c <MX_GPIO_Init+0x120>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	613b      	str	r3, [r7, #16]
 800158c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b3a      	ldr	r3, [pc, #232]	; (800167c <MX_GPIO_Init+0x120>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a39      	ldr	r2, [pc, #228]	; (800167c <MX_GPIO_Init+0x120>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b37      	ldr	r3, [pc, #220]	; (800167c <MX_GPIO_Init+0x120>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	4b33      	ldr	r3, [pc, #204]	; (800167c <MX_GPIO_Init+0x120>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a32      	ldr	r2, [pc, #200]	; (800167c <MX_GPIO_Init+0x120>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b30      	ldr	r3, [pc, #192]	; (800167c <MX_GPIO_Init+0x120>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60bb      	str	r3, [r7, #8]
 80015c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b2c      	ldr	r3, [pc, #176]	; (800167c <MX_GPIO_Init+0x120>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a2b      	ldr	r2, [pc, #172]	; (800167c <MX_GPIO_Init+0x120>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <MX_GPIO_Init+0x120>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_RESET);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2180      	movs	r1, #128	; 0x80
 80015e6:	4826      	ldr	r0, [pc, #152]	; (8001680 <MX_GPIO_Init+0x124>)
 80015e8:	f000 fcaa 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(rs_GPIO_Port, rs_Pin, GPIO_PIN_RESET);
 80015ec:	2200      	movs	r2, #0
 80015ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015f2:	4824      	ldr	r0, [pc, #144]	; (8001684 <MX_GPIO_Init+0x128>)
 80015f4:	f000 fca4 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2140      	movs	r1, #64	; 0x40
 80015fc:	4822      	ldr	r0, [pc, #136]	; (8001688 <MX_GPIO_Init+0x12c>)
 80015fe:	f000 fc9f 	bl	8001f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001608:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800160c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4819      	ldr	r0, [pc, #100]	; (8001680 <MX_GPIO_Init+0x124>)
 800161a:	f000 fb0d 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RESET_Pin */
  GPIO_InitStruct.Pin = RESET_Pin;
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001622:	2301      	movs	r3, #1
 8001624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 0314 	add.w	r3, r7, #20
 8001632:	4619      	mov	r1, r3
 8001634:	4812      	ldr	r0, [pc, #72]	; (8001680 <MX_GPIO_Init+0x124>)
 8001636:	f000 faff 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : rs_Pin */
  GPIO_InitStruct.Pin = rs_Pin;
 800163a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001640:	2301      	movs	r3, #1
 8001642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(rs_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	480c      	ldr	r0, [pc, #48]	; (8001684 <MX_GPIO_Init+0x128>)
 8001654:	f000 faf0 	bl	8001c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 8001658:	2340      	movs	r3, #64	; 0x40
 800165a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_GPIO_Init+0x12c>)
 8001670:	f000 fae2 	bl	8001c38 <HAL_GPIO_Init>

}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	; 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40023800 	.word	0x40023800
 8001680:	40020800 	.word	0x40020800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400

0800168c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001690:	b672      	cpsid	i
}
 8001692:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001694:	e7fe      	b.n	8001694 <Error_Handler+0x8>
	...

08001698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <HAL_MspInit+0x4c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_MspInit+0x4c>)
 80016a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ac:	6453      	str	r3, [r2, #68]	; 0x44
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_MspInit+0x4c>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <HAL_MspInit+0x4c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <HAL_MspInit+0x4c>)
 80016c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ca:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_MspInit+0x4c>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016d2:	603b      	str	r3, [r7, #0]
 80016d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016d6:	2007      	movs	r0, #7
 80016d8:	f000 fa7a 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016dc:	bf00      	nop
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40023800 	.word	0x40023800

080016e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_SPI_MspInit+0x84>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12b      	bne.n	8001762 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_SPI_MspInit+0x88>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a17      	ldr	r2, [pc, #92]	; (8001770 <HAL_SPI_MspInit+0x88>)
 8001714:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_SPI_MspInit+0x88>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_SPI_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <HAL_SPI_MspInit+0x88>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_SPI_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001742:	23e0      	movs	r3, #224	; 0xe0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001752:	2305      	movs	r3, #5
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	; (8001774 <HAL_SPI_MspInit+0x8c>)
 800175e:	f000 fa6b 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001762:	bf00      	nop
 8001764:	3728      	adds	r7, #40	; 0x28
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	40013000 	.word	0x40013000
 8001770:	40023800 	.word	0x40023800
 8001774:	40020000 	.word	0x40020000

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_UART_MspInit+0x84>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d12b      	bne.n	80017f2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b18      	ldr	r3, [pc, #96]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a17      	ldr	r2, [pc, #92]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	; 0x30
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_UART_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017d2:	230c      	movs	r3, #12
 80017d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e2:	2307      	movs	r3, #7
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 0314 	add.w	r3, r7, #20
 80017ea:	4619      	mov	r1, r3
 80017ec:	4805      	ldr	r0, [pc, #20]	; (8001804 <HAL_UART_MspInit+0x8c>)
 80017ee:	f000 fa23 	bl	8001c38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f2:	bf00      	nop
 80017f4:	3728      	adds	r7, #40	; 0x28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40004400 	.word	0x40004400
 8001800:	40023800 	.word	0x40023800
 8001804:	40020000 	.word	0x40020000

08001808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800180c:	e7fe      	b.n	800180c <NMI_Handler+0x4>

0800180e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <HardFault_Handler+0x4>

08001814 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <MemManage_Handler+0x4>

0800181a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <BusFault_Handler+0x4>

08001820 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <UsageFault_Handler+0x4>

08001826 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001842:	b480      	push	{r7}
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001854:	f000 f8c6 	bl	80019e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}

0800185c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001864:	4a14      	ldr	r2, [pc, #80]	; (80018b8 <_sbrk+0x5c>)
 8001866:	4b15      	ldr	r3, [pc, #84]	; (80018bc <_sbrk+0x60>)
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001870:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <_sbrk+0x64>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d102      	bne.n	800187e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <_sbrk+0x64>)
 800187a:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <_sbrk+0x68>)
 800187c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800187e:	4b10      	ldr	r3, [pc, #64]	; (80018c0 <_sbrk+0x64>)
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4413      	add	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	429a      	cmp	r2, r3
 800188a:	d207      	bcs.n	800189c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800188c:	f001 fd5c 	bl	8003348 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	220c      	movs	r2, #12
 8001894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	e009      	b.n	80018b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <_sbrk+0x64>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <_sbrk+0x64>)
 80018ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ae:	68fb      	ldr	r3, [r7, #12]
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3718      	adds	r7, #24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20018000 	.word	0x20018000
 80018bc:	00000400 	.word	0x00000400
 80018c0:	20000128 	.word	0x20000128
 80018c4:	20000140 	.word	0x20000140

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80018ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001924 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018f0:	480d      	ldr	r0, [pc, #52]	; (8001928 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80018f2:	490e      	ldr	r1, [pc, #56]	; (800192c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018f8:	e002      	b.n	8001900 <LoopCopyDataInit>

080018fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018fe:	3304      	adds	r3, #4

08001900 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001900:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001902:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001904:	d3f9      	bcc.n	80018fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001906:	4a0b      	ldr	r2, [pc, #44]	; (8001934 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001908:	4c0b      	ldr	r4, [pc, #44]	; (8001938 <LoopFillZerobss+0x26>)
  movs r3, #0
 800190a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800190c:	e001      	b.n	8001912 <LoopFillZerobss>

0800190e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800190e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001910:	3204      	adds	r2, #4

08001912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001912:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001914:	d3fb      	bcc.n	800190e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001916:	f7ff ffd7 	bl	80018c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800191a:	f001 fd1b 	bl	8003354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800191e:	f7ff fcef 	bl	8001300 <main>
  bx  lr    
 8001922:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001924:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001928:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800192c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001930:	080041e4 	.word	0x080041e4
  ldr r2, =_sbss
 8001934:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001938:	20000140 	.word	0x20000140

0800193c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800193c:	e7fe      	b.n	800193c <ADC_IRQHandler>
	...

08001940 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001944:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_Init+0x40>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a0d      	ldr	r2, [pc, #52]	; (8001980 <HAL_Init+0x40>)
 800194a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800194e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_Init+0x40>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_Init+0x40>)
 8001956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800195a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800195c:	4b08      	ldr	r3, [pc, #32]	; (8001980 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a07      	ldr	r2, [pc, #28]	; (8001980 <HAL_Init+0x40>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001968:	2003      	movs	r0, #3
 800196a:	f000 f931 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800196e:	2000      	movs	r0, #0
 8001970:	f000 f808 	bl	8001984 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001974:	f7ff fe90 	bl	8001698 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023c00 	.word	0x40023c00

08001984 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <HAL_InitTick+0x54>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <HAL_InitTick+0x58>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	4619      	mov	r1, r3
 8001996:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800199a:	fbb3 f3f1 	udiv	r3, r3, r1
 800199e:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f93b 	bl	8001c1e <HAL_SYSTICK_Config>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00e      	b.n	80019d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b0f      	cmp	r3, #15
 80019b6:	d80a      	bhi.n	80019ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019b8:	2200      	movs	r2, #0
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f000 f911 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019c4:	4a06      	ldr	r2, [pc, #24]	; (80019e0 <HAL_InitTick+0x5c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e000      	b.n	80019d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20000000 	.word	0x20000000
 80019dc:	20000008 	.word	0x20000008
 80019e0:	20000004 	.word	0x20000004

080019e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <HAL_IncTick+0x20>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <HAL_IncTick+0x24>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	4a04      	ldr	r2, [pc, #16]	; (8001a08 <HAL_IncTick+0x24>)
 80019f6:	6013      	str	r3, [r2, #0]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000008 	.word	0x20000008
 8001a08:	2000012c 	.word	0x2000012c

08001a0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a10:	4b03      	ldr	r3, [pc, #12]	; (8001a20 <HAL_GetTick+0x14>)
 8001a12:	681b      	ldr	r3, [r3, #0]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	2000012c 	.word	0x2000012c

08001a24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff ffee 	bl	8001a0c <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a3c:	d005      	beq.n	8001a4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_Delay+0x44>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	461a      	mov	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	4413      	add	r3, r2
 8001a48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a4a:	bf00      	nop
 8001a4c:	f7ff ffde 	bl	8001a0c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d8f7      	bhi.n	8001a4c <HAL_Delay+0x28>
  {
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000008 	.word	0x20000008

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff47 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff5c 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7ff ffb0 	bl	8001b8c <SysTick_Config>
 8001c2c:	4603      	mov	r3, r0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c46:	2300      	movs	r3, #0
 8001c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
 8001c52:	e159      	b.n	8001f08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c54:	2201      	movs	r2, #1
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8148 	bne.w	8001f02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d005      	beq.n	8001c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d130      	bne.n	8001cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	2203      	movs	r2, #3
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 0201 	and.w	r2, r3, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	d017      	beq.n	8001d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	2203      	movs	r2, #3
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f003 0303 	and.w	r3, r3, #3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d123      	bne.n	8001d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	08da      	lsrs	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3208      	adds	r2, #8
 8001d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691a      	ldr	r2, [r3, #16]
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	08da      	lsrs	r2, r3, #3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	3208      	adds	r2, #8
 8001d76:	69b9      	ldr	r1, [r7, #24]
 8001d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	2203      	movs	r2, #3
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	69ba      	ldr	r2, [r7, #24]
 8001d90:	4013      	ands	r3, r2
 8001d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f003 0203 	and.w	r2, r3, #3
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a2 	beq.w	8001f02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	4b57      	ldr	r3, [pc, #348]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	4a56      	ldr	r2, [pc, #344]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dce:	4b54      	ldr	r3, [pc, #336]	; (8001f20 <HAL_GPIO_Init+0x2e8>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dda:	4a52      	ldr	r2, [pc, #328]	; (8001f24 <HAL_GPIO_Init+0x2ec>)
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	089b      	lsrs	r3, r3, #2
 8001de0:	3302      	adds	r3, #2
 8001de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a49      	ldr	r2, [pc, #292]	; (8001f28 <HAL_GPIO_Init+0x2f0>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d019      	beq.n	8001e3a <HAL_GPIO_Init+0x202>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a48      	ldr	r2, [pc, #288]	; (8001f2c <HAL_GPIO_Init+0x2f4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0x1fe>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a47      	ldr	r2, [pc, #284]	; (8001f30 <HAL_GPIO_Init+0x2f8>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <HAL_GPIO_Init+0x1fa>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a46      	ldr	r2, [pc, #280]	; (8001f34 <HAL_GPIO_Init+0x2fc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d007      	beq.n	8001e2e <HAL_GPIO_Init+0x1f6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a45      	ldr	r2, [pc, #276]	; (8001f38 <HAL_GPIO_Init+0x300>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d101      	bne.n	8001e2a <HAL_GPIO_Init+0x1f2>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e008      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x204>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	f002 0203 	and.w	r2, r2, #3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4093      	lsls	r3, r2
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e4c:	4935      	ldr	r1, [pc, #212]	; (8001f24 <HAL_GPIO_Init+0x2ec>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e5a:	4b38      	ldr	r3, [pc, #224]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e7e:	4a2f      	ldr	r2, [pc, #188]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ea8:	4a24      	ldr	r2, [pc, #144]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001efc:	4a0f      	ldr	r2, [pc, #60]	; (8001f3c <HAL_GPIO_Init+0x304>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f67f aea2 	bls.w	8001c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40013800 	.word	0x40013800
 8001f28:	40020000 	.word	0x40020000
 8001f2c:	40020400 	.word	0x40020400
 8001f30:	40020800 	.word	0x40020800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40013c00 	.word	0x40013c00

08001f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	460b      	mov	r3, r1
 8001f4a:	807b      	strh	r3, [r7, #2]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f50:	787b      	ldrb	r3, [r7, #1]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f56:	887a      	ldrh	r2, [r7, #2]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f5c:	e003      	b.n	8001f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f5e:	887b      	ldrh	r3, [r7, #2]
 8001f60:	041a      	lsls	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	619a      	str	r2, [r3, #24]
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e267      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d075      	beq.n	800207e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f92:	4b88      	ldr	r3, [pc, #544]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b04      	cmp	r3, #4
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9e:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d112      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001faa:	4b82      	ldr	r3, [pc, #520]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fb6:	d10b      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fb8:	4b7e      	ldr	r3, [pc, #504]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d05b      	beq.n	800207c <HAL_RCC_OscConfig+0x108>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d157      	bne.n	800207c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e242      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fd8:	d106      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x74>
 8001fda:	4b76      	ldr	r3, [pc, #472]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a75      	ldr	r2, [pc, #468]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e01d      	b.n	8002024 <HAL_RCC_OscConfig+0xb0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ff0:	d10c      	bne.n	800200c <HAL_RCC_OscConfig+0x98>
 8001ff2:	4b70      	ldr	r3, [pc, #448]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a6f      	ldr	r2, [pc, #444]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8001ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ffc:	6013      	str	r3, [r2, #0]
 8001ffe:	4b6d      	ldr	r3, [pc, #436]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a6c      	ldr	r2, [pc, #432]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002008:	6013      	str	r3, [r2, #0]
 800200a:	e00b      	b.n	8002024 <HAL_RCC_OscConfig+0xb0>
 800200c:	4b69      	ldr	r3, [pc, #420]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a68      	ldr	r2, [pc, #416]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	4b66      	ldr	r3, [pc, #408]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a65      	ldr	r2, [pc, #404]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 800201e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d013      	beq.n	8002054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800202c:	f7ff fcee 	bl	8001a0c <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002034:	f7ff fcea 	bl	8001a0c <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	; 0x64
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e207      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002046:	4b5b      	ldr	r3, [pc, #364]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0xc0>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002054:	f7ff fcda 	bl	8001a0c <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fcd6 	bl	8001a0c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	; 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e1f3      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800206e:	4b51      	ldr	r3, [pc, #324]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0xe8>
 800207a:	e000      	b.n	800207e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800207c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d063      	beq.n	8002152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208a:	4b4a      	ldr	r3, [pc, #296]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 030c 	and.w	r3, r3, #12
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00b      	beq.n	80020ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d11c      	bne.n	80020dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80020a2:	4b44      	ldr	r3, [pc, #272]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d116      	bne.n	80020dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_RCC_OscConfig+0x152>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d001      	beq.n	80020c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e1c7      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020c6:	4b3b      	ldr	r3, [pc, #236]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4937      	ldr	r1, [pc, #220]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020da:	e03a      	b.n	8002152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d020      	beq.n	8002126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020e4:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_RCC_OscConfig+0x244>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ea:	f7ff fc8f 	bl	8001a0c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f2:	f7ff fc8b 	bl	8001a0c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1a8      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d0f0      	beq.n	80020f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002110:	4b28      	ldr	r3, [pc, #160]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4925      	ldr	r1, [pc, #148]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]
 8002124:	e015      	b.n	8002152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <HAL_RCC_OscConfig+0x244>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fc6e 	bl	8001a0c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002134:	f7ff fc6a 	bl	8001a0c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e187      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d036      	beq.n	80021cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d016      	beq.n	8002194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002166:	4b15      	ldr	r3, [pc, #84]	; (80021bc <HAL_RCC_OscConfig+0x248>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800216c:	f7ff fc4e 	bl	8001a0c <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002174:	f7ff fc4a 	bl	8001a0c <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e167      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <HAL_RCC_OscConfig+0x240>)
 8002188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x200>
 8002192:	e01b      	b.n	80021cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <HAL_RCC_OscConfig+0x248>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800219a:	f7ff fc37 	bl	8001a0c <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021a0:	e00e      	b.n	80021c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021a2:	f7ff fc33 	bl	8001a0c <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d907      	bls.n	80021c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e150      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
 80021b4:	40023800 	.word	0x40023800
 80021b8:	42470000 	.word	0x42470000
 80021bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021c0:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1ea      	bne.n	80021a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8097 	beq.w	8002308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021de:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b7d      	ldr	r3, [pc, #500]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	4a7c      	ldr	r2, [pc, #496]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021f8:	6413      	str	r3, [r2, #64]	; 0x40
 80021fa:	4b7a      	ldr	r3, [pc, #488]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002206:	2301      	movs	r3, #1
 8002208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800220a:	4b77      	ldr	r3, [pc, #476]	; (80023e8 <HAL_RCC_OscConfig+0x474>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002216:	4b74      	ldr	r3, [pc, #464]	; (80023e8 <HAL_RCC_OscConfig+0x474>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a73      	ldr	r2, [pc, #460]	; (80023e8 <HAL_RCC_OscConfig+0x474>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002222:	f7ff fbf3 	bl	8001a0c <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800222a:	f7ff fbef 	bl	8001a0c <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e10c      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800223c:	4b6a      	ldr	r3, [pc, #424]	; (80023e8 <HAL_RCC_OscConfig+0x474>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d106      	bne.n	800225e <HAL_RCC_OscConfig+0x2ea>
 8002250:	4b64      	ldr	r3, [pc, #400]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a63      	ldr	r2, [pc, #396]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002256:	f043 0301 	orr.w	r3, r3, #1
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
 800225c:	e01c      	b.n	8002298 <HAL_RCC_OscConfig+0x324>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	2b05      	cmp	r3, #5
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0x30c>
 8002266:	4b5f      	ldr	r3, [pc, #380]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a5e      	ldr	r2, [pc, #376]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	4b5c      	ldr	r3, [pc, #368]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a5b      	ldr	r2, [pc, #364]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0x324>
 8002280:	4b58      	ldr	r3, [pc, #352]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002284:	4a57      	ldr	r2, [pc, #348]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002286:	f023 0301 	bic.w	r3, r3, #1
 800228a:	6713      	str	r3, [r2, #112]	; 0x70
 800228c:	4b55      	ldr	r3, [pc, #340]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 800228e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002290:	4a54      	ldr	r2, [pc, #336]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002292:	f023 0304 	bic.w	r3, r3, #4
 8002296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d015      	beq.n	80022cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022a0:	f7ff fbb4 	bl	8001a0c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a6:	e00a      	b.n	80022be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022a8:	f7ff fbb0 	bl	8001a0c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d901      	bls.n	80022be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022ba:	2303      	movs	r3, #3
 80022bc:	e0cb      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022be:	4b49      	ldr	r3, [pc, #292]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d0ee      	beq.n	80022a8 <HAL_RCC_OscConfig+0x334>
 80022ca:	e014      	b.n	80022f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fb9e 	bl	8001a0c <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d2:	e00a      	b.n	80022ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022d4:	f7ff fb9a 	bl	8001a0c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	f241 3288 	movw	r2, #5000	; 0x1388
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e0b5      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ea:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1ee      	bne.n	80022d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022f6:	7dfb      	ldrb	r3, [r7, #23]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d105      	bne.n	8002308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4a38      	ldr	r2, [pc, #224]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 80a1 	beq.w	8002454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002312:	4b34      	ldr	r3, [pc, #208]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b08      	cmp	r3, #8
 800231c:	d05c      	beq.n	80023d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b02      	cmp	r3, #2
 8002324:	d141      	bne.n	80023aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002326:	4b31      	ldr	r3, [pc, #196]	; (80023ec <HAL_RCC_OscConfig+0x478>)
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fb6e 	bl	8001a0c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7ff fb6a 	bl	8001a0c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e087      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002346:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69da      	ldr	r2, [r3, #28]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	431a      	orrs	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	019b      	lsls	r3, r3, #6
 8002362:	431a      	orrs	r2, r3
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002368:	085b      	lsrs	r3, r3, #1
 800236a:	3b01      	subs	r3, #1
 800236c:	041b      	lsls	r3, r3, #16
 800236e:	431a      	orrs	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	061b      	lsls	r3, r3, #24
 8002376:	491b      	ldr	r1, [pc, #108]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800237c:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_OscConfig+0x478>)
 800237e:	2201      	movs	r2, #1
 8002380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002382:	f7ff fb43 	bl	8001a0c <HAL_GetTick>
 8002386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800238a:	f7ff fb3f 	bl	8001a0c <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e05c      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800239c:	4b11      	ldr	r3, [pc, #68]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d0f0      	beq.n	800238a <HAL_RCC_OscConfig+0x416>
 80023a8:	e054      	b.n	8002454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <HAL_RCC_OscConfig+0x478>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b0:	f7ff fb2c 	bl	8001a0c <HAL_GetTick>
 80023b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023b8:	f7ff fb28 	bl	8001a0c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e045      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_OscConfig+0x470>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f0      	bne.n	80023b8 <HAL_RCC_OscConfig+0x444>
 80023d6:	e03d      	b.n	8002454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d107      	bne.n	80023f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e038      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
 80023e4:	40023800 	.word	0x40023800
 80023e8:	40007000 	.word	0x40007000
 80023ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <HAL_RCC_OscConfig+0x4ec>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d028      	beq.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002408:	429a      	cmp	r2, r3
 800240a:	d121      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002416:	429a      	cmp	r2, r3
 8002418:	d11a      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002420:	4013      	ands	r3, r2
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002428:	4293      	cmp	r3, r2
 800242a:	d111      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002436:	085b      	lsrs	r3, r3, #1
 8002438:	3b01      	subs	r3, #1
 800243a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d107      	bne.n	8002450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	40023800 	.word	0x40023800

08002464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0cc      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002478:	4b68      	ldr	r3, [pc, #416]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	429a      	cmp	r2, r3
 8002484:	d90c      	bls.n	80024a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002486:	4b65      	ldr	r3, [pc, #404]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b63      	ldr	r3, [pc, #396]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e0b8      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0302 	and.w	r3, r3, #2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d020      	beq.n	80024ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d005      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a58      	ldr	r2, [pc, #352]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0308 	and.w	r3, r3, #8
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4a52      	ldr	r2, [pc, #328]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	494d      	ldr	r1, [pc, #308]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d044      	beq.n	8002584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d107      	bne.n	8002512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	4b47      	ldr	r3, [pc, #284]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d119      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e07f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	2b02      	cmp	r3, #2
 8002518:	d003      	beq.n	8002522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800251e:	2b03      	cmp	r3, #3
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002522:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e06f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d101      	bne.n	8002542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e067      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002542:	4b37      	ldr	r3, [pc, #220]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f023 0203 	bic.w	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	4934      	ldr	r1, [pc, #208]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002550:	4313      	orrs	r3, r2
 8002552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002554:	f7ff fa5a 	bl	8001a0c <HAL_GetTick>
 8002558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	e00a      	b.n	8002572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800255c:	f7ff fa56 	bl	8001a0c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	f241 3288 	movw	r2, #5000	; 0x1388
 800256a:	4293      	cmp	r3, r2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e04f      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	4b2b      	ldr	r3, [pc, #172]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 020c 	and.w	r2, r3, #12
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	429a      	cmp	r2, r3
 8002582:	d1eb      	bne.n	800255c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002584:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d20c      	bcs.n	80025ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b22      	ldr	r3, [pc, #136]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e032      	b.n	8002612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d008      	beq.n	80025ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025b8:	4b19      	ldr	r3, [pc, #100]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	4916      	ldr	r1, [pc, #88]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d009      	beq.n	80025ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025d6:	4b12      	ldr	r3, [pc, #72]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	490e      	ldr	r1, [pc, #56]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ea:	f000 f821 	bl	8002630 <HAL_RCC_GetSysClockFreq>
 80025ee:	4602      	mov	r2, r0
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_RCC_ClockConfig+0x1bc>)
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	091b      	lsrs	r3, r3, #4
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	490a      	ldr	r1, [pc, #40]	; (8002624 <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	5ccb      	ldrb	r3, [r1, r3]
 80025fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002602:	4a09      	ldr	r2, [pc, #36]	; (8002628 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002606:	4b09      	ldr	r3, [pc, #36]	; (800262c <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff f9ba 	bl	8001984 <HAL_InitTick>

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023c00 	.word	0x40023c00
 8002620:	40023800 	.word	0x40023800
 8002624:	08004188 	.word	0x08004188
 8002628:	20000000 	.word	0x20000000
 800262c:	20000004 	.word	0x20000004

08002630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002634:	b094      	sub	sp, #80	; 0x50
 8002636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	647b      	str	r3, [r7, #68]	; 0x44
 800263c:	2300      	movs	r3, #0
 800263e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002640:	2300      	movs	r3, #0
 8002642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002648:	4b79      	ldr	r3, [pc, #484]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 030c 	and.w	r3, r3, #12
 8002650:	2b08      	cmp	r3, #8
 8002652:	d00d      	beq.n	8002670 <HAL_RCC_GetSysClockFreq+0x40>
 8002654:	2b08      	cmp	r3, #8
 8002656:	f200 80e1 	bhi.w	800281c <HAL_RCC_GetSysClockFreq+0x1ec>
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_RCC_GetSysClockFreq+0x34>
 800265e:	2b04      	cmp	r3, #4
 8002660:	d003      	beq.n	800266a <HAL_RCC_GetSysClockFreq+0x3a>
 8002662:	e0db      	b.n	800281c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002664:	4b73      	ldr	r3, [pc, #460]	; (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 8002666:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002668:	e0db      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800266a:	4b73      	ldr	r3, [pc, #460]	; (8002838 <HAL_RCC_GetSysClockFreq+0x208>)
 800266c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800266e:	e0d8      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002670:	4b6f      	ldr	r3, [pc, #444]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800267a:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d063      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002686:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	099b      	lsrs	r3, r3, #6
 800268c:	2200      	movs	r2, #0
 800268e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002698:	633b      	str	r3, [r7, #48]	; 0x30
 800269a:	2300      	movs	r3, #0
 800269c:	637b      	str	r3, [r7, #52]	; 0x34
 800269e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80026a2:	4622      	mov	r2, r4
 80026a4:	462b      	mov	r3, r5
 80026a6:	f04f 0000 	mov.w	r0, #0
 80026aa:	f04f 0100 	mov.w	r1, #0
 80026ae:	0159      	lsls	r1, r3, #5
 80026b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026b4:	0150      	lsls	r0, r2, #5
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4621      	mov	r1, r4
 80026bc:	1a51      	subs	r1, r2, r1
 80026be:	6139      	str	r1, [r7, #16]
 80026c0:	4629      	mov	r1, r5
 80026c2:	eb63 0301 	sbc.w	r3, r3, r1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	f04f 0300 	mov.w	r3, #0
 80026d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026d4:	4659      	mov	r1, fp
 80026d6:	018b      	lsls	r3, r1, #6
 80026d8:	4651      	mov	r1, sl
 80026da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026de:	4651      	mov	r1, sl
 80026e0:	018a      	lsls	r2, r1, #6
 80026e2:	4651      	mov	r1, sl
 80026e4:	ebb2 0801 	subs.w	r8, r2, r1
 80026e8:	4659      	mov	r1, fp
 80026ea:	eb63 0901 	sbc.w	r9, r3, r1
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002702:	4690      	mov	r8, r2
 8002704:	4699      	mov	r9, r3
 8002706:	4623      	mov	r3, r4
 8002708:	eb18 0303 	adds.w	r3, r8, r3
 800270c:	60bb      	str	r3, [r7, #8]
 800270e:	462b      	mov	r3, r5
 8002710:	eb49 0303 	adc.w	r3, r9, r3
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002722:	4629      	mov	r1, r5
 8002724:	024b      	lsls	r3, r1, #9
 8002726:	4621      	mov	r1, r4
 8002728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800272c:	4621      	mov	r1, r4
 800272e:	024a      	lsls	r2, r1, #9
 8002730:	4610      	mov	r0, r2
 8002732:	4619      	mov	r1, r3
 8002734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002736:	2200      	movs	r2, #0
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
 800273a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800273c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002740:	f7fd ffe2 	bl	8000708 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4613      	mov	r3, r2
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800274c:	e058      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274e:	4b38      	ldr	r3, [pc, #224]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	099b      	lsrs	r3, r3, #6
 8002754:	2200      	movs	r2, #0
 8002756:	4618      	mov	r0, r3
 8002758:	4611      	mov	r1, r2
 800275a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800275e:	623b      	str	r3, [r7, #32]
 8002760:	2300      	movs	r3, #0
 8002762:	627b      	str	r3, [r7, #36]	; 0x24
 8002764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002768:	4642      	mov	r2, r8
 800276a:	464b      	mov	r3, r9
 800276c:	f04f 0000 	mov.w	r0, #0
 8002770:	f04f 0100 	mov.w	r1, #0
 8002774:	0159      	lsls	r1, r3, #5
 8002776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800277a:	0150      	lsls	r0, r2, #5
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4641      	mov	r1, r8
 8002782:	ebb2 0a01 	subs.w	sl, r2, r1
 8002786:	4649      	mov	r1, r9
 8002788:	eb63 0b01 	sbc.w	fp, r3, r1
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800279c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80027a0:	ebb2 040a 	subs.w	r4, r2, sl
 80027a4:	eb63 050b 	sbc.w	r5, r3, fp
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	00eb      	lsls	r3, r5, #3
 80027b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027b6:	00e2      	lsls	r2, r4, #3
 80027b8:	4614      	mov	r4, r2
 80027ba:	461d      	mov	r5, r3
 80027bc:	4643      	mov	r3, r8
 80027be:	18e3      	adds	r3, r4, r3
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	464b      	mov	r3, r9
 80027c4:	eb45 0303 	adc.w	r3, r5, r3
 80027c8:	607b      	str	r3, [r7, #4]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027d6:	4629      	mov	r1, r5
 80027d8:	028b      	lsls	r3, r1, #10
 80027da:	4621      	mov	r1, r4
 80027dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e0:	4621      	mov	r1, r4
 80027e2:	028a      	lsls	r2, r1, #10
 80027e4:	4610      	mov	r0, r2
 80027e6:	4619      	mov	r1, r3
 80027e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ea:	2200      	movs	r2, #0
 80027ec:	61bb      	str	r3, [r7, #24]
 80027ee:	61fa      	str	r2, [r7, #28]
 80027f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027f4:	f7fd ff88 	bl	8000708 <__aeabi_uldivmod>
 80027f8:	4602      	mov	r2, r0
 80027fa:	460b      	mov	r3, r1
 80027fc:	4613      	mov	r3, r2
 80027fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002800:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_GetSysClockFreq+0x200>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0c1b      	lsrs	r3, r3, #16
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	3301      	adds	r3, #1
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002814:	fbb2 f3f3 	udiv	r3, r2, r3
 8002818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800281a:	e002      	b.n	8002822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800281c:	4b05      	ldr	r3, [pc, #20]	; (8002834 <HAL_RCC_GetSysClockFreq+0x204>)
 800281e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002824:	4618      	mov	r0, r3
 8002826:	3750      	adds	r7, #80	; 0x50
 8002828:	46bd      	mov	sp, r7
 800282a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	00f42400 	.word	0x00f42400
 8002838:	007a1200 	.word	0x007a1200

0800283c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002840:	4b03      	ldr	r3, [pc, #12]	; (8002850 <HAL_RCC_GetHCLKFreq+0x14>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	20000000 	.word	0x20000000

08002854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002858:	f7ff fff0 	bl	800283c <HAL_RCC_GetHCLKFreq>
 800285c:	4602      	mov	r2, r0
 800285e:	4b05      	ldr	r3, [pc, #20]	; (8002874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	0a9b      	lsrs	r3, r3, #10
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	4903      	ldr	r1, [pc, #12]	; (8002878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800286a:	5ccb      	ldrb	r3, [r1, r3]
 800286c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40023800 	.word	0x40023800
 8002878:	08004198 	.word	0x08004198

0800287c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002880:	f7ff ffdc 	bl	800283c <HAL_RCC_GetHCLKFreq>
 8002884:	4602      	mov	r2, r0
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	0b5b      	lsrs	r3, r3, #13
 800288c:	f003 0307 	and.w	r3, r3, #7
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002892:	5ccb      	ldrb	r3, [r1, r3]
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002898:	4618      	mov	r0, r3
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	08004198 	.word	0x08004198

080028a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e07b      	b.n	80029ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d108      	bne.n	80028d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028c6:	d009      	beq.n	80028dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
 80028ce:	e005      	b.n	80028dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d106      	bne.n	80028fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe fef6 	bl	80016e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002924:	431a      	orrs	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	f003 0301 	and.w	r3, r3, #1
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002960:	ea42 0103 	orr.w	r1, r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002968:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	430a      	orrs	r2, r1
 8002972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	0c1b      	lsrs	r3, r3, #16
 800297a:	f003 0104 	and.w	r1, r3, #4
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f003 0210 	and.w	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800299c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b088      	sub	sp, #32
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60f8      	str	r0, [r7, #12]
 80029be:	60b9      	str	r1, [r7, #8]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	4613      	mov	r3, r2
 80029c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <HAL_SPI_Transmit+0x22>
 80029d4:	2302      	movs	r3, #2
 80029d6:	e126      	b.n	8002c26 <HAL_SPI_Transmit+0x270>
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029e0:	f7ff f814 	bl	8001a0c <HAL_GetTick>
 80029e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d002      	beq.n	80029fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
 80029f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029fa:	e10b      	b.n	8002c14 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d002      	beq.n	8002a08 <HAL_SPI_Transmit+0x52>
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a0c:	e102      	b.n	8002c14 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2203      	movs	r2, #3
 8002a12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	88fa      	ldrh	r2, [r7, #6]
 8002a26:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	88fa      	ldrh	r2, [r7, #6]
 8002a2c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2200      	movs	r2, #0
 8002a32:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2200      	movs	r2, #0
 8002a44:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a54:	d10f      	bne.n	8002a76 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a80:	2b40      	cmp	r3, #64	; 0x40
 8002a82:	d007      	beq.n	8002a94 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a9c:	d14b      	bne.n	8002b36 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <HAL_SPI_Transmit+0xf6>
 8002aa6:	8afb      	ldrh	r3, [r7, #22]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d13e      	bne.n	8002b2a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab0:	881a      	ldrh	r2, [r3, #0]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abc:	1c9a      	adds	r2, r3, #2
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ad0:	e02b      	b.n	8002b2a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d112      	bne.n	8002b06 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	1c9a      	adds	r2, r3, #2
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3b01      	subs	r3, #1
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	86da      	strh	r2, [r3, #54]	; 0x36
 8002b04:	e011      	b.n	8002b2a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b06:	f7fe ff81 	bl	8001a0c <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d803      	bhi.n	8002b1e <HAL_SPI_Transmit+0x168>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b1c:	d102      	bne.n	8002b24 <HAL_SPI_Transmit+0x16e>
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d102      	bne.n	8002b2a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002b28:	e074      	b.n	8002c14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ce      	bne.n	8002ad2 <HAL_SPI_Transmit+0x11c>
 8002b34:	e04c      	b.n	8002bd0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d002      	beq.n	8002b44 <HAL_SPI_Transmit+0x18e>
 8002b3e:	8afb      	ldrh	r3, [r7, #22]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d140      	bne.n	8002bc6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	7812      	ldrb	r2, [r2, #0]
 8002b50:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002b6a:	e02c      	b.n	8002bc6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d113      	bne.n	8002ba2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	330c      	adds	r3, #12
 8002b84:	7812      	ldrb	r2, [r2, #0]
 8002b86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ba0:	e011      	b.n	8002bc6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ba2:	f7fe ff33 	bl	8001a0c <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	683a      	ldr	r2, [r7, #0]
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d803      	bhi.n	8002bba <HAL_SPI_Transmit+0x204>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb8:	d102      	bne.n	8002bc0 <HAL_SPI_Transmit+0x20a>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d102      	bne.n	8002bc6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002bc4:	e026      	b.n	8002c14 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1cd      	bne.n	8002b6c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	6839      	ldr	r1, [r7, #0]
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	f000 f8b3 	bl	8002d40 <SPI_EndRxTxTransaction>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d002      	beq.n	8002be6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	613b      	str	r3, [r7, #16]
 8002c02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e000      	b.n	8002c14 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002c12:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002c24:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3720      	adds	r7, #32
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	603b      	str	r3, [r7, #0]
 8002c3c:	4613      	mov	r3, r2
 8002c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c40:	f7fe fee4 	bl	8001a0c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002c50:	f7fe fedc 	bl	8001a0c <HAL_GetTick>
 8002c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c56:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	015b      	lsls	r3, r3, #5
 8002c5c:	0d1b      	lsrs	r3, r3, #20
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	fb02 f303 	mul.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c66:	e054      	b.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6e:	d050      	beq.n	8002d12 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c70:	f7fe fecc 	bl	8001a0c <HAL_GetTick>
 8002c74:	4602      	mov	r2, r0
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d902      	bls.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d13d      	bne.n	8002d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c9e:	d111      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca8:	d004      	beq.n	8002cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cb2:	d107      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ccc:	d10f      	bne.n	8002cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e017      	b.n	8002d32 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d101      	bne.n	8002d0c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d19b      	bne.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3720      	adds	r7, #32
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000000 	.word	0x20000000

08002d40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af02      	add	r7, sp, #8
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <SPI_EndRxTxTransaction+0x7c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <SPI_EndRxTxTransaction+0x80>)
 8002d52:	fba2 2303 	umull	r2, r3, r2, r3
 8002d56:	0d5b      	lsrs	r3, r3, #21
 8002d58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d5c:	fb02 f303 	mul.w	r3, r2, r3
 8002d60:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d6a:	d112      	bne.n	8002d92 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f7ff ff5a 	bl	8002c30 <SPI_WaitFlagStateUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f043 0220 	orr.w	r2, r3, #32
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e00f      	b.n	8002db2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da8:	2b80      	cmp	r3, #128	; 0x80
 8002daa:	d0f2      	beq.n	8002d92 <SPI_EndRxTxTransaction+0x52>
 8002dac:	e000      	b.n	8002db0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002dae:	bf00      	nop
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	165e9f81 	.word	0x165e9f81

08002dc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e03f      	b.n	8002e56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7fe fcc4 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2224      	movs	r2, #36	; 0x24
 8002df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f829 	bl	8002e60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	695a      	ldr	r2, [r3, #20]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e64:	b0c0      	sub	sp, #256	; 0x100
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7c:	68d9      	ldr	r1, [r3, #12]
 8002e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	ea40 0301 	orr.w	r3, r0, r1
 8002e88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	431a      	orrs	r2, r3
 8002e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	431a      	orrs	r2, r3
 8002ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002eb8:	f021 010c 	bic.w	r1, r1, #12
 8002ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ec6:	430b      	orrs	r3, r1
 8002ec8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002eca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eda:	6999      	ldr	r1, [r3, #24]
 8002edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	ea40 0301 	orr.w	r3, r0, r1
 8002ee6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	4b8f      	ldr	r3, [pc, #572]	; (800312c <UART_SetConfig+0x2cc>)
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d005      	beq.n	8002f00 <UART_SetConfig+0xa0>
 8002ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	4b8d      	ldr	r3, [pc, #564]	; (8003130 <UART_SetConfig+0x2d0>)
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d104      	bne.n	8002f0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002f00:	f7ff fcbc 	bl	800287c <HAL_RCC_GetPCLK2Freq>
 8002f04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f08:	e003      	b.n	8002f12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f0a:	f7ff fca3 	bl	8002854 <HAL_RCC_GetPCLK1Freq>
 8002f0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f16:	69db      	ldr	r3, [r3, #28]
 8002f18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f1c:	f040 810c 	bne.w	8003138 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f32:	4622      	mov	r2, r4
 8002f34:	462b      	mov	r3, r5
 8002f36:	1891      	adds	r1, r2, r2
 8002f38:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f3a:	415b      	adcs	r3, r3
 8002f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f42:	4621      	mov	r1, r4
 8002f44:	eb12 0801 	adds.w	r8, r2, r1
 8002f48:	4629      	mov	r1, r5
 8002f4a:	eb43 0901 	adc.w	r9, r3, r1
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f62:	4690      	mov	r8, r2
 8002f64:	4699      	mov	r9, r3
 8002f66:	4623      	mov	r3, r4
 8002f68:	eb18 0303 	adds.w	r3, r8, r3
 8002f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f70:	462b      	mov	r3, r5
 8002f72:	eb49 0303 	adc.w	r3, r9, r3
 8002f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f8e:	460b      	mov	r3, r1
 8002f90:	18db      	adds	r3, r3, r3
 8002f92:	653b      	str	r3, [r7, #80]	; 0x50
 8002f94:	4613      	mov	r3, r2
 8002f96:	eb42 0303 	adc.w	r3, r2, r3
 8002f9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002f9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002fa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fa4:	f7fd fbb0 	bl	8000708 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4b61      	ldr	r3, [pc, #388]	; (8003134 <UART_SetConfig+0x2d4>)
 8002fae:	fba3 2302 	umull	r2, r3, r3, r2
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	011c      	lsls	r4, r3, #4
 8002fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fc0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fd8:	4641      	mov	r1, r8
 8002fda:	eb12 0a01 	adds.w	sl, r2, r1
 8002fde:	4649      	mov	r1, r9
 8002fe0:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ff0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff8:	4692      	mov	sl, r2
 8002ffa:	469b      	mov	fp, r3
 8002ffc:	4643      	mov	r3, r8
 8002ffe:	eb1a 0303 	adds.w	r3, sl, r3
 8003002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003006:	464b      	mov	r3, r9
 8003008:	eb4b 0303 	adc.w	r3, fp, r3
 800300c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800301c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003020:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003024:	460b      	mov	r3, r1
 8003026:	18db      	adds	r3, r3, r3
 8003028:	643b      	str	r3, [r7, #64]	; 0x40
 800302a:	4613      	mov	r3, r2
 800302c:	eb42 0303 	adc.w	r3, r2, r3
 8003030:	647b      	str	r3, [r7, #68]	; 0x44
 8003032:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003036:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800303a:	f7fd fb65 	bl	8000708 <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4611      	mov	r1, r2
 8003044:	4b3b      	ldr	r3, [pc, #236]	; (8003134 <UART_SetConfig+0x2d4>)
 8003046:	fba3 2301 	umull	r2, r3, r3, r1
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2264      	movs	r2, #100	; 0x64
 800304e:	fb02 f303 	mul.w	r3, r2, r3
 8003052:	1acb      	subs	r3, r1, r3
 8003054:	00db      	lsls	r3, r3, #3
 8003056:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800305a:	4b36      	ldr	r3, [pc, #216]	; (8003134 <UART_SetConfig+0x2d4>)
 800305c:	fba3 2302 	umull	r2, r3, r3, r2
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003068:	441c      	add	r4, r3
 800306a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306e:	2200      	movs	r2, #0
 8003070:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003074:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003078:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800307c:	4642      	mov	r2, r8
 800307e:	464b      	mov	r3, r9
 8003080:	1891      	adds	r1, r2, r2
 8003082:	63b9      	str	r1, [r7, #56]	; 0x38
 8003084:	415b      	adcs	r3, r3
 8003086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003088:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800308c:	4641      	mov	r1, r8
 800308e:	1851      	adds	r1, r2, r1
 8003090:	6339      	str	r1, [r7, #48]	; 0x30
 8003092:	4649      	mov	r1, r9
 8003094:	414b      	adcs	r3, r1
 8003096:	637b      	str	r3, [r7, #52]	; 0x34
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030a4:	4659      	mov	r1, fp
 80030a6:	00cb      	lsls	r3, r1, #3
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030ae:	4651      	mov	r1, sl
 80030b0:	00ca      	lsls	r2, r1, #3
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	4603      	mov	r3, r0
 80030b8:	4642      	mov	r2, r8
 80030ba:	189b      	adds	r3, r3, r2
 80030bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030c0:	464b      	mov	r3, r9
 80030c2:	460a      	mov	r2, r1
 80030c4:	eb42 0303 	adc.w	r3, r2, r3
 80030c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030e0:	460b      	mov	r3, r1
 80030e2:	18db      	adds	r3, r3, r3
 80030e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e6:	4613      	mov	r3, r2
 80030e8:	eb42 0303 	adc.w	r3, r2, r3
 80030ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030f6:	f7fd fb07 	bl	8000708 <__aeabi_uldivmod>
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <UART_SetConfig+0x2d4>)
 8003100:	fba3 1302 	umull	r1, r3, r3, r2
 8003104:	095b      	lsrs	r3, r3, #5
 8003106:	2164      	movs	r1, #100	; 0x64
 8003108:	fb01 f303 	mul.w	r3, r1, r3
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	3332      	adds	r3, #50	; 0x32
 8003112:	4a08      	ldr	r2, [pc, #32]	; (8003134 <UART_SetConfig+0x2d4>)
 8003114:	fba2 2303 	umull	r2, r3, r2, r3
 8003118:	095b      	lsrs	r3, r3, #5
 800311a:	f003 0207 	and.w	r2, r3, #7
 800311e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4422      	add	r2, r4
 8003126:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003128:	e105      	b.n	8003336 <UART_SetConfig+0x4d6>
 800312a:	bf00      	nop
 800312c:	40011000 	.word	0x40011000
 8003130:	40011400 	.word	0x40011400
 8003134:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800313c:	2200      	movs	r2, #0
 800313e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003142:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003146:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800314a:	4642      	mov	r2, r8
 800314c:	464b      	mov	r3, r9
 800314e:	1891      	adds	r1, r2, r2
 8003150:	6239      	str	r1, [r7, #32]
 8003152:	415b      	adcs	r3, r3
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
 8003156:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800315a:	4641      	mov	r1, r8
 800315c:	1854      	adds	r4, r2, r1
 800315e:	4649      	mov	r1, r9
 8003160:	eb43 0501 	adc.w	r5, r3, r1
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	00eb      	lsls	r3, r5, #3
 800316e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003172:	00e2      	lsls	r2, r4, #3
 8003174:	4614      	mov	r4, r2
 8003176:	461d      	mov	r5, r3
 8003178:	4643      	mov	r3, r8
 800317a:	18e3      	adds	r3, r4, r3
 800317c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003180:	464b      	mov	r3, r9
 8003182:	eb45 0303 	adc.w	r3, r5, r3
 8003186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800318a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003196:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031a6:	4629      	mov	r1, r5
 80031a8:	008b      	lsls	r3, r1, #2
 80031aa:	4621      	mov	r1, r4
 80031ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031b0:	4621      	mov	r1, r4
 80031b2:	008a      	lsls	r2, r1, #2
 80031b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031b8:	f7fd faa6 	bl	8000708 <__aeabi_uldivmod>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4b60      	ldr	r3, [pc, #384]	; (8003344 <UART_SetConfig+0x4e4>)
 80031c2:	fba3 2302 	umull	r2, r3, r3, r2
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	011c      	lsls	r4, r3, #4
 80031ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ce:	2200      	movs	r2, #0
 80031d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031dc:	4642      	mov	r2, r8
 80031de:	464b      	mov	r3, r9
 80031e0:	1891      	adds	r1, r2, r2
 80031e2:	61b9      	str	r1, [r7, #24]
 80031e4:	415b      	adcs	r3, r3
 80031e6:	61fb      	str	r3, [r7, #28]
 80031e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ec:	4641      	mov	r1, r8
 80031ee:	1851      	adds	r1, r2, r1
 80031f0:	6139      	str	r1, [r7, #16]
 80031f2:	4649      	mov	r1, r9
 80031f4:	414b      	adcs	r3, r1
 80031f6:	617b      	str	r3, [r7, #20]
 80031f8:	f04f 0200 	mov.w	r2, #0
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003204:	4659      	mov	r1, fp
 8003206:	00cb      	lsls	r3, r1, #3
 8003208:	4651      	mov	r1, sl
 800320a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320e:	4651      	mov	r1, sl
 8003210:	00ca      	lsls	r2, r1, #3
 8003212:	4610      	mov	r0, r2
 8003214:	4619      	mov	r1, r3
 8003216:	4603      	mov	r3, r0
 8003218:	4642      	mov	r2, r8
 800321a:	189b      	adds	r3, r3, r2
 800321c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003220:	464b      	mov	r3, r9
 8003222:	460a      	mov	r2, r1
 8003224:	eb42 0303 	adc.w	r3, r2, r3
 8003228:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800322c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	67bb      	str	r3, [r7, #120]	; 0x78
 8003236:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003238:	f04f 0200 	mov.w	r2, #0
 800323c:	f04f 0300 	mov.w	r3, #0
 8003240:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003244:	4649      	mov	r1, r9
 8003246:	008b      	lsls	r3, r1, #2
 8003248:	4641      	mov	r1, r8
 800324a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324e:	4641      	mov	r1, r8
 8003250:	008a      	lsls	r2, r1, #2
 8003252:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003256:	f7fd fa57 	bl	8000708 <__aeabi_uldivmod>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4b39      	ldr	r3, [pc, #228]	; (8003344 <UART_SetConfig+0x4e4>)
 8003260:	fba3 1302 	umull	r1, r3, r3, r2
 8003264:	095b      	lsrs	r3, r3, #5
 8003266:	2164      	movs	r1, #100	; 0x64
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	3332      	adds	r3, #50	; 0x32
 8003272:	4a34      	ldr	r2, [pc, #208]	; (8003344 <UART_SetConfig+0x4e4>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	095b      	lsrs	r3, r3, #5
 800327a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327e:	441c      	add	r4, r3
 8003280:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003284:	2200      	movs	r2, #0
 8003286:	673b      	str	r3, [r7, #112]	; 0x70
 8003288:	677a      	str	r2, [r7, #116]	; 0x74
 800328a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800328e:	4642      	mov	r2, r8
 8003290:	464b      	mov	r3, r9
 8003292:	1891      	adds	r1, r2, r2
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	415b      	adcs	r3, r3
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800329e:	4641      	mov	r1, r8
 80032a0:	1851      	adds	r1, r2, r1
 80032a2:	6039      	str	r1, [r7, #0]
 80032a4:	4649      	mov	r1, r9
 80032a6:	414b      	adcs	r3, r1
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032b6:	4659      	mov	r1, fp
 80032b8:	00cb      	lsls	r3, r1, #3
 80032ba:	4651      	mov	r1, sl
 80032bc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032c0:	4651      	mov	r1, sl
 80032c2:	00ca      	lsls	r2, r1, #3
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	4603      	mov	r3, r0
 80032ca:	4642      	mov	r2, r8
 80032cc:	189b      	adds	r3, r3, r2
 80032ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80032d0:	464b      	mov	r3, r9
 80032d2:	460a      	mov	r2, r1
 80032d4:	eb42 0303 	adc.w	r3, r2, r3
 80032d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2200      	movs	r2, #0
 80032e2:	663b      	str	r3, [r7, #96]	; 0x60
 80032e4:	667a      	str	r2, [r7, #100]	; 0x64
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032f2:	4649      	mov	r1, r9
 80032f4:	008b      	lsls	r3, r1, #2
 80032f6:	4641      	mov	r1, r8
 80032f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fc:	4641      	mov	r1, r8
 80032fe:	008a      	lsls	r2, r1, #2
 8003300:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003304:	f7fd fa00 	bl	8000708 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4b0d      	ldr	r3, [pc, #52]	; (8003344 <UART_SetConfig+0x4e4>)
 800330e:	fba3 1302 	umull	r1, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2164      	movs	r1, #100	; 0x64
 8003316:	fb01 f303 	mul.w	r3, r1, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	; 0x32
 8003320:	4a08      	ldr	r2, [pc, #32]	; (8003344 <UART_SetConfig+0x4e4>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4422      	add	r2, r4
 8003334:	609a      	str	r2, [r3, #8]
}
 8003336:	bf00      	nop
 8003338:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800333c:	46bd      	mov	sp, r7
 800333e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003342:	bf00      	nop
 8003344:	51eb851f 	.word	0x51eb851f

08003348 <__errno>:
 8003348:	4b01      	ldr	r3, [pc, #4]	; (8003350 <__errno+0x8>)
 800334a:	6818      	ldr	r0, [r3, #0]
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	2000000c 	.word	0x2000000c

08003354 <__libc_init_array>:
 8003354:	b570      	push	{r4, r5, r6, lr}
 8003356:	4d0d      	ldr	r5, [pc, #52]	; (800338c <__libc_init_array+0x38>)
 8003358:	4c0d      	ldr	r4, [pc, #52]	; (8003390 <__libc_init_array+0x3c>)
 800335a:	1b64      	subs	r4, r4, r5
 800335c:	10a4      	asrs	r4, r4, #2
 800335e:	2600      	movs	r6, #0
 8003360:	42a6      	cmp	r6, r4
 8003362:	d109      	bne.n	8003378 <__libc_init_array+0x24>
 8003364:	4d0b      	ldr	r5, [pc, #44]	; (8003394 <__libc_init_array+0x40>)
 8003366:	4c0c      	ldr	r4, [pc, #48]	; (8003398 <__libc_init_array+0x44>)
 8003368:	f000 fc8e 	bl	8003c88 <_init>
 800336c:	1b64      	subs	r4, r4, r5
 800336e:	10a4      	asrs	r4, r4, #2
 8003370:	2600      	movs	r6, #0
 8003372:	42a6      	cmp	r6, r4
 8003374:	d105      	bne.n	8003382 <__libc_init_array+0x2e>
 8003376:	bd70      	pop	{r4, r5, r6, pc}
 8003378:	f855 3b04 	ldr.w	r3, [r5], #4
 800337c:	4798      	blx	r3
 800337e:	3601      	adds	r6, #1
 8003380:	e7ee      	b.n	8003360 <__libc_init_array+0xc>
 8003382:	f855 3b04 	ldr.w	r3, [r5], #4
 8003386:	4798      	blx	r3
 8003388:	3601      	adds	r6, #1
 800338a:	e7f2      	b.n	8003372 <__libc_init_array+0x1e>
 800338c:	080041dc 	.word	0x080041dc
 8003390:	080041dc 	.word	0x080041dc
 8003394:	080041dc 	.word	0x080041dc
 8003398:	080041e0 	.word	0x080041e0

0800339c <memset>:
 800339c:	4402      	add	r2, r0
 800339e:	4603      	mov	r3, r0
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d100      	bne.n	80033a6 <memset+0xa>
 80033a4:	4770      	bx	lr
 80033a6:	f803 1b01 	strb.w	r1, [r3], #1
 80033aa:	e7f9      	b.n	80033a0 <memset+0x4>

080033ac <siprintf>:
 80033ac:	b40e      	push	{r1, r2, r3}
 80033ae:	b500      	push	{lr}
 80033b0:	b09c      	sub	sp, #112	; 0x70
 80033b2:	ab1d      	add	r3, sp, #116	; 0x74
 80033b4:	9002      	str	r0, [sp, #8]
 80033b6:	9006      	str	r0, [sp, #24]
 80033b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80033bc:	4809      	ldr	r0, [pc, #36]	; (80033e4 <siprintf+0x38>)
 80033be:	9107      	str	r1, [sp, #28]
 80033c0:	9104      	str	r1, [sp, #16]
 80033c2:	4909      	ldr	r1, [pc, #36]	; (80033e8 <siprintf+0x3c>)
 80033c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80033c8:	9105      	str	r1, [sp, #20]
 80033ca:	6800      	ldr	r0, [r0, #0]
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	a902      	add	r1, sp, #8
 80033d0:	f000 f868 	bl	80034a4 <_svfiprintf_r>
 80033d4:	9b02      	ldr	r3, [sp, #8]
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	b01c      	add	sp, #112	; 0x70
 80033dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80033e0:	b003      	add	sp, #12
 80033e2:	4770      	bx	lr
 80033e4:	2000000c 	.word	0x2000000c
 80033e8:	ffff0208 	.word	0xffff0208

080033ec <__ssputs_r>:
 80033ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033f0:	688e      	ldr	r6, [r1, #8]
 80033f2:	429e      	cmp	r6, r3
 80033f4:	4682      	mov	sl, r0
 80033f6:	460c      	mov	r4, r1
 80033f8:	4690      	mov	r8, r2
 80033fa:	461f      	mov	r7, r3
 80033fc:	d838      	bhi.n	8003470 <__ssputs_r+0x84>
 80033fe:	898a      	ldrh	r2, [r1, #12]
 8003400:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003404:	d032      	beq.n	800346c <__ssputs_r+0x80>
 8003406:	6825      	ldr	r5, [r4, #0]
 8003408:	6909      	ldr	r1, [r1, #16]
 800340a:	eba5 0901 	sub.w	r9, r5, r1
 800340e:	6965      	ldr	r5, [r4, #20]
 8003410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003414:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003418:	3301      	adds	r3, #1
 800341a:	444b      	add	r3, r9
 800341c:	106d      	asrs	r5, r5, #1
 800341e:	429d      	cmp	r5, r3
 8003420:	bf38      	it	cc
 8003422:	461d      	movcc	r5, r3
 8003424:	0553      	lsls	r3, r2, #21
 8003426:	d531      	bpl.n	800348c <__ssputs_r+0xa0>
 8003428:	4629      	mov	r1, r5
 800342a:	f000 fb63 	bl	8003af4 <_malloc_r>
 800342e:	4606      	mov	r6, r0
 8003430:	b950      	cbnz	r0, 8003448 <__ssputs_r+0x5c>
 8003432:	230c      	movs	r3, #12
 8003434:	f8ca 3000 	str.w	r3, [sl]
 8003438:	89a3      	ldrh	r3, [r4, #12]
 800343a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800343e:	81a3      	strh	r3, [r4, #12]
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003448:	6921      	ldr	r1, [r4, #16]
 800344a:	464a      	mov	r2, r9
 800344c:	f000 fabe 	bl	80039cc <memcpy>
 8003450:	89a3      	ldrh	r3, [r4, #12]
 8003452:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003456:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800345a:	81a3      	strh	r3, [r4, #12]
 800345c:	6126      	str	r6, [r4, #16]
 800345e:	6165      	str	r5, [r4, #20]
 8003460:	444e      	add	r6, r9
 8003462:	eba5 0509 	sub.w	r5, r5, r9
 8003466:	6026      	str	r6, [r4, #0]
 8003468:	60a5      	str	r5, [r4, #8]
 800346a:	463e      	mov	r6, r7
 800346c:	42be      	cmp	r6, r7
 800346e:	d900      	bls.n	8003472 <__ssputs_r+0x86>
 8003470:	463e      	mov	r6, r7
 8003472:	6820      	ldr	r0, [r4, #0]
 8003474:	4632      	mov	r2, r6
 8003476:	4641      	mov	r1, r8
 8003478:	f000 fab6 	bl	80039e8 <memmove>
 800347c:	68a3      	ldr	r3, [r4, #8]
 800347e:	1b9b      	subs	r3, r3, r6
 8003480:	60a3      	str	r3, [r4, #8]
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	4433      	add	r3, r6
 8003486:	6023      	str	r3, [r4, #0]
 8003488:	2000      	movs	r0, #0
 800348a:	e7db      	b.n	8003444 <__ssputs_r+0x58>
 800348c:	462a      	mov	r2, r5
 800348e:	f000 fba5 	bl	8003bdc <_realloc_r>
 8003492:	4606      	mov	r6, r0
 8003494:	2800      	cmp	r0, #0
 8003496:	d1e1      	bne.n	800345c <__ssputs_r+0x70>
 8003498:	6921      	ldr	r1, [r4, #16]
 800349a:	4650      	mov	r0, sl
 800349c:	f000 fabe 	bl	8003a1c <_free_r>
 80034a0:	e7c7      	b.n	8003432 <__ssputs_r+0x46>
	...

080034a4 <_svfiprintf_r>:
 80034a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034a8:	4698      	mov	r8, r3
 80034aa:	898b      	ldrh	r3, [r1, #12]
 80034ac:	061b      	lsls	r3, r3, #24
 80034ae:	b09d      	sub	sp, #116	; 0x74
 80034b0:	4607      	mov	r7, r0
 80034b2:	460d      	mov	r5, r1
 80034b4:	4614      	mov	r4, r2
 80034b6:	d50e      	bpl.n	80034d6 <_svfiprintf_r+0x32>
 80034b8:	690b      	ldr	r3, [r1, #16]
 80034ba:	b963      	cbnz	r3, 80034d6 <_svfiprintf_r+0x32>
 80034bc:	2140      	movs	r1, #64	; 0x40
 80034be:	f000 fb19 	bl	8003af4 <_malloc_r>
 80034c2:	6028      	str	r0, [r5, #0]
 80034c4:	6128      	str	r0, [r5, #16]
 80034c6:	b920      	cbnz	r0, 80034d2 <_svfiprintf_r+0x2e>
 80034c8:	230c      	movs	r3, #12
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	f04f 30ff 	mov.w	r0, #4294967295
 80034d0:	e0d1      	b.n	8003676 <_svfiprintf_r+0x1d2>
 80034d2:	2340      	movs	r3, #64	; 0x40
 80034d4:	616b      	str	r3, [r5, #20]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9309      	str	r3, [sp, #36]	; 0x24
 80034da:	2320      	movs	r3, #32
 80034dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80034e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80034e4:	2330      	movs	r3, #48	; 0x30
 80034e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003690 <_svfiprintf_r+0x1ec>
 80034ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80034ee:	f04f 0901 	mov.w	r9, #1
 80034f2:	4623      	mov	r3, r4
 80034f4:	469a      	mov	sl, r3
 80034f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80034fa:	b10a      	cbz	r2, 8003500 <_svfiprintf_r+0x5c>
 80034fc:	2a25      	cmp	r2, #37	; 0x25
 80034fe:	d1f9      	bne.n	80034f4 <_svfiprintf_r+0x50>
 8003500:	ebba 0b04 	subs.w	fp, sl, r4
 8003504:	d00b      	beq.n	800351e <_svfiprintf_r+0x7a>
 8003506:	465b      	mov	r3, fp
 8003508:	4622      	mov	r2, r4
 800350a:	4629      	mov	r1, r5
 800350c:	4638      	mov	r0, r7
 800350e:	f7ff ff6d 	bl	80033ec <__ssputs_r>
 8003512:	3001      	adds	r0, #1
 8003514:	f000 80aa 	beq.w	800366c <_svfiprintf_r+0x1c8>
 8003518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800351a:	445a      	add	r2, fp
 800351c:	9209      	str	r2, [sp, #36]	; 0x24
 800351e:	f89a 3000 	ldrb.w	r3, [sl]
 8003522:	2b00      	cmp	r3, #0
 8003524:	f000 80a2 	beq.w	800366c <_svfiprintf_r+0x1c8>
 8003528:	2300      	movs	r3, #0
 800352a:	f04f 32ff 	mov.w	r2, #4294967295
 800352e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003532:	f10a 0a01 	add.w	sl, sl, #1
 8003536:	9304      	str	r3, [sp, #16]
 8003538:	9307      	str	r3, [sp, #28]
 800353a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800353e:	931a      	str	r3, [sp, #104]	; 0x68
 8003540:	4654      	mov	r4, sl
 8003542:	2205      	movs	r2, #5
 8003544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003548:	4851      	ldr	r0, [pc, #324]	; (8003690 <_svfiprintf_r+0x1ec>)
 800354a:	f7fc fe49 	bl	80001e0 <memchr>
 800354e:	9a04      	ldr	r2, [sp, #16]
 8003550:	b9d8      	cbnz	r0, 800358a <_svfiprintf_r+0xe6>
 8003552:	06d0      	lsls	r0, r2, #27
 8003554:	bf44      	itt	mi
 8003556:	2320      	movmi	r3, #32
 8003558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800355c:	0711      	lsls	r1, r2, #28
 800355e:	bf44      	itt	mi
 8003560:	232b      	movmi	r3, #43	; 0x2b
 8003562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003566:	f89a 3000 	ldrb.w	r3, [sl]
 800356a:	2b2a      	cmp	r3, #42	; 0x2a
 800356c:	d015      	beq.n	800359a <_svfiprintf_r+0xf6>
 800356e:	9a07      	ldr	r2, [sp, #28]
 8003570:	4654      	mov	r4, sl
 8003572:	2000      	movs	r0, #0
 8003574:	f04f 0c0a 	mov.w	ip, #10
 8003578:	4621      	mov	r1, r4
 800357a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800357e:	3b30      	subs	r3, #48	; 0x30
 8003580:	2b09      	cmp	r3, #9
 8003582:	d94e      	bls.n	8003622 <_svfiprintf_r+0x17e>
 8003584:	b1b0      	cbz	r0, 80035b4 <_svfiprintf_r+0x110>
 8003586:	9207      	str	r2, [sp, #28]
 8003588:	e014      	b.n	80035b4 <_svfiprintf_r+0x110>
 800358a:	eba0 0308 	sub.w	r3, r0, r8
 800358e:	fa09 f303 	lsl.w	r3, r9, r3
 8003592:	4313      	orrs	r3, r2
 8003594:	9304      	str	r3, [sp, #16]
 8003596:	46a2      	mov	sl, r4
 8003598:	e7d2      	b.n	8003540 <_svfiprintf_r+0x9c>
 800359a:	9b03      	ldr	r3, [sp, #12]
 800359c:	1d19      	adds	r1, r3, #4
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	9103      	str	r1, [sp, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bfbb      	ittet	lt
 80035a6:	425b      	neglt	r3, r3
 80035a8:	f042 0202 	orrlt.w	r2, r2, #2
 80035ac:	9307      	strge	r3, [sp, #28]
 80035ae:	9307      	strlt	r3, [sp, #28]
 80035b0:	bfb8      	it	lt
 80035b2:	9204      	strlt	r2, [sp, #16]
 80035b4:	7823      	ldrb	r3, [r4, #0]
 80035b6:	2b2e      	cmp	r3, #46	; 0x2e
 80035b8:	d10c      	bne.n	80035d4 <_svfiprintf_r+0x130>
 80035ba:	7863      	ldrb	r3, [r4, #1]
 80035bc:	2b2a      	cmp	r3, #42	; 0x2a
 80035be:	d135      	bne.n	800362c <_svfiprintf_r+0x188>
 80035c0:	9b03      	ldr	r3, [sp, #12]
 80035c2:	1d1a      	adds	r2, r3, #4
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	9203      	str	r2, [sp, #12]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bfb8      	it	lt
 80035cc:	f04f 33ff 	movlt.w	r3, #4294967295
 80035d0:	3402      	adds	r4, #2
 80035d2:	9305      	str	r3, [sp, #20]
 80035d4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80036a0 <_svfiprintf_r+0x1fc>
 80035d8:	7821      	ldrb	r1, [r4, #0]
 80035da:	2203      	movs	r2, #3
 80035dc:	4650      	mov	r0, sl
 80035de:	f7fc fdff 	bl	80001e0 <memchr>
 80035e2:	b140      	cbz	r0, 80035f6 <_svfiprintf_r+0x152>
 80035e4:	2340      	movs	r3, #64	; 0x40
 80035e6:	eba0 000a 	sub.w	r0, r0, sl
 80035ea:	fa03 f000 	lsl.w	r0, r3, r0
 80035ee:	9b04      	ldr	r3, [sp, #16]
 80035f0:	4303      	orrs	r3, r0
 80035f2:	3401      	adds	r4, #1
 80035f4:	9304      	str	r3, [sp, #16]
 80035f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035fa:	4826      	ldr	r0, [pc, #152]	; (8003694 <_svfiprintf_r+0x1f0>)
 80035fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003600:	2206      	movs	r2, #6
 8003602:	f7fc fded 	bl	80001e0 <memchr>
 8003606:	2800      	cmp	r0, #0
 8003608:	d038      	beq.n	800367c <_svfiprintf_r+0x1d8>
 800360a:	4b23      	ldr	r3, [pc, #140]	; (8003698 <_svfiprintf_r+0x1f4>)
 800360c:	bb1b      	cbnz	r3, 8003656 <_svfiprintf_r+0x1b2>
 800360e:	9b03      	ldr	r3, [sp, #12]
 8003610:	3307      	adds	r3, #7
 8003612:	f023 0307 	bic.w	r3, r3, #7
 8003616:	3308      	adds	r3, #8
 8003618:	9303      	str	r3, [sp, #12]
 800361a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800361c:	4433      	add	r3, r6
 800361e:	9309      	str	r3, [sp, #36]	; 0x24
 8003620:	e767      	b.n	80034f2 <_svfiprintf_r+0x4e>
 8003622:	fb0c 3202 	mla	r2, ip, r2, r3
 8003626:	460c      	mov	r4, r1
 8003628:	2001      	movs	r0, #1
 800362a:	e7a5      	b.n	8003578 <_svfiprintf_r+0xd4>
 800362c:	2300      	movs	r3, #0
 800362e:	3401      	adds	r4, #1
 8003630:	9305      	str	r3, [sp, #20]
 8003632:	4619      	mov	r1, r3
 8003634:	f04f 0c0a 	mov.w	ip, #10
 8003638:	4620      	mov	r0, r4
 800363a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800363e:	3a30      	subs	r2, #48	; 0x30
 8003640:	2a09      	cmp	r2, #9
 8003642:	d903      	bls.n	800364c <_svfiprintf_r+0x1a8>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d0c5      	beq.n	80035d4 <_svfiprintf_r+0x130>
 8003648:	9105      	str	r1, [sp, #20]
 800364a:	e7c3      	b.n	80035d4 <_svfiprintf_r+0x130>
 800364c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003650:	4604      	mov	r4, r0
 8003652:	2301      	movs	r3, #1
 8003654:	e7f0      	b.n	8003638 <_svfiprintf_r+0x194>
 8003656:	ab03      	add	r3, sp, #12
 8003658:	9300      	str	r3, [sp, #0]
 800365a:	462a      	mov	r2, r5
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <_svfiprintf_r+0x1f8>)
 800365e:	a904      	add	r1, sp, #16
 8003660:	4638      	mov	r0, r7
 8003662:	f3af 8000 	nop.w
 8003666:	1c42      	adds	r2, r0, #1
 8003668:	4606      	mov	r6, r0
 800366a:	d1d6      	bne.n	800361a <_svfiprintf_r+0x176>
 800366c:	89ab      	ldrh	r3, [r5, #12]
 800366e:	065b      	lsls	r3, r3, #25
 8003670:	f53f af2c 	bmi.w	80034cc <_svfiprintf_r+0x28>
 8003674:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003676:	b01d      	add	sp, #116	; 0x74
 8003678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800367c:	ab03      	add	r3, sp, #12
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	462a      	mov	r2, r5
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <_svfiprintf_r+0x1f8>)
 8003684:	a904      	add	r1, sp, #16
 8003686:	4638      	mov	r0, r7
 8003688:	f000 f87a 	bl	8003780 <_printf_i>
 800368c:	e7eb      	b.n	8003666 <_svfiprintf_r+0x1c2>
 800368e:	bf00      	nop
 8003690:	080041a0 	.word	0x080041a0
 8003694:	080041aa 	.word	0x080041aa
 8003698:	00000000 	.word	0x00000000
 800369c:	080033ed 	.word	0x080033ed
 80036a0:	080041a6 	.word	0x080041a6

080036a4 <_printf_common>:
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	4616      	mov	r6, r2
 80036aa:	4699      	mov	r9, r3
 80036ac:	688a      	ldr	r2, [r1, #8]
 80036ae:	690b      	ldr	r3, [r1, #16]
 80036b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80036b4:	4293      	cmp	r3, r2
 80036b6:	bfb8      	it	lt
 80036b8:	4613      	movlt	r3, r2
 80036ba:	6033      	str	r3, [r6, #0]
 80036bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80036c0:	4607      	mov	r7, r0
 80036c2:	460c      	mov	r4, r1
 80036c4:	b10a      	cbz	r2, 80036ca <_printf_common+0x26>
 80036c6:	3301      	adds	r3, #1
 80036c8:	6033      	str	r3, [r6, #0]
 80036ca:	6823      	ldr	r3, [r4, #0]
 80036cc:	0699      	lsls	r1, r3, #26
 80036ce:	bf42      	ittt	mi
 80036d0:	6833      	ldrmi	r3, [r6, #0]
 80036d2:	3302      	addmi	r3, #2
 80036d4:	6033      	strmi	r3, [r6, #0]
 80036d6:	6825      	ldr	r5, [r4, #0]
 80036d8:	f015 0506 	ands.w	r5, r5, #6
 80036dc:	d106      	bne.n	80036ec <_printf_common+0x48>
 80036de:	f104 0a19 	add.w	sl, r4, #25
 80036e2:	68e3      	ldr	r3, [r4, #12]
 80036e4:	6832      	ldr	r2, [r6, #0]
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	42ab      	cmp	r3, r5
 80036ea:	dc26      	bgt.n	800373a <_printf_common+0x96>
 80036ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80036f0:	1e13      	subs	r3, r2, #0
 80036f2:	6822      	ldr	r2, [r4, #0]
 80036f4:	bf18      	it	ne
 80036f6:	2301      	movne	r3, #1
 80036f8:	0692      	lsls	r2, r2, #26
 80036fa:	d42b      	bmi.n	8003754 <_printf_common+0xb0>
 80036fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003700:	4649      	mov	r1, r9
 8003702:	4638      	mov	r0, r7
 8003704:	47c0      	blx	r8
 8003706:	3001      	adds	r0, #1
 8003708:	d01e      	beq.n	8003748 <_printf_common+0xa4>
 800370a:	6823      	ldr	r3, [r4, #0]
 800370c:	68e5      	ldr	r5, [r4, #12]
 800370e:	6832      	ldr	r2, [r6, #0]
 8003710:	f003 0306 	and.w	r3, r3, #6
 8003714:	2b04      	cmp	r3, #4
 8003716:	bf08      	it	eq
 8003718:	1aad      	subeq	r5, r5, r2
 800371a:	68a3      	ldr	r3, [r4, #8]
 800371c:	6922      	ldr	r2, [r4, #16]
 800371e:	bf0c      	ite	eq
 8003720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003724:	2500      	movne	r5, #0
 8003726:	4293      	cmp	r3, r2
 8003728:	bfc4      	itt	gt
 800372a:	1a9b      	subgt	r3, r3, r2
 800372c:	18ed      	addgt	r5, r5, r3
 800372e:	2600      	movs	r6, #0
 8003730:	341a      	adds	r4, #26
 8003732:	42b5      	cmp	r5, r6
 8003734:	d11a      	bne.n	800376c <_printf_common+0xc8>
 8003736:	2000      	movs	r0, #0
 8003738:	e008      	b.n	800374c <_printf_common+0xa8>
 800373a:	2301      	movs	r3, #1
 800373c:	4652      	mov	r2, sl
 800373e:	4649      	mov	r1, r9
 8003740:	4638      	mov	r0, r7
 8003742:	47c0      	blx	r8
 8003744:	3001      	adds	r0, #1
 8003746:	d103      	bne.n	8003750 <_printf_common+0xac>
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003750:	3501      	adds	r5, #1
 8003752:	e7c6      	b.n	80036e2 <_printf_common+0x3e>
 8003754:	18e1      	adds	r1, r4, r3
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	2030      	movs	r0, #48	; 0x30
 800375a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800375e:	4422      	add	r2, r4
 8003760:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003764:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003768:	3302      	adds	r3, #2
 800376a:	e7c7      	b.n	80036fc <_printf_common+0x58>
 800376c:	2301      	movs	r3, #1
 800376e:	4622      	mov	r2, r4
 8003770:	4649      	mov	r1, r9
 8003772:	4638      	mov	r0, r7
 8003774:	47c0      	blx	r8
 8003776:	3001      	adds	r0, #1
 8003778:	d0e6      	beq.n	8003748 <_printf_common+0xa4>
 800377a:	3601      	adds	r6, #1
 800377c:	e7d9      	b.n	8003732 <_printf_common+0x8e>
	...

08003780 <_printf_i>:
 8003780:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003784:	7e0f      	ldrb	r7, [r1, #24]
 8003786:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003788:	2f78      	cmp	r7, #120	; 0x78
 800378a:	4691      	mov	r9, r2
 800378c:	4680      	mov	r8, r0
 800378e:	460c      	mov	r4, r1
 8003790:	469a      	mov	sl, r3
 8003792:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003796:	d807      	bhi.n	80037a8 <_printf_i+0x28>
 8003798:	2f62      	cmp	r7, #98	; 0x62
 800379a:	d80a      	bhi.n	80037b2 <_printf_i+0x32>
 800379c:	2f00      	cmp	r7, #0
 800379e:	f000 80d8 	beq.w	8003952 <_printf_i+0x1d2>
 80037a2:	2f58      	cmp	r7, #88	; 0x58
 80037a4:	f000 80a3 	beq.w	80038ee <_printf_i+0x16e>
 80037a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80037b0:	e03a      	b.n	8003828 <_printf_i+0xa8>
 80037b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80037b6:	2b15      	cmp	r3, #21
 80037b8:	d8f6      	bhi.n	80037a8 <_printf_i+0x28>
 80037ba:	a101      	add	r1, pc, #4	; (adr r1, 80037c0 <_printf_i+0x40>)
 80037bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80037c0:	08003819 	.word	0x08003819
 80037c4:	0800382d 	.word	0x0800382d
 80037c8:	080037a9 	.word	0x080037a9
 80037cc:	080037a9 	.word	0x080037a9
 80037d0:	080037a9 	.word	0x080037a9
 80037d4:	080037a9 	.word	0x080037a9
 80037d8:	0800382d 	.word	0x0800382d
 80037dc:	080037a9 	.word	0x080037a9
 80037e0:	080037a9 	.word	0x080037a9
 80037e4:	080037a9 	.word	0x080037a9
 80037e8:	080037a9 	.word	0x080037a9
 80037ec:	08003939 	.word	0x08003939
 80037f0:	0800385d 	.word	0x0800385d
 80037f4:	0800391b 	.word	0x0800391b
 80037f8:	080037a9 	.word	0x080037a9
 80037fc:	080037a9 	.word	0x080037a9
 8003800:	0800395b 	.word	0x0800395b
 8003804:	080037a9 	.word	0x080037a9
 8003808:	0800385d 	.word	0x0800385d
 800380c:	080037a9 	.word	0x080037a9
 8003810:	080037a9 	.word	0x080037a9
 8003814:	08003923 	.word	0x08003923
 8003818:	682b      	ldr	r3, [r5, #0]
 800381a:	1d1a      	adds	r2, r3, #4
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	602a      	str	r2, [r5, #0]
 8003820:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003824:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003828:	2301      	movs	r3, #1
 800382a:	e0a3      	b.n	8003974 <_printf_i+0x1f4>
 800382c:	6820      	ldr	r0, [r4, #0]
 800382e:	6829      	ldr	r1, [r5, #0]
 8003830:	0606      	lsls	r6, r0, #24
 8003832:	f101 0304 	add.w	r3, r1, #4
 8003836:	d50a      	bpl.n	800384e <_printf_i+0xce>
 8003838:	680e      	ldr	r6, [r1, #0]
 800383a:	602b      	str	r3, [r5, #0]
 800383c:	2e00      	cmp	r6, #0
 800383e:	da03      	bge.n	8003848 <_printf_i+0xc8>
 8003840:	232d      	movs	r3, #45	; 0x2d
 8003842:	4276      	negs	r6, r6
 8003844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003848:	485e      	ldr	r0, [pc, #376]	; (80039c4 <_printf_i+0x244>)
 800384a:	230a      	movs	r3, #10
 800384c:	e019      	b.n	8003882 <_printf_i+0x102>
 800384e:	680e      	ldr	r6, [r1, #0]
 8003850:	602b      	str	r3, [r5, #0]
 8003852:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003856:	bf18      	it	ne
 8003858:	b236      	sxthne	r6, r6
 800385a:	e7ef      	b.n	800383c <_printf_i+0xbc>
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	6820      	ldr	r0, [r4, #0]
 8003860:	1d19      	adds	r1, r3, #4
 8003862:	6029      	str	r1, [r5, #0]
 8003864:	0601      	lsls	r1, r0, #24
 8003866:	d501      	bpl.n	800386c <_printf_i+0xec>
 8003868:	681e      	ldr	r6, [r3, #0]
 800386a:	e002      	b.n	8003872 <_printf_i+0xf2>
 800386c:	0646      	lsls	r6, r0, #25
 800386e:	d5fb      	bpl.n	8003868 <_printf_i+0xe8>
 8003870:	881e      	ldrh	r6, [r3, #0]
 8003872:	4854      	ldr	r0, [pc, #336]	; (80039c4 <_printf_i+0x244>)
 8003874:	2f6f      	cmp	r7, #111	; 0x6f
 8003876:	bf0c      	ite	eq
 8003878:	2308      	moveq	r3, #8
 800387a:	230a      	movne	r3, #10
 800387c:	2100      	movs	r1, #0
 800387e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003882:	6865      	ldr	r5, [r4, #4]
 8003884:	60a5      	str	r5, [r4, #8]
 8003886:	2d00      	cmp	r5, #0
 8003888:	bfa2      	ittt	ge
 800388a:	6821      	ldrge	r1, [r4, #0]
 800388c:	f021 0104 	bicge.w	r1, r1, #4
 8003890:	6021      	strge	r1, [r4, #0]
 8003892:	b90e      	cbnz	r6, 8003898 <_printf_i+0x118>
 8003894:	2d00      	cmp	r5, #0
 8003896:	d04d      	beq.n	8003934 <_printf_i+0x1b4>
 8003898:	4615      	mov	r5, r2
 800389a:	fbb6 f1f3 	udiv	r1, r6, r3
 800389e:	fb03 6711 	mls	r7, r3, r1, r6
 80038a2:	5dc7      	ldrb	r7, [r0, r7]
 80038a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80038a8:	4637      	mov	r7, r6
 80038aa:	42bb      	cmp	r3, r7
 80038ac:	460e      	mov	r6, r1
 80038ae:	d9f4      	bls.n	800389a <_printf_i+0x11a>
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d10b      	bne.n	80038cc <_printf_i+0x14c>
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	07de      	lsls	r6, r3, #31
 80038b8:	d508      	bpl.n	80038cc <_printf_i+0x14c>
 80038ba:	6923      	ldr	r3, [r4, #16]
 80038bc:	6861      	ldr	r1, [r4, #4]
 80038be:	4299      	cmp	r1, r3
 80038c0:	bfde      	ittt	le
 80038c2:	2330      	movle	r3, #48	; 0x30
 80038c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80038c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80038cc:	1b52      	subs	r2, r2, r5
 80038ce:	6122      	str	r2, [r4, #16]
 80038d0:	f8cd a000 	str.w	sl, [sp]
 80038d4:	464b      	mov	r3, r9
 80038d6:	aa03      	add	r2, sp, #12
 80038d8:	4621      	mov	r1, r4
 80038da:	4640      	mov	r0, r8
 80038dc:	f7ff fee2 	bl	80036a4 <_printf_common>
 80038e0:	3001      	adds	r0, #1
 80038e2:	d14c      	bne.n	800397e <_printf_i+0x1fe>
 80038e4:	f04f 30ff 	mov.w	r0, #4294967295
 80038e8:	b004      	add	sp, #16
 80038ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038ee:	4835      	ldr	r0, [pc, #212]	; (80039c4 <_printf_i+0x244>)
 80038f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80038f4:	6829      	ldr	r1, [r5, #0]
 80038f6:	6823      	ldr	r3, [r4, #0]
 80038f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80038fc:	6029      	str	r1, [r5, #0]
 80038fe:	061d      	lsls	r5, r3, #24
 8003900:	d514      	bpl.n	800392c <_printf_i+0x1ac>
 8003902:	07df      	lsls	r7, r3, #31
 8003904:	bf44      	itt	mi
 8003906:	f043 0320 	orrmi.w	r3, r3, #32
 800390a:	6023      	strmi	r3, [r4, #0]
 800390c:	b91e      	cbnz	r6, 8003916 <_printf_i+0x196>
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	f023 0320 	bic.w	r3, r3, #32
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	2310      	movs	r3, #16
 8003918:	e7b0      	b.n	800387c <_printf_i+0xfc>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	f043 0320 	orr.w	r3, r3, #32
 8003920:	6023      	str	r3, [r4, #0]
 8003922:	2378      	movs	r3, #120	; 0x78
 8003924:	4828      	ldr	r0, [pc, #160]	; (80039c8 <_printf_i+0x248>)
 8003926:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800392a:	e7e3      	b.n	80038f4 <_printf_i+0x174>
 800392c:	0659      	lsls	r1, r3, #25
 800392e:	bf48      	it	mi
 8003930:	b2b6      	uxthmi	r6, r6
 8003932:	e7e6      	b.n	8003902 <_printf_i+0x182>
 8003934:	4615      	mov	r5, r2
 8003936:	e7bb      	b.n	80038b0 <_printf_i+0x130>
 8003938:	682b      	ldr	r3, [r5, #0]
 800393a:	6826      	ldr	r6, [r4, #0]
 800393c:	6961      	ldr	r1, [r4, #20]
 800393e:	1d18      	adds	r0, r3, #4
 8003940:	6028      	str	r0, [r5, #0]
 8003942:	0635      	lsls	r5, r6, #24
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	d501      	bpl.n	800394c <_printf_i+0x1cc>
 8003948:	6019      	str	r1, [r3, #0]
 800394a:	e002      	b.n	8003952 <_printf_i+0x1d2>
 800394c:	0670      	lsls	r0, r6, #25
 800394e:	d5fb      	bpl.n	8003948 <_printf_i+0x1c8>
 8003950:	8019      	strh	r1, [r3, #0]
 8003952:	2300      	movs	r3, #0
 8003954:	6123      	str	r3, [r4, #16]
 8003956:	4615      	mov	r5, r2
 8003958:	e7ba      	b.n	80038d0 <_printf_i+0x150>
 800395a:	682b      	ldr	r3, [r5, #0]
 800395c:	1d1a      	adds	r2, r3, #4
 800395e:	602a      	str	r2, [r5, #0]
 8003960:	681d      	ldr	r5, [r3, #0]
 8003962:	6862      	ldr	r2, [r4, #4]
 8003964:	2100      	movs	r1, #0
 8003966:	4628      	mov	r0, r5
 8003968:	f7fc fc3a 	bl	80001e0 <memchr>
 800396c:	b108      	cbz	r0, 8003972 <_printf_i+0x1f2>
 800396e:	1b40      	subs	r0, r0, r5
 8003970:	6060      	str	r0, [r4, #4]
 8003972:	6863      	ldr	r3, [r4, #4]
 8003974:	6123      	str	r3, [r4, #16]
 8003976:	2300      	movs	r3, #0
 8003978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800397c:	e7a8      	b.n	80038d0 <_printf_i+0x150>
 800397e:	6923      	ldr	r3, [r4, #16]
 8003980:	462a      	mov	r2, r5
 8003982:	4649      	mov	r1, r9
 8003984:	4640      	mov	r0, r8
 8003986:	47d0      	blx	sl
 8003988:	3001      	adds	r0, #1
 800398a:	d0ab      	beq.n	80038e4 <_printf_i+0x164>
 800398c:	6823      	ldr	r3, [r4, #0]
 800398e:	079b      	lsls	r3, r3, #30
 8003990:	d413      	bmi.n	80039ba <_printf_i+0x23a>
 8003992:	68e0      	ldr	r0, [r4, #12]
 8003994:	9b03      	ldr	r3, [sp, #12]
 8003996:	4298      	cmp	r0, r3
 8003998:	bfb8      	it	lt
 800399a:	4618      	movlt	r0, r3
 800399c:	e7a4      	b.n	80038e8 <_printf_i+0x168>
 800399e:	2301      	movs	r3, #1
 80039a0:	4632      	mov	r2, r6
 80039a2:	4649      	mov	r1, r9
 80039a4:	4640      	mov	r0, r8
 80039a6:	47d0      	blx	sl
 80039a8:	3001      	adds	r0, #1
 80039aa:	d09b      	beq.n	80038e4 <_printf_i+0x164>
 80039ac:	3501      	adds	r5, #1
 80039ae:	68e3      	ldr	r3, [r4, #12]
 80039b0:	9903      	ldr	r1, [sp, #12]
 80039b2:	1a5b      	subs	r3, r3, r1
 80039b4:	42ab      	cmp	r3, r5
 80039b6:	dcf2      	bgt.n	800399e <_printf_i+0x21e>
 80039b8:	e7eb      	b.n	8003992 <_printf_i+0x212>
 80039ba:	2500      	movs	r5, #0
 80039bc:	f104 0619 	add.w	r6, r4, #25
 80039c0:	e7f5      	b.n	80039ae <_printf_i+0x22e>
 80039c2:	bf00      	nop
 80039c4:	080041b1 	.word	0x080041b1
 80039c8:	080041c2 	.word	0x080041c2

080039cc <memcpy>:
 80039cc:	440a      	add	r2, r1
 80039ce:	4291      	cmp	r1, r2
 80039d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80039d4:	d100      	bne.n	80039d8 <memcpy+0xc>
 80039d6:	4770      	bx	lr
 80039d8:	b510      	push	{r4, lr}
 80039da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039e2:	4291      	cmp	r1, r2
 80039e4:	d1f9      	bne.n	80039da <memcpy+0xe>
 80039e6:	bd10      	pop	{r4, pc}

080039e8 <memmove>:
 80039e8:	4288      	cmp	r0, r1
 80039ea:	b510      	push	{r4, lr}
 80039ec:	eb01 0402 	add.w	r4, r1, r2
 80039f0:	d902      	bls.n	80039f8 <memmove+0x10>
 80039f2:	4284      	cmp	r4, r0
 80039f4:	4623      	mov	r3, r4
 80039f6:	d807      	bhi.n	8003a08 <memmove+0x20>
 80039f8:	1e43      	subs	r3, r0, #1
 80039fa:	42a1      	cmp	r1, r4
 80039fc:	d008      	beq.n	8003a10 <memmove+0x28>
 80039fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a06:	e7f8      	b.n	80039fa <memmove+0x12>
 8003a08:	4402      	add	r2, r0
 8003a0a:	4601      	mov	r1, r0
 8003a0c:	428a      	cmp	r2, r1
 8003a0e:	d100      	bne.n	8003a12 <memmove+0x2a>
 8003a10:	bd10      	pop	{r4, pc}
 8003a12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a1a:	e7f7      	b.n	8003a0c <memmove+0x24>

08003a1c <_free_r>:
 8003a1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003a1e:	2900      	cmp	r1, #0
 8003a20:	d044      	beq.n	8003aac <_free_r+0x90>
 8003a22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a26:	9001      	str	r0, [sp, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f1a1 0404 	sub.w	r4, r1, #4
 8003a2e:	bfb8      	it	lt
 8003a30:	18e4      	addlt	r4, r4, r3
 8003a32:	f000 f913 	bl	8003c5c <__malloc_lock>
 8003a36:	4a1e      	ldr	r2, [pc, #120]	; (8003ab0 <_free_r+0x94>)
 8003a38:	9801      	ldr	r0, [sp, #4]
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	b933      	cbnz	r3, 8003a4c <_free_r+0x30>
 8003a3e:	6063      	str	r3, [r4, #4]
 8003a40:	6014      	str	r4, [r2, #0]
 8003a42:	b003      	add	sp, #12
 8003a44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003a48:	f000 b90e 	b.w	8003c68 <__malloc_unlock>
 8003a4c:	42a3      	cmp	r3, r4
 8003a4e:	d908      	bls.n	8003a62 <_free_r+0x46>
 8003a50:	6825      	ldr	r5, [r4, #0]
 8003a52:	1961      	adds	r1, r4, r5
 8003a54:	428b      	cmp	r3, r1
 8003a56:	bf01      	itttt	eq
 8003a58:	6819      	ldreq	r1, [r3, #0]
 8003a5a:	685b      	ldreq	r3, [r3, #4]
 8003a5c:	1949      	addeq	r1, r1, r5
 8003a5e:	6021      	streq	r1, [r4, #0]
 8003a60:	e7ed      	b.n	8003a3e <_free_r+0x22>
 8003a62:	461a      	mov	r2, r3
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	b10b      	cbz	r3, 8003a6c <_free_r+0x50>
 8003a68:	42a3      	cmp	r3, r4
 8003a6a:	d9fa      	bls.n	8003a62 <_free_r+0x46>
 8003a6c:	6811      	ldr	r1, [r2, #0]
 8003a6e:	1855      	adds	r5, r2, r1
 8003a70:	42a5      	cmp	r5, r4
 8003a72:	d10b      	bne.n	8003a8c <_free_r+0x70>
 8003a74:	6824      	ldr	r4, [r4, #0]
 8003a76:	4421      	add	r1, r4
 8003a78:	1854      	adds	r4, r2, r1
 8003a7a:	42a3      	cmp	r3, r4
 8003a7c:	6011      	str	r1, [r2, #0]
 8003a7e:	d1e0      	bne.n	8003a42 <_free_r+0x26>
 8003a80:	681c      	ldr	r4, [r3, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	6053      	str	r3, [r2, #4]
 8003a86:	4421      	add	r1, r4
 8003a88:	6011      	str	r1, [r2, #0]
 8003a8a:	e7da      	b.n	8003a42 <_free_r+0x26>
 8003a8c:	d902      	bls.n	8003a94 <_free_r+0x78>
 8003a8e:	230c      	movs	r3, #12
 8003a90:	6003      	str	r3, [r0, #0]
 8003a92:	e7d6      	b.n	8003a42 <_free_r+0x26>
 8003a94:	6825      	ldr	r5, [r4, #0]
 8003a96:	1961      	adds	r1, r4, r5
 8003a98:	428b      	cmp	r3, r1
 8003a9a:	bf04      	itt	eq
 8003a9c:	6819      	ldreq	r1, [r3, #0]
 8003a9e:	685b      	ldreq	r3, [r3, #4]
 8003aa0:	6063      	str	r3, [r4, #4]
 8003aa2:	bf04      	itt	eq
 8003aa4:	1949      	addeq	r1, r1, r5
 8003aa6:	6021      	streq	r1, [r4, #0]
 8003aa8:	6054      	str	r4, [r2, #4]
 8003aaa:	e7ca      	b.n	8003a42 <_free_r+0x26>
 8003aac:	b003      	add	sp, #12
 8003aae:	bd30      	pop	{r4, r5, pc}
 8003ab0:	20000130 	.word	0x20000130

08003ab4 <sbrk_aligned>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4e0e      	ldr	r6, [pc, #56]	; (8003af0 <sbrk_aligned+0x3c>)
 8003ab8:	460c      	mov	r4, r1
 8003aba:	6831      	ldr	r1, [r6, #0]
 8003abc:	4605      	mov	r5, r0
 8003abe:	b911      	cbnz	r1, 8003ac6 <sbrk_aligned+0x12>
 8003ac0:	f000 f8bc 	bl	8003c3c <_sbrk_r>
 8003ac4:	6030      	str	r0, [r6, #0]
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 f8b7 	bl	8003c3c <_sbrk_r>
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	d00a      	beq.n	8003ae8 <sbrk_aligned+0x34>
 8003ad2:	1cc4      	adds	r4, r0, #3
 8003ad4:	f024 0403 	bic.w	r4, r4, #3
 8003ad8:	42a0      	cmp	r0, r4
 8003ada:	d007      	beq.n	8003aec <sbrk_aligned+0x38>
 8003adc:	1a21      	subs	r1, r4, r0
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f000 f8ac 	bl	8003c3c <_sbrk_r>
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d101      	bne.n	8003aec <sbrk_aligned+0x38>
 8003ae8:	f04f 34ff 	mov.w	r4, #4294967295
 8003aec:	4620      	mov	r0, r4
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	20000134 	.word	0x20000134

08003af4 <_malloc_r>:
 8003af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af8:	1ccd      	adds	r5, r1, #3
 8003afa:	f025 0503 	bic.w	r5, r5, #3
 8003afe:	3508      	adds	r5, #8
 8003b00:	2d0c      	cmp	r5, #12
 8003b02:	bf38      	it	cc
 8003b04:	250c      	movcc	r5, #12
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	4607      	mov	r7, r0
 8003b0a:	db01      	blt.n	8003b10 <_malloc_r+0x1c>
 8003b0c:	42a9      	cmp	r1, r5
 8003b0e:	d905      	bls.n	8003b1c <_malloc_r+0x28>
 8003b10:	230c      	movs	r3, #12
 8003b12:	603b      	str	r3, [r7, #0]
 8003b14:	2600      	movs	r6, #0
 8003b16:	4630      	mov	r0, r6
 8003b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b1c:	4e2e      	ldr	r6, [pc, #184]	; (8003bd8 <_malloc_r+0xe4>)
 8003b1e:	f000 f89d 	bl	8003c5c <__malloc_lock>
 8003b22:	6833      	ldr	r3, [r6, #0]
 8003b24:	461c      	mov	r4, r3
 8003b26:	bb34      	cbnz	r4, 8003b76 <_malloc_r+0x82>
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f7ff ffc2 	bl	8003ab4 <sbrk_aligned>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	4604      	mov	r4, r0
 8003b34:	d14d      	bne.n	8003bd2 <_malloc_r+0xde>
 8003b36:	6834      	ldr	r4, [r6, #0]
 8003b38:	4626      	mov	r6, r4
 8003b3a:	2e00      	cmp	r6, #0
 8003b3c:	d140      	bne.n	8003bc0 <_malloc_r+0xcc>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	4631      	mov	r1, r6
 8003b42:	4638      	mov	r0, r7
 8003b44:	eb04 0803 	add.w	r8, r4, r3
 8003b48:	f000 f878 	bl	8003c3c <_sbrk_r>
 8003b4c:	4580      	cmp	r8, r0
 8003b4e:	d13a      	bne.n	8003bc6 <_malloc_r+0xd2>
 8003b50:	6821      	ldr	r1, [r4, #0]
 8003b52:	3503      	adds	r5, #3
 8003b54:	1a6d      	subs	r5, r5, r1
 8003b56:	f025 0503 	bic.w	r5, r5, #3
 8003b5a:	3508      	adds	r5, #8
 8003b5c:	2d0c      	cmp	r5, #12
 8003b5e:	bf38      	it	cc
 8003b60:	250c      	movcc	r5, #12
 8003b62:	4629      	mov	r1, r5
 8003b64:	4638      	mov	r0, r7
 8003b66:	f7ff ffa5 	bl	8003ab4 <sbrk_aligned>
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d02b      	beq.n	8003bc6 <_malloc_r+0xd2>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	442b      	add	r3, r5
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	e00e      	b.n	8003b94 <_malloc_r+0xa0>
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	1b52      	subs	r2, r2, r5
 8003b7a:	d41e      	bmi.n	8003bba <_malloc_r+0xc6>
 8003b7c:	2a0b      	cmp	r2, #11
 8003b7e:	d916      	bls.n	8003bae <_malloc_r+0xba>
 8003b80:	1961      	adds	r1, r4, r5
 8003b82:	42a3      	cmp	r3, r4
 8003b84:	6025      	str	r5, [r4, #0]
 8003b86:	bf18      	it	ne
 8003b88:	6059      	strne	r1, [r3, #4]
 8003b8a:	6863      	ldr	r3, [r4, #4]
 8003b8c:	bf08      	it	eq
 8003b8e:	6031      	streq	r1, [r6, #0]
 8003b90:	5162      	str	r2, [r4, r5]
 8003b92:	604b      	str	r3, [r1, #4]
 8003b94:	4638      	mov	r0, r7
 8003b96:	f104 060b 	add.w	r6, r4, #11
 8003b9a:	f000 f865 	bl	8003c68 <__malloc_unlock>
 8003b9e:	f026 0607 	bic.w	r6, r6, #7
 8003ba2:	1d23      	adds	r3, r4, #4
 8003ba4:	1af2      	subs	r2, r6, r3
 8003ba6:	d0b6      	beq.n	8003b16 <_malloc_r+0x22>
 8003ba8:	1b9b      	subs	r3, r3, r6
 8003baa:	50a3      	str	r3, [r4, r2]
 8003bac:	e7b3      	b.n	8003b16 <_malloc_r+0x22>
 8003bae:	6862      	ldr	r2, [r4, #4]
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	bf0c      	ite	eq
 8003bb4:	6032      	streq	r2, [r6, #0]
 8003bb6:	605a      	strne	r2, [r3, #4]
 8003bb8:	e7ec      	b.n	8003b94 <_malloc_r+0xa0>
 8003bba:	4623      	mov	r3, r4
 8003bbc:	6864      	ldr	r4, [r4, #4]
 8003bbe:	e7b2      	b.n	8003b26 <_malloc_r+0x32>
 8003bc0:	4634      	mov	r4, r6
 8003bc2:	6876      	ldr	r6, [r6, #4]
 8003bc4:	e7b9      	b.n	8003b3a <_malloc_r+0x46>
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f000 f84c 	bl	8003c68 <__malloc_unlock>
 8003bd0:	e7a1      	b.n	8003b16 <_malloc_r+0x22>
 8003bd2:	6025      	str	r5, [r4, #0]
 8003bd4:	e7de      	b.n	8003b94 <_malloc_r+0xa0>
 8003bd6:	bf00      	nop
 8003bd8:	20000130 	.word	0x20000130

08003bdc <_realloc_r>:
 8003bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003be0:	4680      	mov	r8, r0
 8003be2:	4614      	mov	r4, r2
 8003be4:	460e      	mov	r6, r1
 8003be6:	b921      	cbnz	r1, 8003bf2 <_realloc_r+0x16>
 8003be8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bec:	4611      	mov	r1, r2
 8003bee:	f7ff bf81 	b.w	8003af4 <_malloc_r>
 8003bf2:	b92a      	cbnz	r2, 8003c00 <_realloc_r+0x24>
 8003bf4:	f7ff ff12 	bl	8003a1c <_free_r>
 8003bf8:	4625      	mov	r5, r4
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c00:	f000 f838 	bl	8003c74 <_malloc_usable_size_r>
 8003c04:	4284      	cmp	r4, r0
 8003c06:	4607      	mov	r7, r0
 8003c08:	d802      	bhi.n	8003c10 <_realloc_r+0x34>
 8003c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c0e:	d812      	bhi.n	8003c36 <_realloc_r+0x5a>
 8003c10:	4621      	mov	r1, r4
 8003c12:	4640      	mov	r0, r8
 8003c14:	f7ff ff6e 	bl	8003af4 <_malloc_r>
 8003c18:	4605      	mov	r5, r0
 8003c1a:	2800      	cmp	r0, #0
 8003c1c:	d0ed      	beq.n	8003bfa <_realloc_r+0x1e>
 8003c1e:	42bc      	cmp	r4, r7
 8003c20:	4622      	mov	r2, r4
 8003c22:	4631      	mov	r1, r6
 8003c24:	bf28      	it	cs
 8003c26:	463a      	movcs	r2, r7
 8003c28:	f7ff fed0 	bl	80039cc <memcpy>
 8003c2c:	4631      	mov	r1, r6
 8003c2e:	4640      	mov	r0, r8
 8003c30:	f7ff fef4 	bl	8003a1c <_free_r>
 8003c34:	e7e1      	b.n	8003bfa <_realloc_r+0x1e>
 8003c36:	4635      	mov	r5, r6
 8003c38:	e7df      	b.n	8003bfa <_realloc_r+0x1e>
	...

08003c3c <_sbrk_r>:
 8003c3c:	b538      	push	{r3, r4, r5, lr}
 8003c3e:	4d06      	ldr	r5, [pc, #24]	; (8003c58 <_sbrk_r+0x1c>)
 8003c40:	2300      	movs	r3, #0
 8003c42:	4604      	mov	r4, r0
 8003c44:	4608      	mov	r0, r1
 8003c46:	602b      	str	r3, [r5, #0]
 8003c48:	f7fd fe08 	bl	800185c <_sbrk>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d102      	bne.n	8003c56 <_sbrk_r+0x1a>
 8003c50:	682b      	ldr	r3, [r5, #0]
 8003c52:	b103      	cbz	r3, 8003c56 <_sbrk_r+0x1a>
 8003c54:	6023      	str	r3, [r4, #0]
 8003c56:	bd38      	pop	{r3, r4, r5, pc}
 8003c58:	20000138 	.word	0x20000138

08003c5c <__malloc_lock>:
 8003c5c:	4801      	ldr	r0, [pc, #4]	; (8003c64 <__malloc_lock+0x8>)
 8003c5e:	f000 b811 	b.w	8003c84 <__retarget_lock_acquire_recursive>
 8003c62:	bf00      	nop
 8003c64:	2000013c 	.word	0x2000013c

08003c68 <__malloc_unlock>:
 8003c68:	4801      	ldr	r0, [pc, #4]	; (8003c70 <__malloc_unlock+0x8>)
 8003c6a:	f000 b80c 	b.w	8003c86 <__retarget_lock_release_recursive>
 8003c6e:	bf00      	nop
 8003c70:	2000013c 	.word	0x2000013c

08003c74 <_malloc_usable_size_r>:
 8003c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c78:	1f18      	subs	r0, r3, #4
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	bfbc      	itt	lt
 8003c7e:	580b      	ldrlt	r3, [r1, r0]
 8003c80:	18c0      	addlt	r0, r0, r3
 8003c82:	4770      	bx	lr

08003c84 <__retarget_lock_acquire_recursive>:
 8003c84:	4770      	bx	lr

08003c86 <__retarget_lock_release_recursive>:
 8003c86:	4770      	bx	lr

08003c88 <_init>:
 8003c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c8a:	bf00      	nop
 8003c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c8e:	bc08      	pop	{r3}
 8003c90:	469e      	mov	lr, r3
 8003c92:	4770      	bx	lr

08003c94 <_fini>:
 8003c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c96:	bf00      	nop
 8003c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c9a:	bc08      	pop	{r3}
 8003c9c:	469e      	mov	lr, r3
 8003c9e:	4770      	bx	lr
