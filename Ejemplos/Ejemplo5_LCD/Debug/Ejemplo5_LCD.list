
Ejemplo5_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002584  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002724  08002724  00012724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002790  08002790  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002790  08002790  00012790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002798  08002798  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002798  08002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800279c  0800279c  0001279c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080027a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002810  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002810  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003eb3  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001062  00000000  00000000  00023f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000478  00000000  00000000  00024fb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003d0  00000000  00000000  00025430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014902  00000000  00000000  00025800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000056fa  00000000  00000000  0003a102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000810fb  00000000  00000000  0003f7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c08f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000013c8  00000000  00000000  000c0948  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800270c 	.word	0x0800270c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	0800270c 	.word	0x0800270c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <LCD_STM32_Cmd>:
 *  Created on: Jan 25, 2023
 *      Author: HP
 */
#include "LCD_STM32.h"

void LCD_STM32_Cmd(uint8_t a){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	4603      	mov	r3, r0
 800058c:	71fb      	strb	r3, [r7, #7]
	E_OFF;
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <LCD_STM32_Cmd+0x44>)
 8000596:	f000 ffdb 	bl	8001550 <HAL_GPIO_WritePin>
	E_ON;
 800059a:	2201      	movs	r2, #1
 800059c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005a0:	4809      	ldr	r0, [pc, #36]	; (80005c8 <LCD_STM32_Cmd+0x44>)
 80005a2:	f000 ffd5 	bl	8001550 <HAL_GPIO_WritePin>
	LCD_STM32_DataBus(a);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	4618      	mov	r0, r3
 80005aa:	f000 f80f 	bl	80005cc <LCD_STM32_DataBus>
	HAL_Delay(2);
 80005ae:	2002      	movs	r0, #2
 80005b0:	f000 fd40 	bl	8001034 <HAL_Delay>
	E_OFF;
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <LCD_STM32_Cmd+0x44>)
 80005bc:	f000 ffc8 	bl	8001550 <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020000 	.word	0x40020000

080005cc <LCD_STM32_DataBus>:
void LCD_STM32_DataBus(uint8_t a){
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
	// 0001
	if (a & 0x01){D4_ON;}
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	f003 0301 	and.w	r3, r3, #1
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d006      	beq.n	80005ee <LCD_STM32_DataBus+0x22>
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005e6:	4822      	ldr	r0, [pc, #136]	; (8000670 <LCD_STM32_DataBus+0xa4>)
 80005e8:	f000 ffb2 	bl	8001550 <HAL_GPIO_WritePin>
 80005ec:	e005      	b.n	80005fa <LCD_STM32_DataBus+0x2e>
	else{D4_OFF;}
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005f4:	481e      	ldr	r0, [pc, #120]	; (8000670 <LCD_STM32_DataBus+0xa4>)
 80005f6:	f000 ffab 	bl	8001550 <HAL_GPIO_WritePin>
	// 0010
	if (a & 0x02){D5_ON;}
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	2b00      	cmp	r3, #0
 8000602:	d006      	beq.n	8000612 <LCD_STM32_DataBus+0x46>
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060a:	4819      	ldr	r0, [pc, #100]	; (8000670 <LCD_STM32_DataBus+0xa4>)
 800060c:	f000 ffa0 	bl	8001550 <HAL_GPIO_WritePin>
 8000610:	e005      	b.n	800061e <LCD_STM32_DataBus+0x52>
	else{D5_OFF;}
 8000612:	2200      	movs	r2, #0
 8000614:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000618:	4815      	ldr	r0, [pc, #84]	; (8000670 <LCD_STM32_DataBus+0xa4>)
 800061a:	f000 ff99 	bl	8001550 <HAL_GPIO_WritePin>
	// 0100
	if (a & 0x04){D6_ON;}
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	2b00      	cmp	r3, #0
 8000626:	d006      	beq.n	8000636 <LCD_STM32_DataBus+0x6a>
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800062e:	4810      	ldr	r0, [pc, #64]	; (8000670 <LCD_STM32_DataBus+0xa4>)
 8000630:	f000 ff8e 	bl	8001550 <HAL_GPIO_WritePin>
 8000634:	e005      	b.n	8000642 <LCD_STM32_DataBus+0x76>
	else{D6_OFF;}
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800063c:	480c      	ldr	r0, [pc, #48]	; (8000670 <LCD_STM32_DataBus+0xa4>)
 800063e:	f000 ff87 	bl	8001550 <HAL_GPIO_WritePin>
	// 1000
	if (a & 0x08){D7_ON;}
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	f003 0308 	and.w	r3, r3, #8
 8000648:	2b00      	cmp	r3, #0
 800064a:	d006      	beq.n	800065a <LCD_STM32_DataBus+0x8e>
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <LCD_STM32_DataBus+0xa4>)
 8000654:	f000 ff7c 	bl	8001550 <HAL_GPIO_WritePin>
	else{D7_OFF;}
}
 8000658:	e005      	b.n	8000666 <LCD_STM32_DataBus+0x9a>
	else{D7_OFF;}
 800065a:	2200      	movs	r2, #0
 800065c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000660:	4803      	ldr	r0, [pc, #12]	; (8000670 <LCD_STM32_DataBus+0xa4>)
 8000662:	f000 ff75 	bl	8001550 <HAL_GPIO_WritePin>
}
 8000666:	bf00      	nop
 8000668:	3708      	adds	r7, #8
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020000 	.word	0x40020000

08000674 <LCD_STM32_Init>:
void LCD_STM32_Init(void){
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	LCD_STM32_Cmd(0X03);
 8000678:	2003      	movs	r0, #3
 800067a:	f7ff ff83 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X03);
 800067e:	2003      	movs	r0, #3
 8000680:	f7ff ff80 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X03);
 8000684:	2003      	movs	r0, #3
 8000686:	f7ff ff7d 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X02);
 800068a:	2002      	movs	r0, #2
 800068c:	f7ff ff7a 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X02);
 8000690:	2002      	movs	r0, #2
 8000692:	f7ff ff77 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X08);
 8000696:	2008      	movs	r0, #8
 8000698:	f7ff ff74 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 800069c:	2000      	movs	r0, #0
 800069e:	f7ff ff71 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X08);
 80006a2:	2008      	movs	r0, #8
 80006a4:	f7ff ff6e 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 80006a8:	2000      	movs	r0, #0
 80006aa:	f7ff ff6b 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X01);
 80006ae:	2001      	movs	r0, #1
 80006b0:	f7ff ff68 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X00);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff65 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(0X0D);
 80006ba:	200d      	movs	r0, #13
 80006bc:	f7ff ff62 	bl	8000584 <LCD_STM32_Cmd>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <LCD_STM32_Set_Cuzrsor>:
void LCD_STM32_Set_Cuzrsor(uint8_t x,Ubicacion y){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	460a      	mov	r2, r1
 80006ce:	71fb      	strb	r3, [r7, #7]
 80006d0:	4613      	mov	r3, r2
 80006d2:	71bb      	strb	r3, [r7, #6]
	uint8_t m,n;

	RS_OFF;
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006da:	482a      	ldr	r0, [pc, #168]	; (8000784 <LCD_STM32_Set_Cuzrsor+0xc0>)
 80006dc:	f000 ff38 	bl	8001550 <HAL_GPIO_WritePin>
	switch (y)
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d84a      	bhi.n	800077c <LCD_STM32_Set_Cuzrsor+0xb8>
 80006e6:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <LCD_STM32_Set_Cuzrsor+0x28>)
 80006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ec:	080006fd 	.word	0x080006fd
 80006f0:	0800071d 	.word	0x0800071d
 80006f4:	0800073d 	.word	0x0800073d
 80006f8:	0800075d 	.word	0x0800075d
	{
		case Fila1:
				m=0x80+x;
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	3b80      	subs	r3, #128	; 0x80
 8000700:	73fb      	strb	r3, [r7, #15]
				n=(0x80+x)>>4;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	3380      	adds	r3, #128	; 0x80
 8000706:	111b      	asrs	r3, r3, #4
 8000708:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 800070a:	7bbb      	ldrb	r3, [r7, #14]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff39 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 8000712:	7bfb      	ldrb	r3, [r7, #15]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff35 	bl	8000584 <LCD_STM32_Cmd>
		break;
 800071a:	e02f      	b.n	800077c <LCD_STM32_Set_Cuzrsor+0xb8>
		case Fila2:
				m=0xC0+x;
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	3b40      	subs	r3, #64	; 0x40
 8000720:	73fb      	strb	r3, [r7, #15]
				n=(0XC0+x)>>4;
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	33c0      	adds	r3, #192	; 0xc0
 8000726:	111b      	asrs	r3, r3, #4
 8000728:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 800072a:	7bbb      	ldrb	r3, [r7, #14]
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ff29 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff25 	bl	8000584 <LCD_STM32_Cmd>
		break;
 800073a:	e01f      	b.n	800077c <LCD_STM32_Set_Cuzrsor+0xb8>
		case Fila3:
				m=0x94+x;
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	3b6c      	subs	r3, #108	; 0x6c
 8000740:	73fb      	strb	r3, [r7, #15]
				n=(0x94+x)>>4;
 8000742:	79fb      	ldrb	r3, [r7, #7]
 8000744:	3394      	adds	r3, #148	; 0x94
 8000746:	111b      	asrs	r3, r3, #4
 8000748:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff19 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff15 	bl	8000584 <LCD_STM32_Cmd>
		break;
 800075a:	e00f      	b.n	800077c <LCD_STM32_Set_Cuzrsor+0xb8>
		case Fila4:
				m=0xD4+x;
 800075c:	79fb      	ldrb	r3, [r7, #7]
 800075e:	3b2c      	subs	r3, #44	; 0x2c
 8000760:	73fb      	strb	r3, [r7, #15]
				n=(0xD4+x)>>4;
 8000762:	79fb      	ldrb	r3, [r7, #7]
 8000764:	33d4      	adds	r3, #212	; 0xd4
 8000766:	111b      	asrs	r3, r3, #4
 8000768:	73bb      	strb	r3, [r7, #14]
				LCD_STM32_Cmd(n);
 800076a:	7bbb      	ldrb	r3, [r7, #14]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff ff09 	bl	8000584 <LCD_STM32_Cmd>
				LCD_STM32_Cmd(m);
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff ff05 	bl	8000584 <LCD_STM32_Cmd>
		break;
 800077a:	bf00      	nop
	}

}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	40020000 	.word	0x40020000

08000788 <LCD_STM32_Print_Char>:
void LCD_STM32_Print_Char(char c){
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	4603      	mov	r3, r0
 8000790:	71fb      	strb	r3, [r7, #7]
	uint8_t m,n;
	m=c>>4;
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	091b      	lsrs	r3, r3, #4
 8000796:	73fb      	strb	r3, [r7, #15]
	n=c;
 8000798:	79fb      	ldrb	r3, [r7, #7]
 800079a:	73bb      	strb	r3, [r7, #14]
	RS_ON;
 800079c:	2201      	movs	r2, #1
 800079e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <LCD_STM32_Print_Char+0x38>)
 80007a4:	f000 fed4 	bl	8001550 <HAL_GPIO_WritePin>
	LCD_STM32_Cmd(m);
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff feea 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(n);
 80007b0:	7bbb      	ldrb	r3, [r7, #14]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f7ff fee6 	bl	8000584 <LCD_STM32_Cmd>
}
 80007b8:	bf00      	nop
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40020000 	.word	0x40020000

080007c4 <LCD_STM32_Print_String>:
void LCD_STM32_Print_String(char *c){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	char *ptr;
	ptr = c;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	60fb      	str	r3, [r7, #12]
	while(*ptr)
 80007d0:	e006      	b.n	80007e0 <LCD_STM32_Print_String+0x1c>
		LCD_STM32_Print_Char(*ptr++);
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	60fa      	str	r2, [r7, #12]
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	4618      	mov	r0, r3
 80007dc:	f7ff ffd4 	bl	8000788 <LCD_STM32_Print_Char>
	while(*ptr)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1f4      	bne.n	80007d2 <LCD_STM32_Print_String+0xe>
}
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	3710      	adds	r7, #16
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <LCD_STM32_New_Char>:
void LCD_STM32_New_Char(uint8_t a,uint8_t b,uint8_t c,uint8_t d ,uint8_t e ,uint8_t f,uint8_t g,uint8_t h,uint8_t i){
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4604      	mov	r4, r0
 80007fc:	4608      	mov	r0, r1
 80007fe:	4611      	mov	r1, r2
 8000800:	461a      	mov	r2, r3
 8000802:	4623      	mov	r3, r4
 8000804:	71fb      	strb	r3, [r7, #7]
 8000806:	4603      	mov	r3, r0
 8000808:	71bb      	strb	r3, [r7, #6]
 800080a:	460b      	mov	r3, r1
 800080c:	717b      	strb	r3, [r7, #5]
 800080e:	4613      	mov	r3, r2
 8000810:	713b      	strb	r3, [r7, #4]

	  uint8_t m,n;
		  switch(a){
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	2b03      	cmp	r3, #3
 8000816:	f000 8132 	beq.w	8000a7e <LCD_STM32_New_Char+0x28a>
 800081a:	2b03      	cmp	r3, #3
 800081c:	f300 81bd 	bgt.w	8000b9a <LCD_STM32_New_Char+0x3a6>
 8000820:	2b01      	cmp	r3, #1
 8000822:	d003      	beq.n	800082c <LCD_STM32_New_Char+0x38>
 8000824:	2b02      	cmp	r3, #2
 8000826:	f000 808f 	beq.w	8000948 <LCD_STM32_New_Char+0x154>
			  break;
		  }



}
 800082a:	e1b6      	b.n	8000b9a <LCD_STM32_New_Char+0x3a6>
			  LCD_STM32_Cmd(0x04);
 800082c:	2004      	movs	r0, #4
 800082e:	f7ff fea9 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x00);
 8000832:	2000      	movs	r0, #0
 8000834:	f7ff fea6 	bl	8000584 <LCD_STM32_Cmd>
			  RS_ON;
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800083e:	48d9      	ldr	r0, [pc, #868]	; (8000ba4 <LCD_STM32_New_Char+0x3b0>)
 8000840:	f000 fe86 	bl	8001550 <HAL_GPIO_WritePin>
			  m=b>>4;
 8000844:	79bb      	ldrb	r3, [r7, #6]
 8000846:	091b      	lsrs	r3, r3, #4
 8000848:	73fb      	strb	r3, [r7, #15]
			  n=b;
 800084a:	79bb      	ldrb	r3, [r7, #6]
 800084c:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 800084e:	7bfb      	ldrb	r3, [r7, #15]
 8000850:	4618      	mov	r0, r3
 8000852:	f7ff fe97 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000856:	7bbb      	ldrb	r3, [r7, #14]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe93 	bl	8000584 <LCD_STM32_Cmd>
			  m=c>>4;
 800085e:	797b      	ldrb	r3, [r7, #5]
 8000860:	091b      	lsrs	r3, r3, #4
 8000862:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000864:	797b      	ldrb	r3, [r7, #5]
 8000866:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000868:	7bfb      	ldrb	r3, [r7, #15]
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fe8a 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fe86 	bl	8000584 <LCD_STM32_Cmd>
			  m=d>>4;
 8000878:	793b      	ldrb	r3, [r7, #4]
 800087a:	091b      	lsrs	r3, r3, #4
 800087c:	73fb      	strb	r3, [r7, #15]
			  n=d;
 800087e:	793b      	ldrb	r3, [r7, #4]
 8000880:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff fe7d 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 800088a:	7bbb      	ldrb	r3, [r7, #14]
 800088c:	4618      	mov	r0, r3
 800088e:	f7ff fe79 	bl	8000584 <LCD_STM32_Cmd>
			  m=e>>4;
 8000892:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000896:	091b      	lsrs	r3, r3, #4
 8000898:	73fb      	strb	r3, [r7, #15]
			  n=e;
 800089a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800089e:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe6e 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	4618      	mov	r0, r3
 80008ac:	f7ff fe6a 	bl	8000584 <LCD_STM32_Cmd>
			  m=f>>4;
 80008b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008b4:	091b      	lsrs	r3, r3, #4
 80008b6:	73fb      	strb	r3, [r7, #15]
			  n=f;
 80008b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80008bc:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe5f 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80008c6:	7bbb      	ldrb	r3, [r7, #14]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fe5b 	bl	8000584 <LCD_STM32_Cmd>
			  m=g>>4;
 80008ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008d2:	091b      	lsrs	r3, r3, #4
 80008d4:	73fb      	strb	r3, [r7, #15]
			  n=g;
 80008d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80008da:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fe50 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe4c 	bl	8000584 <LCD_STM32_Cmd>
			  m=h>>4;
 80008ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008f0:	091b      	lsrs	r3, r3, #4
 80008f2:	73fb      	strb	r3, [r7, #15]
			  n=h;
 80008f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80008f8:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe41 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000902:	7bbb      	ldrb	r3, [r7, #14]
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fe3d 	bl	8000584 <LCD_STM32_Cmd>
			  m=i>>4;
 800090a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	73fb      	strb	r3, [r7, #15]
			  n=i;
 8000912:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000916:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000918:	7bfb      	ldrb	r3, [r7, #15]
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fe32 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000920:	7bbb      	ldrb	r3, [r7, #14]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe2e 	bl	8000584 <LCD_STM32_Cmd>
			  RS_OFF;
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800092e:	489d      	ldr	r0, [pc, #628]	; (8000ba4 <LCD_STM32_New_Char+0x3b0>)
 8000930:	f000 fe0e 	bl	8001550 <HAL_GPIO_WritePin>
			  LCD_STM32_Cmd(0x00);
 8000934:	2000      	movs	r0, #0
 8000936:	f7ff fe25 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x01);
 800093a:	2001      	movs	r0, #1
 800093c:	f7ff fe22 	bl	8000584 <LCD_STM32_Cmd>
			  HAL_Delay(100);
 8000940:	2064      	movs	r0, #100	; 0x64
 8000942:	f000 fb77 	bl	8001034 <HAL_Delay>
			  break;
 8000946:	e128      	b.n	8000b9a <LCD_STM32_New_Char+0x3a6>
			  LCD_STM32_Cmd(0x04);
 8000948:	2004      	movs	r0, #4
 800094a:	f7ff fe1b 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x08);
 800094e:	2008      	movs	r0, #8
 8000950:	f7ff fe18 	bl	8000584 <LCD_STM32_Cmd>
			  RS_ON;
 8000954:	2201      	movs	r2, #1
 8000956:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095a:	4892      	ldr	r0, [pc, #584]	; (8000ba4 <LCD_STM32_New_Char+0x3b0>)
 800095c:	f000 fdf8 	bl	8001550 <HAL_GPIO_WritePin>
			  m=b>>4;
 8000960:	79bb      	ldrb	r3, [r7, #6]
 8000962:	091b      	lsrs	r3, r3, #4
 8000964:	73fb      	strb	r3, [r7, #15]
			  n=b;
 8000966:	79bb      	ldrb	r3, [r7, #6]
 8000968:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff fe09 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000972:	7bbb      	ldrb	r3, [r7, #14]
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff fe05 	bl	8000584 <LCD_STM32_Cmd>
			  m=c>>4;
 800097a:	797b      	ldrb	r3, [r7, #5]
 800097c:	091b      	lsrs	r3, r3, #4
 800097e:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000980:	797b      	ldrb	r3, [r7, #5]
 8000982:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000984:	7bfb      	ldrb	r3, [r7, #15]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fdfc 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 800098c:	7bbb      	ldrb	r3, [r7, #14]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fdf8 	bl	8000584 <LCD_STM32_Cmd>
			  m=c>>4;
 8000994:	797b      	ldrb	r3, [r7, #5]
 8000996:	091b      	lsrs	r3, r3, #4
 8000998:	73fb      	strb	r3, [r7, #15]
			  n=c;
 800099a:	797b      	ldrb	r3, [r7, #5]
 800099c:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 800099e:	7bfb      	ldrb	r3, [r7, #15]
 80009a0:	4618      	mov	r0, r3
 80009a2:	f7ff fdef 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff fdeb 	bl	8000584 <LCD_STM32_Cmd>
			  m=d>>4;
 80009ae:	793b      	ldrb	r3, [r7, #4]
 80009b0:	091b      	lsrs	r3, r3, #4
 80009b2:	73fb      	strb	r3, [r7, #15]
			  n=d;
 80009b4:	793b      	ldrb	r3, [r7, #4]
 80009b6:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f7ff fde2 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80009c0:	7bbb      	ldrb	r3, [r7, #14]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fdde 	bl	8000584 <LCD_STM32_Cmd>
			  m=e>>4;
 80009c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009cc:	091b      	lsrs	r3, r3, #4
 80009ce:	73fb      	strb	r3, [r7, #15]
			  n=e;
 80009d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009d4:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fdd3 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80009de:	7bbb      	ldrb	r3, [r7, #14]
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fdcf 	bl	8000584 <LCD_STM32_Cmd>
			  m=f>>4;
 80009e6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009ea:	091b      	lsrs	r3, r3, #4
 80009ec:	73fb      	strb	r3, [r7, #15]
			  n=f;
 80009ee:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f2:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 80009f4:	7bfb      	ldrb	r3, [r7, #15]
 80009f6:	4618      	mov	r0, r3
 80009f8:	f7ff fdc4 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 80009fc:	7bbb      	ldrb	r3, [r7, #14]
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fdc0 	bl	8000584 <LCD_STM32_Cmd>
			  m=g>>4;
 8000a04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a08:	091b      	lsrs	r3, r3, #4
 8000a0a:	73fb      	strb	r3, [r7, #15]
			  n=g;
 8000a0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a10:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff fdb5 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000a1a:	7bbb      	ldrb	r3, [r7, #14]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fdb1 	bl	8000584 <LCD_STM32_Cmd>
			  m=h>>4;
 8000a22:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a26:	091b      	lsrs	r3, r3, #4
 8000a28:	73fb      	strb	r3, [r7, #15]
			  n=h;
 8000a2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000a2e:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000a30:	7bfb      	ldrb	r3, [r7, #15]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff fda6 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000a38:	7bbb      	ldrb	r3, [r7, #14]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff fda2 	bl	8000584 <LCD_STM32_Cmd>
			  m=i>>4;
 8000a40:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a44:	091b      	lsrs	r3, r3, #4
 8000a46:	73fb      	strb	r3, [r7, #15]
			  n=i;
 8000a48:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000a4c:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000a4e:	7bfb      	ldrb	r3, [r7, #15]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff fd97 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000a56:	7bbb      	ldrb	r3, [r7, #14]
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f7ff fd93 	bl	8000584 <LCD_STM32_Cmd>
			  RS_OFF;
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a64:	484f      	ldr	r0, [pc, #316]	; (8000ba4 <LCD_STM32_New_Char+0x3b0>)
 8000a66:	f000 fd73 	bl	8001550 <HAL_GPIO_WritePin>
			  LCD_STM32_Cmd(0x00);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f7ff fd8a 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x01);
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fd87 	bl	8000584 <LCD_STM32_Cmd>
			  HAL_Delay(100);
 8000a76:	2064      	movs	r0, #100	; 0x64
 8000a78:	f000 fadc 	bl	8001034 <HAL_Delay>
			  break;
 8000a7c:	e08d      	b.n	8000b9a <LCD_STM32_New_Char+0x3a6>
			  LCD_STM32_Cmd(0x04);
 8000a7e:	2004      	movs	r0, #4
 8000a80:	f7ff fd80 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0xFF);
 8000a84:	20ff      	movs	r0, #255	; 0xff
 8000a86:	f7ff fd7d 	bl	8000584 <LCD_STM32_Cmd>
			  RS_ON;
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a90:	4844      	ldr	r0, [pc, #272]	; (8000ba4 <LCD_STM32_New_Char+0x3b0>)
 8000a92:	f000 fd5d 	bl	8001550 <HAL_GPIO_WritePin>
			  m=b>>4;
 8000a96:	79bb      	ldrb	r3, [r7, #6]
 8000a98:	091b      	lsrs	r3, r3, #4
 8000a9a:	73fb      	strb	r3, [r7, #15]
			  n=b;
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff fd6e 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fd6a 	bl	8000584 <LCD_STM32_Cmd>
			  m=c>>4;
 8000ab0:	797b      	ldrb	r3, [r7, #5]
 8000ab2:	091b      	lsrs	r3, r3, #4
 8000ab4:	73fb      	strb	r3, [r7, #15]
			  n=c;
 8000ab6:	797b      	ldrb	r3, [r7, #5]
 8000ab8:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000aba:	7bfb      	ldrb	r3, [r7, #15]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fd61 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000ac2:	7bbb      	ldrb	r3, [r7, #14]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff fd5d 	bl	8000584 <LCD_STM32_Cmd>
			  m=d>>4;
 8000aca:	793b      	ldrb	r3, [r7, #4]
 8000acc:	091b      	lsrs	r3, r3, #4
 8000ace:	73fb      	strb	r3, [r7, #15]
			  n=d;
 8000ad0:	793b      	ldrb	r3, [r7, #4]
 8000ad2:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000ad4:	7bfb      	ldrb	r3, [r7, #15]
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f7ff fd54 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000adc:	7bbb      	ldrb	r3, [r7, #14]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff fd50 	bl	8000584 <LCD_STM32_Cmd>
			  m=e>>4;
 8000ae4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ae8:	091b      	lsrs	r3, r3, #4
 8000aea:	73fb      	strb	r3, [r7, #15]
			  n=e;
 8000aec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000af0:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fd45 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000afa:	7bbb      	ldrb	r3, [r7, #14]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fd41 	bl	8000584 <LCD_STM32_Cmd>
			  m=f>>4;
 8000b02:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b06:	091b      	lsrs	r3, r3, #4
 8000b08:	73fb      	strb	r3, [r7, #15]
			  n=f;
 8000b0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b0e:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000b10:	7bfb      	ldrb	r3, [r7, #15]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fd36 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f7ff fd32 	bl	8000584 <LCD_STM32_Cmd>
			  m=g>>4;
 8000b20:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b24:	091b      	lsrs	r3, r3, #4
 8000b26:	73fb      	strb	r3, [r7, #15]
			  n=g;
 8000b28:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b2c:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fd27 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000b36:	7bbb      	ldrb	r3, [r7, #14]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff fd23 	bl	8000584 <LCD_STM32_Cmd>
			  m=h>>4;
 8000b3e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b42:	091b      	lsrs	r3, r3, #4
 8000b44:	73fb      	strb	r3, [r7, #15]
			  n=h;
 8000b46:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b4a:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000b4c:	7bfb      	ldrb	r3, [r7, #15]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fd18 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000b54:	7bbb      	ldrb	r3, [r7, #14]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fd14 	bl	8000584 <LCD_STM32_Cmd>
			  m=i>>4;
 8000b5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b60:	091b      	lsrs	r3, r3, #4
 8000b62:	73fb      	strb	r3, [r7, #15]
			  n=i;
 8000b64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000b68:	73bb      	strb	r3, [r7, #14]
			  LCD_STM32_Cmd(m);
 8000b6a:	7bfb      	ldrb	r3, [r7, #15]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fd09 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(n);
 8000b72:	7bbb      	ldrb	r3, [r7, #14]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fd05 	bl	8000584 <LCD_STM32_Cmd>
			  RS_OFF;
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b80:	4808      	ldr	r0, [pc, #32]	; (8000ba4 <LCD_STM32_New_Char+0x3b0>)
 8000b82:	f000 fce5 	bl	8001550 <HAL_GPIO_WritePin>
			  LCD_STM32_Cmd(0x00);
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fcfc 	bl	8000584 <LCD_STM32_Cmd>
			  LCD_STM32_Cmd(0x01);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f7ff fcf9 	bl	8000584 <LCD_STM32_Cmd>
			  HAL_Delay(100);
 8000b92:	2064      	movs	r0, #100	; 0x64
 8000b94:	f000 fa4e 	bl	8001034 <HAL_Delay>
			  break;
 8000b98:	bf00      	nop
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd90      	pop	{r4, r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40020000 	.word	0x40020000

08000ba8 <LCD_STM32_Print_New_Char>:
void LCD_STM32_Print_New_Char(uint8_t a){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	71fb      	strb	r3, [r7, #7]
	RS_ON;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bb8:	480a      	ldr	r0, [pc, #40]	; (8000be4 <LCD_STM32_Print_New_Char+0x3c>)
 8000bba:	f000 fcc9 	bl	8001550 <HAL_GPIO_WritePin>
	LCD_STM32_Cmd(0x00);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f7ff fce0 	bl	8000584 <LCD_STM32_Cmd>
	LCD_STM32_Cmd(a-1);
 8000bc4:	79fb      	ldrb	r3, [r7, #7]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fcda 	bl	8000584 <LCD_STM32_Cmd>
	RS_OFF;
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bd6:	4803      	ldr	r0, [pc, #12]	; (8000be4 <LCD_STM32_Print_New_Char+0x3c>)
 8000bd8:	f000 fcba 	bl	8001550 <HAL_GPIO_WritePin>
}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	40020000 	.word	0x40020000

08000be8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bee:	f000 f9af 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bf2:	f000 f847 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bf6:	f000 f8ad 	bl	8000d54 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  LCD_STM32_Init();
 8000bfa:	f7ff fd3b 	bl	8000674 <LCD_STM32_Init>
  LCD_STM32_New_Char(1,0x0A,0x1F,0x1F,0x1F,0x0E,0x04,0x00,0x00);
 8000bfe:	2300      	movs	r3, #0
 8000c00:	9304      	str	r3, [sp, #16]
 8000c02:	2300      	movs	r3, #0
 8000c04:	9303      	str	r3, [sp, #12]
 8000c06:	2304      	movs	r3, #4
 8000c08:	9302      	str	r3, [sp, #8]
 8000c0a:	230e      	movs	r3, #14
 8000c0c:	9301      	str	r3, [sp, #4]
 8000c0e:	231f      	movs	r3, #31
 8000c10:	9300      	str	r3, [sp, #0]
 8000c12:	231f      	movs	r3, #31
 8000c14:	221f      	movs	r2, #31
 8000c16:	210a      	movs	r1, #10
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f7ff fdeb 	bl	80007f4 <LCD_STM32_New_Char>
  LCD_STM32_Set_Cuzrsor(0, Fila1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2000      	movs	r0, #0
 8000c22:	f7ff fd4f 	bl	80006c4 <LCD_STM32_Set_Cuzrsor>
  LCD_STM32_Print_String("Hola mundo!!");
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <main+0x90>)
 8000c28:	f7ff fdcc 	bl	80007c4 <LCD_STM32_Print_String>
  LCD_STM32_Set_Cuzrsor(0, Fila2);
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fd48 	bl	80006c4 <LCD_STM32_Set_Cuzrsor>
  LCD_STM32_Print_String("STM32 con Godo");
 8000c34:	4811      	ldr	r0, [pc, #68]	; (8000c7c <main+0x94>)
 8000c36:	f7ff fdc5 	bl	80007c4 <LCD_STM32_Print_String>
  LCD_STM32_Print_New_Char(1);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f7ff ffb4 	bl	8000ba8 <LCD_STM32_Print_New_Char>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  for (i = 0; i < 99; ++i) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	71fb      	strb	r3, [r7, #7]
 8000c44:	e014      	b.n	8000c70 <main+0x88>

		  sprintf(str_i,"%02u",i);
 8000c46:	79fa      	ldrb	r2, [r7, #7]
 8000c48:	463b      	mov	r3, r7
 8000c4a:	490d      	ldr	r1, [pc, #52]	; (8000c80 <main+0x98>)
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f001 f8ef 	bl	8001e30 <siprintf>

		  LCD_STM32_Set_Cuzrsor(13, Fila1);
 8000c52:	2100      	movs	r1, #0
 8000c54:	200d      	movs	r0, #13
 8000c56:	f7ff fd35 	bl	80006c4 <LCD_STM32_Set_Cuzrsor>
		  LCD_STM32_Print_String(str_i);
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fdb1 	bl	80007c4 <LCD_STM32_Print_String>
		  HAL_Delay(500);
 8000c62:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c66:	f000 f9e5 	bl	8001034 <HAL_Delay>
	  for (i = 0; i < 99; ++i) {
 8000c6a:	79fb      	ldrb	r3, [r7, #7]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b62      	cmp	r3, #98	; 0x62
 8000c74:	d9e7      	bls.n	8000c46 <main+0x5e>
 8000c76:	e7e3      	b.n	8000c40 <main+0x58>
 8000c78:	08002724 	.word	0x08002724
 8000c7c:	08002734 	.word	0x08002734
 8000c80:	08002744 	.word	0x08002744

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b094      	sub	sp, #80	; 0x50
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	2230      	movs	r2, #48	; 0x30
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 f8c4 	bl	8001e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <SystemClock_Config+0xc8>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a26      	ldr	r2, [pc, #152]	; (8000d4c <SystemClock_Config+0xc8>)
 8000cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <SystemClock_Config+0xc8>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	4b21      	ldr	r3, [pc, #132]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cd2:	6013      	str	r3, [r2, #0]
 8000cd4:	4b1e      	ldr	r3, [pc, #120]	; (8000d50 <SystemClock_Config+0xcc>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cdc:	607b      	str	r3, [r7, #4]
 8000cde:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ce8:	2310      	movs	r3, #16
 8000cea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cec:	2302      	movs	r3, #2
 8000cee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000cf8:	2364      	movs	r3, #100	; 0x64
 8000cfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d00:	2304      	movs	r3, #4
 8000d02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d04:	f107 0320 	add.w	r3, r7, #32
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 fc3b 	bl	8001584 <HAL_RCC_OscConfig>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d14:	f000 f852 	bl	8000dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d18:	230f      	movs	r3, #15
 8000d1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	2103      	movs	r1, #3
 8000d34:	4618      	mov	r0, r3
 8000d36:	f000 fe9d 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d40:	f000 f83c 	bl	8000dbc <Error_Handler>
  }
}
 8000d44:	bf00      	nop
 8000d46:	3750      	adds	r7, #80	; 0x50
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40007000 	.word	0x40007000

08000d54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	603b      	str	r3, [r7, #0]
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_GPIO_Init+0x60>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <MX_GPIO_Init+0x60>)
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	6313      	str	r3, [r2, #48]	; 0x30
 8000d78:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_GPIO_Init+0x60>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	603b      	str	r3, [r7, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RS_Pin|E_Pin|D4_Pin|D5_Pin
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 411f 	mov.w	r1, #40704	; 0x9f00
 8000d8a:	480b      	ldr	r0, [pc, #44]	; (8000db8 <MX_GPIO_Init+0x64>)
 8000d8c:	f000 fbe0 	bl	8001550 <HAL_GPIO_WritePin>
                          |D6_Pin|D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RS_Pin E_Pin D4_Pin D5_Pin
                           D6_Pin D7_Pin */
  GPIO_InitStruct.Pin = RS_Pin|E_Pin|D4_Pin|D5_Pin
 8000d90:	f44f 431f 	mov.w	r3, #40704	; 0x9f00
 8000d94:	607b      	str	r3, [r7, #4]
                          |D6_Pin|D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d96:	2301      	movs	r3, #1
 8000d98:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4619      	mov	r1, r3
 8000da6:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_GPIO_Init+0x64>)
 8000da8:	f000 fa4e 	bl	8001248 <HAL_GPIO_Init>

}
 8000dac:	bf00      	nop
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc0:	b672      	cpsid	i
}
 8000dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc4:	e7fe      	b.n	8000dc4 <Error_Handler+0x8>
	...

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd6:	4a0f      	ldr	r2, [pc, #60]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <HAL_MspInit+0x4c>)
 8000de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	603b      	str	r3, [r7, #0]
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <HAL_MspInit+0x4c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <HAL_MspInit+0x4c>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	603b      	str	r3, [r7, #0]
 8000e04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e06:	bf00      	nop
 8000e08:	370c      	adds	r7, #12
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	40023800 	.word	0x40023800

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f8c6 	bl	8000ff4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e74:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <_sbrk+0x5c>)
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <_sbrk+0x60>)
 8000e78:	1ad3      	subs	r3, r2, r3
 8000e7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e80:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <_sbrk+0x64>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d102      	bne.n	8000e8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <_sbrk+0x64>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <_sbrk+0x68>)
 8000e8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <_sbrk+0x64>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d207      	bcs.n	8000eac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e9c:	f000 ff96 	bl	8001dcc <__errno>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	220c      	movs	r2, #12
 8000ea4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eaa:	e009      	b.n	8000ec0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eac:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <_sbrk+0x64>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <_sbrk+0x64>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4413      	add	r3, r2
 8000eba:	4a05      	ldr	r2, [pc, #20]	; (8000ed0 <_sbrk+0x64>)
 8000ebc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20020000 	.word	0x20020000
 8000ecc:	00000400 	.word	0x00000400
 8000ed0:	2000008c 	.word	0x2000008c
 8000ed4:	200000a8 	.word	0x200000a8

08000ed8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	; (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f00:	480d      	ldr	r0, [pc, #52]	; (8000f38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f02:	490e      	ldr	r1, [pc, #56]	; (8000f3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f04:	4a0e      	ldr	r2, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f08:	e002      	b.n	8000f10 <LoopCopyDataInit>

08000f0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f0e:	3304      	adds	r3, #4

08000f10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f14:	d3f9      	bcc.n	8000f0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f18:	4c0b      	ldr	r4, [pc, #44]	; (8000f48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f1c:	e001      	b.n	8000f22 <LoopFillZerobss>

08000f1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f20:	3204      	adds	r2, #4

08000f22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f24:	d3fb      	bcc.n	8000f1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f26:	f7ff ffd7 	bl	8000ed8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f000 ff55 	bl	8001dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fe5b 	bl	8000be8 <main>
  bx  lr    
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f40:	080027a0 	.word	0x080027a0
  ldr r2, =_sbss
 8000f44:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f48:	200000a4 	.word	0x200000a4

08000f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_Init+0x40>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a0d      	ldr	r2, [pc, #52]	; (8000f90 <HAL_Init+0x40>)
 8000f5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f60:	4b0b      	ldr	r3, [pc, #44]	; (8000f90 <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0a      	ldr	r2, [pc, #40]	; (8000f90 <HAL_Init+0x40>)
 8000f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a07      	ldr	r2, [pc, #28]	; (8000f90 <HAL_Init+0x40>)
 8000f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f78:	2003      	movs	r0, #3
 8000f7a:	f000 f931 	bl	80011e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f000 f808 	bl	8000f94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f84:	f7ff ff20 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f88:	2300      	movs	r3, #0
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40023c00 	.word	0x40023c00

08000f94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9c:	4b12      	ldr	r3, [pc, #72]	; (8000fe8 <HAL_InitTick+0x54>)
 8000f9e:	681a      	ldr	r2, [r3, #0]
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_InitTick+0x58>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f93b 	bl	800122e <HAL_SYSTICK_Config>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00e      	b.n	8000fe0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2b0f      	cmp	r3, #15
 8000fc6:	d80a      	bhi.n	8000fde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd0:	f000 f911 	bl	80011f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd4:	4a06      	ldr	r2, [pc, #24]	; (8000ff0 <HAL_InitTick+0x5c>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e000      	b.n	8000fe0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000008 	.word	0x20000008
 8000ff0:	20000004 	.word	0x20000004

08000ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x20>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b06      	ldr	r3, [pc, #24]	; (8001018 <HAL_IncTick+0x24>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4413      	add	r3, r2
 8001004:	4a04      	ldr	r2, [pc, #16]	; (8001018 <HAL_IncTick+0x24>)
 8001006:	6013      	str	r3, [r2, #0]
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000008 	.word	0x20000008
 8001018:	20000090 	.word	0x20000090

0800101c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return uwTick;
 8001020:	4b03      	ldr	r3, [pc, #12]	; (8001030 <HAL_GetTick+0x14>)
 8001022:	681b      	ldr	r3, [r3, #0]
}
 8001024:	4618      	mov	r0, r3
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000090 	.word	0x20000090

08001034 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800103c:	f7ff ffee 	bl	800101c <HAL_GetTick>
 8001040:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104c:	d005      	beq.n	800105a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800104e:	4b0a      	ldr	r3, [pc, #40]	; (8001078 <HAL_Delay+0x44>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	461a      	mov	r2, r3
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	4413      	add	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800105a:	bf00      	nop
 800105c:	f7ff ffde 	bl	800101c <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	68bb      	ldr	r3, [r7, #8]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	68fa      	ldr	r2, [r7, #12]
 8001068:	429a      	cmp	r2, r3
 800106a:	d8f7      	bhi.n	800105c <HAL_Delay+0x28>
  {
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3710      	adds	r7, #16
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000008 	.word	0x20000008

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ae:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	60d3      	str	r3, [r2, #12]
}
 80010b4:	bf00      	nop
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	6039      	str	r1, [r7, #0]
 80010ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	db0a      	blt.n	800110a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	490c      	ldr	r1, [pc, #48]	; (800112c <__NVIC_SetPriority+0x4c>)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	0112      	lsls	r2, r2, #4
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	440b      	add	r3, r1
 8001104:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001108:	e00a      	b.n	8001120 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	b2da      	uxtb	r2, r3
 800110e:	4908      	ldr	r1, [pc, #32]	; (8001130 <__NVIC_SetPriority+0x50>)
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f003 030f 	and.w	r3, r3, #15
 8001116:	3b04      	subs	r3, #4
 8001118:	0112      	lsls	r2, r2, #4
 800111a:	b2d2      	uxtb	r2, r2
 800111c:	440b      	add	r3, r1
 800111e:	761a      	strb	r2, [r3, #24]
}
 8001120:	bf00      	nop
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000e100 	.word	0xe000e100
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001134:	b480      	push	{r7}
 8001136:	b089      	sub	sp, #36	; 0x24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	f1c3 0307 	rsb	r3, r3, #7
 800114e:	2b04      	cmp	r3, #4
 8001150:	bf28      	it	cs
 8001152:	2304      	movcs	r3, #4
 8001154:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3304      	adds	r3, #4
 800115a:	2b06      	cmp	r3, #6
 800115c:	d902      	bls.n	8001164 <NVIC_EncodePriority+0x30>
 800115e:	69fb      	ldr	r3, [r7, #28]
 8001160:	3b03      	subs	r3, #3
 8001162:	e000      	b.n	8001166 <NVIC_EncodePriority+0x32>
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	f04f 32ff 	mov.w	r2, #4294967295
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43da      	mvns	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	401a      	ands	r2, r3
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800117c:	f04f 31ff 	mov.w	r1, #4294967295
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa01 f303 	lsl.w	r3, r1, r3
 8001186:	43d9      	mvns	r1, r3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800118c:	4313      	orrs	r3, r2
         );
}
 800118e:	4618      	mov	r0, r3
 8001190:	3724      	adds	r7, #36	; 0x24
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011ac:	d301      	bcc.n	80011b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ae:	2301      	movs	r3, #1
 80011b0:	e00f      	b.n	80011d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b2:	4a0a      	ldr	r2, [pc, #40]	; (80011dc <SysTick_Config+0x40>)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ba:	210f      	movs	r1, #15
 80011bc:	f04f 30ff 	mov.w	r0, #4294967295
 80011c0:	f7ff ff8e 	bl	80010e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <SysTick_Config+0x40>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <SysTick_Config+0x40>)
 80011cc:	2207      	movs	r2, #7
 80011ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	e000e010 	.word	0xe000e010

080011e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff47 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b086      	sub	sp, #24
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	4603      	mov	r3, r0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001208:	f7ff ff5c 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 800120c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	6978      	ldr	r0, [r7, #20]
 8001214:	f7ff ff8e 	bl	8001134 <NVIC_EncodePriority>
 8001218:	4602      	mov	r2, r0
 800121a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121e:	4611      	mov	r1, r2
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff5d 	bl	80010e0 <__NVIC_SetPriority>
}
 8001226:	bf00      	nop
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffb0 	bl	800119c <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e159      	b.n	8001518 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8148 	bne.w	8001512 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80a2 	beq.w	8001512 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b57      	ldr	r3, [pc, #348]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d6:	4a56      	ldr	r2, [pc, #344]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	; 0x44
 80013de:	4b54      	ldr	r3, [pc, #336]	; (8001530 <HAL_GPIO_Init+0x2e8>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a52      	ldr	r2, [pc, #328]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a49      	ldr	r2, [pc, #292]	; (8001538 <HAL_GPIO_Init+0x2f0>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d019      	beq.n	800144a <HAL_GPIO_Init+0x202>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a48      	ldr	r2, [pc, #288]	; (800153c <HAL_GPIO_Init+0x2f4>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d013      	beq.n	8001446 <HAL_GPIO_Init+0x1fe>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_GPIO_Init+0x2f8>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d00d      	beq.n	8001442 <HAL_GPIO_Init+0x1fa>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a46      	ldr	r2, [pc, #280]	; (8001544 <HAL_GPIO_Init+0x2fc>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d007      	beq.n	800143e <HAL_GPIO_Init+0x1f6>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a45      	ldr	r2, [pc, #276]	; (8001548 <HAL_GPIO_Init+0x300>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d101      	bne.n	800143a <HAL_GPIO_Init+0x1f2>
 8001436:	2304      	movs	r3, #4
 8001438:	e008      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143a:	2307      	movs	r3, #7
 800143c:	e006      	b.n	800144c <HAL_GPIO_Init+0x204>
 800143e:	2303      	movs	r3, #3
 8001440:	e004      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001442:	2302      	movs	r3, #2
 8001444:	e002      	b.n	800144c <HAL_GPIO_Init+0x204>
 8001446:	2301      	movs	r3, #1
 8001448:	e000      	b.n	800144c <HAL_GPIO_Init+0x204>
 800144a:	2300      	movs	r3, #0
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	f002 0203 	and.w	r2, r2, #3
 8001452:	0092      	lsls	r2, r2, #2
 8001454:	4093      	lsls	r3, r2
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800145c:	4935      	ldr	r1, [pc, #212]	; (8001534 <HAL_GPIO_Init+0x2ec>)
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	089b      	lsrs	r3, r3, #2
 8001462:	3302      	adds	r3, #2
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146a:	4b38      	ldr	r3, [pc, #224]	; (800154c <HAL_GPIO_Init+0x304>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	43db      	mvns	r3, r3
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	4013      	ands	r3, r2
 8001478:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800148e:	4a2f      	ldr	r2, [pc, #188]	; (800154c <HAL_GPIO_Init+0x304>)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001494:	4b2d      	ldr	r3, [pc, #180]	; (800154c <HAL_GPIO_Init+0x304>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d003      	beq.n	80014b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014be:	4b23      	ldr	r3, [pc, #140]	; (800154c <HAL_GPIO_Init+0x304>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4013      	ands	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80014da:	69ba      	ldr	r2, [r7, #24]
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_GPIO_Init+0x304>)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e8:	4b18      	ldr	r3, [pc, #96]	; (800154c <HAL_GPIO_Init+0x304>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800150c:	4a0f      	ldr	r2, [pc, #60]	; (800154c <HAL_GPIO_Init+0x304>)
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	3301      	adds	r3, #1
 8001516:	61fb      	str	r3, [r7, #28]
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	2b0f      	cmp	r3, #15
 800151c:	f67f aea2 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	3724      	adds	r7, #36	; 0x24
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	40013800 	.word	0x40013800
 8001538:	40020000 	.word	0x40020000
 800153c:	40020400 	.word	0x40020400
 8001540:	40020800 	.word	0x40020800
 8001544:	40020c00 	.word	0x40020c00
 8001548:	40021000 	.word	0x40021000
 800154c:	40013c00 	.word	0x40013c00

08001550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	807b      	strh	r3, [r7, #2]
 800155c:	4613      	mov	r3, r2
 800155e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001560:	787b      	ldrb	r3, [r7, #1]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d003      	beq.n	800156e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001566:	887a      	ldrh	r2, [r7, #2]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800156c:	e003      	b.n	8001576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	041a      	lsls	r2, r3, #16
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	619a      	str	r2, [r3, #24]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
	...

08001584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d101      	bne.n	8001596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001592:	2301      	movs	r3, #1
 8001594:	e267      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d075      	beq.n	800168e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015a2:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d00c      	beq.n	80015c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ae:	4b85      	ldr	r3, [pc, #532]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d112      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015ba:	4b82      	ldr	r3, [pc, #520]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015c6:	d10b      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015c8:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d05b      	beq.n	800168c <HAL_RCC_OscConfig+0x108>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d157      	bne.n	800168c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e242      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x74>
 80015ea:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a75      	ldr	r2, [pc, #468]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e01d      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001600:	d10c      	bne.n	800161c <HAL_RCC_OscConfig+0x98>
 8001602:	4b70      	ldr	r3, [pc, #448]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a6f      	ldr	r2, [pc, #444]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800160c:	6013      	str	r3, [r2, #0]
 800160e:	4b6d      	ldr	r3, [pc, #436]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a6c      	ldr	r2, [pc, #432]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001618:	6013      	str	r3, [r2, #0]
 800161a:	e00b      	b.n	8001634 <HAL_RCC_OscConfig+0xb0>
 800161c:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a68      	ldr	r2, [pc, #416]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b66      	ldr	r3, [pc, #408]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a65      	ldr	r2, [pc, #404]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800162e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d013      	beq.n	8001664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800163c:	f7ff fcee 	bl	800101c <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001644:	f7ff fcea 	bl	800101c <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b64      	cmp	r3, #100	; 0x64
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e207      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001656:	4b5b      	ldr	r3, [pc, #364]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0xc0>
 8001662:	e014      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001664:	f7ff fcda 	bl	800101c <HAL_GetTick>
 8001668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800166a:	e008      	b.n	800167e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800166c:	f7ff fcd6 	bl	800101c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e1f3      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800167e:	4b51      	ldr	r3, [pc, #324]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1f0      	bne.n	800166c <HAL_RCC_OscConfig+0xe8>
 800168a:	e000      	b.n	800168e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d063      	beq.n	8001762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800169a:	4b4a      	ldr	r3, [pc, #296]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	f003 030c 	and.w	r3, r3, #12
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d00b      	beq.n	80016be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016a6:	4b47      	ldr	r3, [pc, #284]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016ae:	2b08      	cmp	r3, #8
 80016b0:	d11c      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016b2:	4b44      	ldr	r3, [pc, #272]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d005      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e1c7      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016d6:	4b3b      	ldr	r3, [pc, #236]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	00db      	lsls	r3, r3, #3
 80016e4:	4937      	ldr	r1, [pc, #220]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 80016e6:	4313      	orrs	r3, r2
 80016e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	e03a      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d020      	beq.n	8001736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016f4:	4b34      	ldr	r3, [pc, #208]	; (80017c8 <HAL_RCC_OscConfig+0x244>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016fa:	f7ff fc8f 	bl	800101c <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001702:	f7ff fc8b 	bl	800101c <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e1a8      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001714:	4b2b      	ldr	r3, [pc, #172]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001720:	4b28      	ldr	r3, [pc, #160]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	691b      	ldr	r3, [r3, #16]
 800172c:	00db      	lsls	r3, r3, #3
 800172e:	4925      	ldr	r1, [pc, #148]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]
 8001734:	e015      	b.n	8001762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001736:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_OscConfig+0x244>)
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800173c:	f7ff fc6e 	bl	800101c <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001744:	f7ff fc6a 	bl	800101c <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e187      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f0      	bne.n	8001744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0308 	and.w	r3, r3, #8
 800176a:	2b00      	cmp	r3, #0
 800176c:	d036      	beq.n	80017dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d016      	beq.n	80017a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_RCC_OscConfig+0x248>)
 8001778:	2201      	movs	r2, #1
 800177a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177c:	f7ff fc4e 	bl	800101c <HAL_GetTick>
 8001780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001784:	f7ff fc4a 	bl	800101c <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e167      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <HAL_RCC_OscConfig+0x240>)
 8001798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d0f0      	beq.n	8001784 <HAL_RCC_OscConfig+0x200>
 80017a2:	e01b      	b.n	80017dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <HAL_RCC_OscConfig+0x248>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017aa:	f7ff fc37 	bl	800101c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	e00e      	b.n	80017d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b2:	f7ff fc33 	bl	800101c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d907      	bls.n	80017d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e150      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	42470000 	.word	0x42470000
 80017cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017d0:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80017d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ea      	bne.n	80017b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0304 	and.w	r3, r3, #4
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 8097 	beq.w	8001918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ee:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10f      	bne.n	800181a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b7d      	ldr	r3, [pc, #500]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	4a7c      	ldr	r2, [pc, #496]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001808:	6413      	str	r3, [r2, #64]	; 0x40
 800180a:	4b7a      	ldr	r3, [pc, #488]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001816:	2301      	movs	r3, #1
 8001818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b77      	ldr	r3, [pc, #476]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	2b00      	cmp	r3, #0
 8001824:	d118      	bne.n	8001858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001826:	4b74      	ldr	r3, [pc, #464]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a73      	ldr	r2, [pc, #460]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800182c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001832:	f7ff fbf3 	bl	800101c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800183a:	f7ff fbef 	bl	800101c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e10c      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184c:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x474>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001854:	2b00      	cmp	r3, #0
 8001856:	d0f0      	beq.n	800183a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d106      	bne.n	800186e <HAL_RCC_OscConfig+0x2ea>
 8001860:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001864:	4a63      	ldr	r2, [pc, #396]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	6713      	str	r3, [r2, #112]	; 0x70
 800186c:	e01c      	b.n	80018a8 <HAL_RCC_OscConfig+0x324>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	2b05      	cmp	r3, #5
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x30c>
 8001876:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800187a:	4a5e      	ldr	r2, [pc, #376]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800187c:	f043 0304 	orr.w	r3, r3, #4
 8001880:	6713      	str	r3, [r2, #112]	; 0x70
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001886:	4a5b      	ldr	r2, [pc, #364]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	6713      	str	r3, [r2, #112]	; 0x70
 800188e:	e00b      	b.n	80018a8 <HAL_RCC_OscConfig+0x324>
 8001890:	4b58      	ldr	r3, [pc, #352]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	4a57      	ldr	r2, [pc, #348]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001896:	f023 0301 	bic.w	r3, r3, #1
 800189a:	6713      	str	r3, [r2, #112]	; 0x70
 800189c:	4b55      	ldr	r3, [pc, #340]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800189e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a0:	4a54      	ldr	r2, [pc, #336]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018a2:	f023 0304 	bic.w	r3, r3, #4
 80018a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d015      	beq.n	80018dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff fbb4 	bl	800101c <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff fbb0 	bl	800101c <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0cb      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018ce:	4b49      	ldr	r3, [pc, #292]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0ee      	beq.n	80018b8 <HAL_RCC_OscConfig+0x334>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018dc:	f7ff fb9e 	bl	800101c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb9a 	bl	800101c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0b5      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018fa:	4b3e      	ldr	r3, [pc, #248]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1ee      	bne.n	80018e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001906:	7dfb      	ldrb	r3, [r7, #23]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190c:	4b39      	ldr	r3, [pc, #228]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	4a38      	ldr	r2, [pc, #224]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80a1 	beq.w	8001a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001922:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
 800192a:	2b08      	cmp	r3, #8
 800192c:	d05c      	beq.n	80019e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	699b      	ldr	r3, [r3, #24]
 8001932:	2b02      	cmp	r3, #2
 8001934:	d141      	bne.n	80019ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b31      	ldr	r3, [pc, #196]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fb6e 	bl	800101c <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb6a 	bl	800101c <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e087      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b27      	ldr	r3, [pc, #156]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	491b      	ldr	r1, [pc, #108]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800198c:	4b1b      	ldr	r3, [pc, #108]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 800198e:	2201      	movs	r2, #1
 8001990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff fb43 	bl	800101c <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199a:	f7ff fb3f 	bl	800101c <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e05c      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019ac:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x416>
 80019b8:	e054      	b.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_RCC_OscConfig+0x478>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb2c 	bl	800101c <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff fb28 	bl	800101c <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e045      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019da:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <HAL_RCC_OscConfig+0x470>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x444>
 80019e6:	e03d      	b.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e038      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40007000 	.word	0x40007000
 80019fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x4ec>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d028      	beq.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d121      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11a      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0cc      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b68      	ldr	r3, [pc, #416]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d90c      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b65      	ldr	r3, [pc, #404]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b63      	ldr	r3, [pc, #396]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b8      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac8:	4b59      	ldr	r3, [pc, #356]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae0:	4b53      	ldr	r3, [pc, #332]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b50      	ldr	r3, [pc, #320]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	494d      	ldr	r1, [pc, #308]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d044      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b47      	ldr	r3, [pc, #284]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e067      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4934      	ldr	r1, [pc, #208]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7ff fa5a 	bl	800101c <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7ff fa56 	bl	800101c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04f      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d20c      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e032      	b.n	8001c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4916      	ldr	r1, [pc, #88]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be6:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	490e      	ldr	r1, [pc, #56]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 f821 	bl	8001c40 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	490a      	ldr	r1, [pc, #40]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c0c:	5ccb      	ldrb	r3, [r1, r3]
 8001c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c12:	4a09      	ldr	r2, [pc, #36]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f9ba 	bl	8000f94 <HAL_InitTick>

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40023c00 	.word	0x40023c00
 8001c30:	40023800 	.word	0x40023800
 8001c34:	0800274c 	.word	0x0800274c
 8001c38:	20000000 	.word	0x20000000
 8001c3c:	20000004 	.word	0x20000004

08001c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c44:	b090      	sub	sp, #64	; 0x40
 8001c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c50:	2300      	movs	r3, #0
 8001c52:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 030c 	and.w	r3, r3, #12
 8001c60:	2b08      	cmp	r3, #8
 8001c62:	d00d      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x40>
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	f200 80a1 	bhi.w	8001dac <HAL_RCC_GetSysClockFreq+0x16c>
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d002      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x34>
 8001c6e:	2b04      	cmp	r3, #4
 8001c70:	d003      	beq.n	8001c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c72:	e09b      	b.n	8001dac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c74:	4b53      	ldr	r3, [pc, #332]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c78:	e09b      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c7a:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c7e:	e098      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c80:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c8a:	4b4d      	ldr	r3, [pc, #308]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d028      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c96:	4b4a      	ldr	r3, [pc, #296]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	099b      	lsrs	r3, r3, #6
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	623b      	str	r3, [r7, #32]
 8001ca0:	627a      	str	r2, [r7, #36]	; 0x24
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4b47      	ldr	r3, [pc, #284]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cac:	fb03 f201 	mul.w	r2, r3, r1
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	fb00 f303 	mul.w	r3, r0, r3
 8001cb6:	4413      	add	r3, r2
 8001cb8:	4a43      	ldr	r2, [pc, #268]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cba:	fba0 1202 	umull	r1, r2, r0, r2
 8001cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cc0:	460a      	mov	r2, r1
 8001cc2:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc6:	4413      	add	r3, r2
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ccc:	2200      	movs	r2, #0
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	61fa      	str	r2, [r7, #28]
 8001cd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cd6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001cda:	f7fe fad1 	bl	8000280 <__aeabi_uldivmod>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4613      	mov	r3, r2
 8001ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ce6:	e053      	b.n	8001d90 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ce8:	4b35      	ldr	r3, [pc, #212]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	099b      	lsrs	r3, r3, #6
 8001cee:	2200      	movs	r2, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	617a      	str	r2, [r7, #20]
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001cfa:	f04f 0b00 	mov.w	fp, #0
 8001cfe:	4652      	mov	r2, sl
 8001d00:	465b      	mov	r3, fp
 8001d02:	f04f 0000 	mov.w	r0, #0
 8001d06:	f04f 0100 	mov.w	r1, #0
 8001d0a:	0159      	lsls	r1, r3, #5
 8001d0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d10:	0150      	lsls	r0, r2, #5
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	ebb2 080a 	subs.w	r8, r2, sl
 8001d1a:	eb63 090b 	sbc.w	r9, r3, fp
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d2a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d2e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d32:	ebb2 0408 	subs.w	r4, r2, r8
 8001d36:	eb63 0509 	sbc.w	r5, r3, r9
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	f04f 0300 	mov.w	r3, #0
 8001d42:	00eb      	lsls	r3, r5, #3
 8001d44:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d48:	00e2      	lsls	r2, r4, #3
 8001d4a:	4614      	mov	r4, r2
 8001d4c:	461d      	mov	r5, r3
 8001d4e:	eb14 030a 	adds.w	r3, r4, sl
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	eb45 030b 	adc.w	r3, r5, fp
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	f04f 0300 	mov.w	r3, #0
 8001d62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d66:	4629      	mov	r1, r5
 8001d68:	028b      	lsls	r3, r1, #10
 8001d6a:	4621      	mov	r1, r4
 8001d6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d70:	4621      	mov	r1, r4
 8001d72:	028a      	lsls	r2, r1, #10
 8001d74:	4610      	mov	r0, r2
 8001d76:	4619      	mov	r1, r3
 8001d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	60fa      	str	r2, [r7, #12]
 8001d80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d84:	f7fe fa7c 	bl	8000280 <__aeabi_uldivmod>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	0c1b      	lsrs	r3, r3, #16
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001da0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001daa:	e002      	b.n	8001db2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001db0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3740      	adds	r7, #64	; 0x40
 8001db8:	46bd      	mov	sp, r7
 8001dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	00f42400 	.word	0x00f42400
 8001dc8:	017d7840 	.word	0x017d7840

08001dcc <__errno>:
 8001dcc:	4b01      	ldr	r3, [pc, #4]	; (8001dd4 <__errno+0x8>)
 8001dce:	6818      	ldr	r0, [r3, #0]
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	2000000c 	.word	0x2000000c

08001dd8 <__libc_init_array>:
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	4d0d      	ldr	r5, [pc, #52]	; (8001e10 <__libc_init_array+0x38>)
 8001ddc:	4c0d      	ldr	r4, [pc, #52]	; (8001e14 <__libc_init_array+0x3c>)
 8001dde:	1b64      	subs	r4, r4, r5
 8001de0:	10a4      	asrs	r4, r4, #2
 8001de2:	2600      	movs	r6, #0
 8001de4:	42a6      	cmp	r6, r4
 8001de6:	d109      	bne.n	8001dfc <__libc_init_array+0x24>
 8001de8:	4d0b      	ldr	r5, [pc, #44]	; (8001e18 <__libc_init_array+0x40>)
 8001dea:	4c0c      	ldr	r4, [pc, #48]	; (8001e1c <__libc_init_array+0x44>)
 8001dec:	f000 fc8e 	bl	800270c <_init>
 8001df0:	1b64      	subs	r4, r4, r5
 8001df2:	10a4      	asrs	r4, r4, #2
 8001df4:	2600      	movs	r6, #0
 8001df6:	42a6      	cmp	r6, r4
 8001df8:	d105      	bne.n	8001e06 <__libc_init_array+0x2e>
 8001dfa:	bd70      	pop	{r4, r5, r6, pc}
 8001dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e00:	4798      	blx	r3
 8001e02:	3601      	adds	r6, #1
 8001e04:	e7ee      	b.n	8001de4 <__libc_init_array+0xc>
 8001e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e0a:	4798      	blx	r3
 8001e0c:	3601      	adds	r6, #1
 8001e0e:	e7f2      	b.n	8001df6 <__libc_init_array+0x1e>
 8001e10:	08002798 	.word	0x08002798
 8001e14:	08002798 	.word	0x08002798
 8001e18:	08002798 	.word	0x08002798
 8001e1c:	0800279c 	.word	0x0800279c

08001e20 <memset>:
 8001e20:	4402      	add	r2, r0
 8001e22:	4603      	mov	r3, r0
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d100      	bne.n	8001e2a <memset+0xa>
 8001e28:	4770      	bx	lr
 8001e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001e2e:	e7f9      	b.n	8001e24 <memset+0x4>

08001e30 <siprintf>:
 8001e30:	b40e      	push	{r1, r2, r3}
 8001e32:	b500      	push	{lr}
 8001e34:	b09c      	sub	sp, #112	; 0x70
 8001e36:	ab1d      	add	r3, sp, #116	; 0x74
 8001e38:	9002      	str	r0, [sp, #8]
 8001e3a:	9006      	str	r0, [sp, #24]
 8001e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001e40:	4809      	ldr	r0, [pc, #36]	; (8001e68 <siprintf+0x38>)
 8001e42:	9107      	str	r1, [sp, #28]
 8001e44:	9104      	str	r1, [sp, #16]
 8001e46:	4909      	ldr	r1, [pc, #36]	; (8001e6c <siprintf+0x3c>)
 8001e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8001e4c:	9105      	str	r1, [sp, #20]
 8001e4e:	6800      	ldr	r0, [r0, #0]
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	a902      	add	r1, sp, #8
 8001e54:	f000 f868 	bl	8001f28 <_svfiprintf_r>
 8001e58:	9b02      	ldr	r3, [sp, #8]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	701a      	strb	r2, [r3, #0]
 8001e5e:	b01c      	add	sp, #112	; 0x70
 8001e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8001e64:	b003      	add	sp, #12
 8001e66:	4770      	bx	lr
 8001e68:	2000000c 	.word	0x2000000c
 8001e6c:	ffff0208 	.word	0xffff0208

08001e70 <__ssputs_r>:
 8001e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e74:	688e      	ldr	r6, [r1, #8]
 8001e76:	429e      	cmp	r6, r3
 8001e78:	4682      	mov	sl, r0
 8001e7a:	460c      	mov	r4, r1
 8001e7c:	4690      	mov	r8, r2
 8001e7e:	461f      	mov	r7, r3
 8001e80:	d838      	bhi.n	8001ef4 <__ssputs_r+0x84>
 8001e82:	898a      	ldrh	r2, [r1, #12]
 8001e84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001e88:	d032      	beq.n	8001ef0 <__ssputs_r+0x80>
 8001e8a:	6825      	ldr	r5, [r4, #0]
 8001e8c:	6909      	ldr	r1, [r1, #16]
 8001e8e:	eba5 0901 	sub.w	r9, r5, r1
 8001e92:	6965      	ldr	r5, [r4, #20]
 8001e94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001e98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	444b      	add	r3, r9
 8001ea0:	106d      	asrs	r5, r5, #1
 8001ea2:	429d      	cmp	r5, r3
 8001ea4:	bf38      	it	cc
 8001ea6:	461d      	movcc	r5, r3
 8001ea8:	0553      	lsls	r3, r2, #21
 8001eaa:	d531      	bpl.n	8001f10 <__ssputs_r+0xa0>
 8001eac:	4629      	mov	r1, r5
 8001eae:	f000 fb63 	bl	8002578 <_malloc_r>
 8001eb2:	4606      	mov	r6, r0
 8001eb4:	b950      	cbnz	r0, 8001ecc <__ssputs_r+0x5c>
 8001eb6:	230c      	movs	r3, #12
 8001eb8:	f8ca 3000 	str.w	r3, [sl]
 8001ebc:	89a3      	ldrh	r3, [r4, #12]
 8001ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec2:	81a3      	strh	r3, [r4, #12]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ecc:	6921      	ldr	r1, [r4, #16]
 8001ece:	464a      	mov	r2, r9
 8001ed0:	f000 fabe 	bl	8002450 <memcpy>
 8001ed4:	89a3      	ldrh	r3, [r4, #12]
 8001ed6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ede:	81a3      	strh	r3, [r4, #12]
 8001ee0:	6126      	str	r6, [r4, #16]
 8001ee2:	6165      	str	r5, [r4, #20]
 8001ee4:	444e      	add	r6, r9
 8001ee6:	eba5 0509 	sub.w	r5, r5, r9
 8001eea:	6026      	str	r6, [r4, #0]
 8001eec:	60a5      	str	r5, [r4, #8]
 8001eee:	463e      	mov	r6, r7
 8001ef0:	42be      	cmp	r6, r7
 8001ef2:	d900      	bls.n	8001ef6 <__ssputs_r+0x86>
 8001ef4:	463e      	mov	r6, r7
 8001ef6:	6820      	ldr	r0, [r4, #0]
 8001ef8:	4632      	mov	r2, r6
 8001efa:	4641      	mov	r1, r8
 8001efc:	f000 fab6 	bl	800246c <memmove>
 8001f00:	68a3      	ldr	r3, [r4, #8]
 8001f02:	1b9b      	subs	r3, r3, r6
 8001f04:	60a3      	str	r3, [r4, #8]
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	4433      	add	r3, r6
 8001f0a:	6023      	str	r3, [r4, #0]
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	e7db      	b.n	8001ec8 <__ssputs_r+0x58>
 8001f10:	462a      	mov	r2, r5
 8001f12:	f000 fba5 	bl	8002660 <_realloc_r>
 8001f16:	4606      	mov	r6, r0
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d1e1      	bne.n	8001ee0 <__ssputs_r+0x70>
 8001f1c:	6921      	ldr	r1, [r4, #16]
 8001f1e:	4650      	mov	r0, sl
 8001f20:	f000 fabe 	bl	80024a0 <_free_r>
 8001f24:	e7c7      	b.n	8001eb6 <__ssputs_r+0x46>
	...

08001f28 <_svfiprintf_r>:
 8001f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f2c:	4698      	mov	r8, r3
 8001f2e:	898b      	ldrh	r3, [r1, #12]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	b09d      	sub	sp, #116	; 0x74
 8001f34:	4607      	mov	r7, r0
 8001f36:	460d      	mov	r5, r1
 8001f38:	4614      	mov	r4, r2
 8001f3a:	d50e      	bpl.n	8001f5a <_svfiprintf_r+0x32>
 8001f3c:	690b      	ldr	r3, [r1, #16]
 8001f3e:	b963      	cbnz	r3, 8001f5a <_svfiprintf_r+0x32>
 8001f40:	2140      	movs	r1, #64	; 0x40
 8001f42:	f000 fb19 	bl	8002578 <_malloc_r>
 8001f46:	6028      	str	r0, [r5, #0]
 8001f48:	6128      	str	r0, [r5, #16]
 8001f4a:	b920      	cbnz	r0, 8001f56 <_svfiprintf_r+0x2e>
 8001f4c:	230c      	movs	r3, #12
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	e0d1      	b.n	80020fa <_svfiprintf_r+0x1d2>
 8001f56:	2340      	movs	r3, #64	; 0x40
 8001f58:	616b      	str	r3, [r5, #20]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9309      	str	r3, [sp, #36]	; 0x24
 8001f5e:	2320      	movs	r3, #32
 8001f60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f64:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f68:	2330      	movs	r3, #48	; 0x30
 8001f6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8002114 <_svfiprintf_r+0x1ec>
 8001f6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f72:	f04f 0901 	mov.w	r9, #1
 8001f76:	4623      	mov	r3, r4
 8001f78:	469a      	mov	sl, r3
 8001f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f7e:	b10a      	cbz	r2, 8001f84 <_svfiprintf_r+0x5c>
 8001f80:	2a25      	cmp	r2, #37	; 0x25
 8001f82:	d1f9      	bne.n	8001f78 <_svfiprintf_r+0x50>
 8001f84:	ebba 0b04 	subs.w	fp, sl, r4
 8001f88:	d00b      	beq.n	8001fa2 <_svfiprintf_r+0x7a>
 8001f8a:	465b      	mov	r3, fp
 8001f8c:	4622      	mov	r2, r4
 8001f8e:	4629      	mov	r1, r5
 8001f90:	4638      	mov	r0, r7
 8001f92:	f7ff ff6d 	bl	8001e70 <__ssputs_r>
 8001f96:	3001      	adds	r0, #1
 8001f98:	f000 80aa 	beq.w	80020f0 <_svfiprintf_r+0x1c8>
 8001f9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f9e:	445a      	add	r2, fp
 8001fa0:	9209      	str	r2, [sp, #36]	; 0x24
 8001fa2:	f89a 3000 	ldrb.w	r3, [sl]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 80a2 	beq.w	80020f0 <_svfiprintf_r+0x1c8>
 8001fac:	2300      	movs	r3, #0
 8001fae:	f04f 32ff 	mov.w	r2, #4294967295
 8001fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001fb6:	f10a 0a01 	add.w	sl, sl, #1
 8001fba:	9304      	str	r3, [sp, #16]
 8001fbc:	9307      	str	r3, [sp, #28]
 8001fbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001fc2:	931a      	str	r3, [sp, #104]	; 0x68
 8001fc4:	4654      	mov	r4, sl
 8001fc6:	2205      	movs	r2, #5
 8001fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001fcc:	4851      	ldr	r0, [pc, #324]	; (8002114 <_svfiprintf_r+0x1ec>)
 8001fce:	f7fe f907 	bl	80001e0 <memchr>
 8001fd2:	9a04      	ldr	r2, [sp, #16]
 8001fd4:	b9d8      	cbnz	r0, 800200e <_svfiprintf_r+0xe6>
 8001fd6:	06d0      	lsls	r0, r2, #27
 8001fd8:	bf44      	itt	mi
 8001fda:	2320      	movmi	r3, #32
 8001fdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fe0:	0711      	lsls	r1, r2, #28
 8001fe2:	bf44      	itt	mi
 8001fe4:	232b      	movmi	r3, #43	; 0x2b
 8001fe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fea:	f89a 3000 	ldrb.w	r3, [sl]
 8001fee:	2b2a      	cmp	r3, #42	; 0x2a
 8001ff0:	d015      	beq.n	800201e <_svfiprintf_r+0xf6>
 8001ff2:	9a07      	ldr	r2, [sp, #28]
 8001ff4:	4654      	mov	r4, sl
 8001ff6:	2000      	movs	r0, #0
 8001ff8:	f04f 0c0a 	mov.w	ip, #10
 8001ffc:	4621      	mov	r1, r4
 8001ffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002002:	3b30      	subs	r3, #48	; 0x30
 8002004:	2b09      	cmp	r3, #9
 8002006:	d94e      	bls.n	80020a6 <_svfiprintf_r+0x17e>
 8002008:	b1b0      	cbz	r0, 8002038 <_svfiprintf_r+0x110>
 800200a:	9207      	str	r2, [sp, #28]
 800200c:	e014      	b.n	8002038 <_svfiprintf_r+0x110>
 800200e:	eba0 0308 	sub.w	r3, r0, r8
 8002012:	fa09 f303 	lsl.w	r3, r9, r3
 8002016:	4313      	orrs	r3, r2
 8002018:	9304      	str	r3, [sp, #16]
 800201a:	46a2      	mov	sl, r4
 800201c:	e7d2      	b.n	8001fc4 <_svfiprintf_r+0x9c>
 800201e:	9b03      	ldr	r3, [sp, #12]
 8002020:	1d19      	adds	r1, r3, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	9103      	str	r1, [sp, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	bfbb      	ittet	lt
 800202a:	425b      	neglt	r3, r3
 800202c:	f042 0202 	orrlt.w	r2, r2, #2
 8002030:	9307      	strge	r3, [sp, #28]
 8002032:	9307      	strlt	r3, [sp, #28]
 8002034:	bfb8      	it	lt
 8002036:	9204      	strlt	r2, [sp, #16]
 8002038:	7823      	ldrb	r3, [r4, #0]
 800203a:	2b2e      	cmp	r3, #46	; 0x2e
 800203c:	d10c      	bne.n	8002058 <_svfiprintf_r+0x130>
 800203e:	7863      	ldrb	r3, [r4, #1]
 8002040:	2b2a      	cmp	r3, #42	; 0x2a
 8002042:	d135      	bne.n	80020b0 <_svfiprintf_r+0x188>
 8002044:	9b03      	ldr	r3, [sp, #12]
 8002046:	1d1a      	adds	r2, r3, #4
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	9203      	str	r2, [sp, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	bfb8      	it	lt
 8002050:	f04f 33ff 	movlt.w	r3, #4294967295
 8002054:	3402      	adds	r4, #2
 8002056:	9305      	str	r3, [sp, #20]
 8002058:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002124 <_svfiprintf_r+0x1fc>
 800205c:	7821      	ldrb	r1, [r4, #0]
 800205e:	2203      	movs	r2, #3
 8002060:	4650      	mov	r0, sl
 8002062:	f7fe f8bd 	bl	80001e0 <memchr>
 8002066:	b140      	cbz	r0, 800207a <_svfiprintf_r+0x152>
 8002068:	2340      	movs	r3, #64	; 0x40
 800206a:	eba0 000a 	sub.w	r0, r0, sl
 800206e:	fa03 f000 	lsl.w	r0, r3, r0
 8002072:	9b04      	ldr	r3, [sp, #16]
 8002074:	4303      	orrs	r3, r0
 8002076:	3401      	adds	r4, #1
 8002078:	9304      	str	r3, [sp, #16]
 800207a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800207e:	4826      	ldr	r0, [pc, #152]	; (8002118 <_svfiprintf_r+0x1f0>)
 8002080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002084:	2206      	movs	r2, #6
 8002086:	f7fe f8ab 	bl	80001e0 <memchr>
 800208a:	2800      	cmp	r0, #0
 800208c:	d038      	beq.n	8002100 <_svfiprintf_r+0x1d8>
 800208e:	4b23      	ldr	r3, [pc, #140]	; (800211c <_svfiprintf_r+0x1f4>)
 8002090:	bb1b      	cbnz	r3, 80020da <_svfiprintf_r+0x1b2>
 8002092:	9b03      	ldr	r3, [sp, #12]
 8002094:	3307      	adds	r3, #7
 8002096:	f023 0307 	bic.w	r3, r3, #7
 800209a:	3308      	adds	r3, #8
 800209c:	9303      	str	r3, [sp, #12]
 800209e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020a0:	4433      	add	r3, r6
 80020a2:	9309      	str	r3, [sp, #36]	; 0x24
 80020a4:	e767      	b.n	8001f76 <_svfiprintf_r+0x4e>
 80020a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80020aa:	460c      	mov	r4, r1
 80020ac:	2001      	movs	r0, #1
 80020ae:	e7a5      	b.n	8001ffc <_svfiprintf_r+0xd4>
 80020b0:	2300      	movs	r3, #0
 80020b2:	3401      	adds	r4, #1
 80020b4:	9305      	str	r3, [sp, #20]
 80020b6:	4619      	mov	r1, r3
 80020b8:	f04f 0c0a 	mov.w	ip, #10
 80020bc:	4620      	mov	r0, r4
 80020be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80020c2:	3a30      	subs	r2, #48	; 0x30
 80020c4:	2a09      	cmp	r2, #9
 80020c6:	d903      	bls.n	80020d0 <_svfiprintf_r+0x1a8>
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0c5      	beq.n	8002058 <_svfiprintf_r+0x130>
 80020cc:	9105      	str	r1, [sp, #20]
 80020ce:	e7c3      	b.n	8002058 <_svfiprintf_r+0x130>
 80020d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80020d4:	4604      	mov	r4, r0
 80020d6:	2301      	movs	r3, #1
 80020d8:	e7f0      	b.n	80020bc <_svfiprintf_r+0x194>
 80020da:	ab03      	add	r3, sp, #12
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	462a      	mov	r2, r5
 80020e0:	4b0f      	ldr	r3, [pc, #60]	; (8002120 <_svfiprintf_r+0x1f8>)
 80020e2:	a904      	add	r1, sp, #16
 80020e4:	4638      	mov	r0, r7
 80020e6:	f3af 8000 	nop.w
 80020ea:	1c42      	adds	r2, r0, #1
 80020ec:	4606      	mov	r6, r0
 80020ee:	d1d6      	bne.n	800209e <_svfiprintf_r+0x176>
 80020f0:	89ab      	ldrh	r3, [r5, #12]
 80020f2:	065b      	lsls	r3, r3, #25
 80020f4:	f53f af2c 	bmi.w	8001f50 <_svfiprintf_r+0x28>
 80020f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020fa:	b01d      	add	sp, #116	; 0x74
 80020fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002100:	ab03      	add	r3, sp, #12
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	462a      	mov	r2, r5
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <_svfiprintf_r+0x1f8>)
 8002108:	a904      	add	r1, sp, #16
 800210a:	4638      	mov	r0, r7
 800210c:	f000 f87a 	bl	8002204 <_printf_i>
 8002110:	e7eb      	b.n	80020ea <_svfiprintf_r+0x1c2>
 8002112:	bf00      	nop
 8002114:	0800275c 	.word	0x0800275c
 8002118:	08002766 	.word	0x08002766
 800211c:	00000000 	.word	0x00000000
 8002120:	08001e71 	.word	0x08001e71
 8002124:	08002762 	.word	0x08002762

08002128 <_printf_common>:
 8002128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800212c:	4616      	mov	r6, r2
 800212e:	4699      	mov	r9, r3
 8002130:	688a      	ldr	r2, [r1, #8]
 8002132:	690b      	ldr	r3, [r1, #16]
 8002134:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002138:	4293      	cmp	r3, r2
 800213a:	bfb8      	it	lt
 800213c:	4613      	movlt	r3, r2
 800213e:	6033      	str	r3, [r6, #0]
 8002140:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002144:	4607      	mov	r7, r0
 8002146:	460c      	mov	r4, r1
 8002148:	b10a      	cbz	r2, 800214e <_printf_common+0x26>
 800214a:	3301      	adds	r3, #1
 800214c:	6033      	str	r3, [r6, #0]
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	0699      	lsls	r1, r3, #26
 8002152:	bf42      	ittt	mi
 8002154:	6833      	ldrmi	r3, [r6, #0]
 8002156:	3302      	addmi	r3, #2
 8002158:	6033      	strmi	r3, [r6, #0]
 800215a:	6825      	ldr	r5, [r4, #0]
 800215c:	f015 0506 	ands.w	r5, r5, #6
 8002160:	d106      	bne.n	8002170 <_printf_common+0x48>
 8002162:	f104 0a19 	add.w	sl, r4, #25
 8002166:	68e3      	ldr	r3, [r4, #12]
 8002168:	6832      	ldr	r2, [r6, #0]
 800216a:	1a9b      	subs	r3, r3, r2
 800216c:	42ab      	cmp	r3, r5
 800216e:	dc26      	bgt.n	80021be <_printf_common+0x96>
 8002170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002174:	1e13      	subs	r3, r2, #0
 8002176:	6822      	ldr	r2, [r4, #0]
 8002178:	bf18      	it	ne
 800217a:	2301      	movne	r3, #1
 800217c:	0692      	lsls	r2, r2, #26
 800217e:	d42b      	bmi.n	80021d8 <_printf_common+0xb0>
 8002180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002184:	4649      	mov	r1, r9
 8002186:	4638      	mov	r0, r7
 8002188:	47c0      	blx	r8
 800218a:	3001      	adds	r0, #1
 800218c:	d01e      	beq.n	80021cc <_printf_common+0xa4>
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	68e5      	ldr	r5, [r4, #12]
 8002192:	6832      	ldr	r2, [r6, #0]
 8002194:	f003 0306 	and.w	r3, r3, #6
 8002198:	2b04      	cmp	r3, #4
 800219a:	bf08      	it	eq
 800219c:	1aad      	subeq	r5, r5, r2
 800219e:	68a3      	ldr	r3, [r4, #8]
 80021a0:	6922      	ldr	r2, [r4, #16]
 80021a2:	bf0c      	ite	eq
 80021a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80021a8:	2500      	movne	r5, #0
 80021aa:	4293      	cmp	r3, r2
 80021ac:	bfc4      	itt	gt
 80021ae:	1a9b      	subgt	r3, r3, r2
 80021b0:	18ed      	addgt	r5, r5, r3
 80021b2:	2600      	movs	r6, #0
 80021b4:	341a      	adds	r4, #26
 80021b6:	42b5      	cmp	r5, r6
 80021b8:	d11a      	bne.n	80021f0 <_printf_common+0xc8>
 80021ba:	2000      	movs	r0, #0
 80021bc:	e008      	b.n	80021d0 <_printf_common+0xa8>
 80021be:	2301      	movs	r3, #1
 80021c0:	4652      	mov	r2, sl
 80021c2:	4649      	mov	r1, r9
 80021c4:	4638      	mov	r0, r7
 80021c6:	47c0      	blx	r8
 80021c8:	3001      	adds	r0, #1
 80021ca:	d103      	bne.n	80021d4 <_printf_common+0xac>
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295
 80021d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021d4:	3501      	adds	r5, #1
 80021d6:	e7c6      	b.n	8002166 <_printf_common+0x3e>
 80021d8:	18e1      	adds	r1, r4, r3
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	2030      	movs	r0, #48	; 0x30
 80021de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021e2:	4422      	add	r2, r4
 80021e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021ec:	3302      	adds	r3, #2
 80021ee:	e7c7      	b.n	8002180 <_printf_common+0x58>
 80021f0:	2301      	movs	r3, #1
 80021f2:	4622      	mov	r2, r4
 80021f4:	4649      	mov	r1, r9
 80021f6:	4638      	mov	r0, r7
 80021f8:	47c0      	blx	r8
 80021fa:	3001      	adds	r0, #1
 80021fc:	d0e6      	beq.n	80021cc <_printf_common+0xa4>
 80021fe:	3601      	adds	r6, #1
 8002200:	e7d9      	b.n	80021b6 <_printf_common+0x8e>
	...

08002204 <_printf_i>:
 8002204:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002208:	7e0f      	ldrb	r7, [r1, #24]
 800220a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800220c:	2f78      	cmp	r7, #120	; 0x78
 800220e:	4691      	mov	r9, r2
 8002210:	4680      	mov	r8, r0
 8002212:	460c      	mov	r4, r1
 8002214:	469a      	mov	sl, r3
 8002216:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800221a:	d807      	bhi.n	800222c <_printf_i+0x28>
 800221c:	2f62      	cmp	r7, #98	; 0x62
 800221e:	d80a      	bhi.n	8002236 <_printf_i+0x32>
 8002220:	2f00      	cmp	r7, #0
 8002222:	f000 80d8 	beq.w	80023d6 <_printf_i+0x1d2>
 8002226:	2f58      	cmp	r7, #88	; 0x58
 8002228:	f000 80a3 	beq.w	8002372 <_printf_i+0x16e>
 800222c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002230:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002234:	e03a      	b.n	80022ac <_printf_i+0xa8>
 8002236:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800223a:	2b15      	cmp	r3, #21
 800223c:	d8f6      	bhi.n	800222c <_printf_i+0x28>
 800223e:	a101      	add	r1, pc, #4	; (adr r1, 8002244 <_printf_i+0x40>)
 8002240:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002244:	0800229d 	.word	0x0800229d
 8002248:	080022b1 	.word	0x080022b1
 800224c:	0800222d 	.word	0x0800222d
 8002250:	0800222d 	.word	0x0800222d
 8002254:	0800222d 	.word	0x0800222d
 8002258:	0800222d 	.word	0x0800222d
 800225c:	080022b1 	.word	0x080022b1
 8002260:	0800222d 	.word	0x0800222d
 8002264:	0800222d 	.word	0x0800222d
 8002268:	0800222d 	.word	0x0800222d
 800226c:	0800222d 	.word	0x0800222d
 8002270:	080023bd 	.word	0x080023bd
 8002274:	080022e1 	.word	0x080022e1
 8002278:	0800239f 	.word	0x0800239f
 800227c:	0800222d 	.word	0x0800222d
 8002280:	0800222d 	.word	0x0800222d
 8002284:	080023df 	.word	0x080023df
 8002288:	0800222d 	.word	0x0800222d
 800228c:	080022e1 	.word	0x080022e1
 8002290:	0800222d 	.word	0x0800222d
 8002294:	0800222d 	.word	0x0800222d
 8002298:	080023a7 	.word	0x080023a7
 800229c:	682b      	ldr	r3, [r5, #0]
 800229e:	1d1a      	adds	r2, r3, #4
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	602a      	str	r2, [r5, #0]
 80022a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80022a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0a3      	b.n	80023f8 <_printf_i+0x1f4>
 80022b0:	6820      	ldr	r0, [r4, #0]
 80022b2:	6829      	ldr	r1, [r5, #0]
 80022b4:	0606      	lsls	r6, r0, #24
 80022b6:	f101 0304 	add.w	r3, r1, #4
 80022ba:	d50a      	bpl.n	80022d2 <_printf_i+0xce>
 80022bc:	680e      	ldr	r6, [r1, #0]
 80022be:	602b      	str	r3, [r5, #0]
 80022c0:	2e00      	cmp	r6, #0
 80022c2:	da03      	bge.n	80022cc <_printf_i+0xc8>
 80022c4:	232d      	movs	r3, #45	; 0x2d
 80022c6:	4276      	negs	r6, r6
 80022c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022cc:	485e      	ldr	r0, [pc, #376]	; (8002448 <_printf_i+0x244>)
 80022ce:	230a      	movs	r3, #10
 80022d0:	e019      	b.n	8002306 <_printf_i+0x102>
 80022d2:	680e      	ldr	r6, [r1, #0]
 80022d4:	602b      	str	r3, [r5, #0]
 80022d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022da:	bf18      	it	ne
 80022dc:	b236      	sxthne	r6, r6
 80022de:	e7ef      	b.n	80022c0 <_printf_i+0xbc>
 80022e0:	682b      	ldr	r3, [r5, #0]
 80022e2:	6820      	ldr	r0, [r4, #0]
 80022e4:	1d19      	adds	r1, r3, #4
 80022e6:	6029      	str	r1, [r5, #0]
 80022e8:	0601      	lsls	r1, r0, #24
 80022ea:	d501      	bpl.n	80022f0 <_printf_i+0xec>
 80022ec:	681e      	ldr	r6, [r3, #0]
 80022ee:	e002      	b.n	80022f6 <_printf_i+0xf2>
 80022f0:	0646      	lsls	r6, r0, #25
 80022f2:	d5fb      	bpl.n	80022ec <_printf_i+0xe8>
 80022f4:	881e      	ldrh	r6, [r3, #0]
 80022f6:	4854      	ldr	r0, [pc, #336]	; (8002448 <_printf_i+0x244>)
 80022f8:	2f6f      	cmp	r7, #111	; 0x6f
 80022fa:	bf0c      	ite	eq
 80022fc:	2308      	moveq	r3, #8
 80022fe:	230a      	movne	r3, #10
 8002300:	2100      	movs	r1, #0
 8002302:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002306:	6865      	ldr	r5, [r4, #4]
 8002308:	60a5      	str	r5, [r4, #8]
 800230a:	2d00      	cmp	r5, #0
 800230c:	bfa2      	ittt	ge
 800230e:	6821      	ldrge	r1, [r4, #0]
 8002310:	f021 0104 	bicge.w	r1, r1, #4
 8002314:	6021      	strge	r1, [r4, #0]
 8002316:	b90e      	cbnz	r6, 800231c <_printf_i+0x118>
 8002318:	2d00      	cmp	r5, #0
 800231a:	d04d      	beq.n	80023b8 <_printf_i+0x1b4>
 800231c:	4615      	mov	r5, r2
 800231e:	fbb6 f1f3 	udiv	r1, r6, r3
 8002322:	fb03 6711 	mls	r7, r3, r1, r6
 8002326:	5dc7      	ldrb	r7, [r0, r7]
 8002328:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800232c:	4637      	mov	r7, r6
 800232e:	42bb      	cmp	r3, r7
 8002330:	460e      	mov	r6, r1
 8002332:	d9f4      	bls.n	800231e <_printf_i+0x11a>
 8002334:	2b08      	cmp	r3, #8
 8002336:	d10b      	bne.n	8002350 <_printf_i+0x14c>
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	07de      	lsls	r6, r3, #31
 800233c:	d508      	bpl.n	8002350 <_printf_i+0x14c>
 800233e:	6923      	ldr	r3, [r4, #16]
 8002340:	6861      	ldr	r1, [r4, #4]
 8002342:	4299      	cmp	r1, r3
 8002344:	bfde      	ittt	le
 8002346:	2330      	movle	r3, #48	; 0x30
 8002348:	f805 3c01 	strble.w	r3, [r5, #-1]
 800234c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002350:	1b52      	subs	r2, r2, r5
 8002352:	6122      	str	r2, [r4, #16]
 8002354:	f8cd a000 	str.w	sl, [sp]
 8002358:	464b      	mov	r3, r9
 800235a:	aa03      	add	r2, sp, #12
 800235c:	4621      	mov	r1, r4
 800235e:	4640      	mov	r0, r8
 8002360:	f7ff fee2 	bl	8002128 <_printf_common>
 8002364:	3001      	adds	r0, #1
 8002366:	d14c      	bne.n	8002402 <_printf_i+0x1fe>
 8002368:	f04f 30ff 	mov.w	r0, #4294967295
 800236c:	b004      	add	sp, #16
 800236e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002372:	4835      	ldr	r0, [pc, #212]	; (8002448 <_printf_i+0x244>)
 8002374:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002378:	6829      	ldr	r1, [r5, #0]
 800237a:	6823      	ldr	r3, [r4, #0]
 800237c:	f851 6b04 	ldr.w	r6, [r1], #4
 8002380:	6029      	str	r1, [r5, #0]
 8002382:	061d      	lsls	r5, r3, #24
 8002384:	d514      	bpl.n	80023b0 <_printf_i+0x1ac>
 8002386:	07df      	lsls	r7, r3, #31
 8002388:	bf44      	itt	mi
 800238a:	f043 0320 	orrmi.w	r3, r3, #32
 800238e:	6023      	strmi	r3, [r4, #0]
 8002390:	b91e      	cbnz	r6, 800239a <_printf_i+0x196>
 8002392:	6823      	ldr	r3, [r4, #0]
 8002394:	f023 0320 	bic.w	r3, r3, #32
 8002398:	6023      	str	r3, [r4, #0]
 800239a:	2310      	movs	r3, #16
 800239c:	e7b0      	b.n	8002300 <_printf_i+0xfc>
 800239e:	6823      	ldr	r3, [r4, #0]
 80023a0:	f043 0320 	orr.w	r3, r3, #32
 80023a4:	6023      	str	r3, [r4, #0]
 80023a6:	2378      	movs	r3, #120	; 0x78
 80023a8:	4828      	ldr	r0, [pc, #160]	; (800244c <_printf_i+0x248>)
 80023aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80023ae:	e7e3      	b.n	8002378 <_printf_i+0x174>
 80023b0:	0659      	lsls	r1, r3, #25
 80023b2:	bf48      	it	mi
 80023b4:	b2b6      	uxthmi	r6, r6
 80023b6:	e7e6      	b.n	8002386 <_printf_i+0x182>
 80023b8:	4615      	mov	r5, r2
 80023ba:	e7bb      	b.n	8002334 <_printf_i+0x130>
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	6826      	ldr	r6, [r4, #0]
 80023c0:	6961      	ldr	r1, [r4, #20]
 80023c2:	1d18      	adds	r0, r3, #4
 80023c4:	6028      	str	r0, [r5, #0]
 80023c6:	0635      	lsls	r5, r6, #24
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	d501      	bpl.n	80023d0 <_printf_i+0x1cc>
 80023cc:	6019      	str	r1, [r3, #0]
 80023ce:	e002      	b.n	80023d6 <_printf_i+0x1d2>
 80023d0:	0670      	lsls	r0, r6, #25
 80023d2:	d5fb      	bpl.n	80023cc <_printf_i+0x1c8>
 80023d4:	8019      	strh	r1, [r3, #0]
 80023d6:	2300      	movs	r3, #0
 80023d8:	6123      	str	r3, [r4, #16]
 80023da:	4615      	mov	r5, r2
 80023dc:	e7ba      	b.n	8002354 <_printf_i+0x150>
 80023de:	682b      	ldr	r3, [r5, #0]
 80023e0:	1d1a      	adds	r2, r3, #4
 80023e2:	602a      	str	r2, [r5, #0]
 80023e4:	681d      	ldr	r5, [r3, #0]
 80023e6:	6862      	ldr	r2, [r4, #4]
 80023e8:	2100      	movs	r1, #0
 80023ea:	4628      	mov	r0, r5
 80023ec:	f7fd fef8 	bl	80001e0 <memchr>
 80023f0:	b108      	cbz	r0, 80023f6 <_printf_i+0x1f2>
 80023f2:	1b40      	subs	r0, r0, r5
 80023f4:	6060      	str	r0, [r4, #4]
 80023f6:	6863      	ldr	r3, [r4, #4]
 80023f8:	6123      	str	r3, [r4, #16]
 80023fa:	2300      	movs	r3, #0
 80023fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002400:	e7a8      	b.n	8002354 <_printf_i+0x150>
 8002402:	6923      	ldr	r3, [r4, #16]
 8002404:	462a      	mov	r2, r5
 8002406:	4649      	mov	r1, r9
 8002408:	4640      	mov	r0, r8
 800240a:	47d0      	blx	sl
 800240c:	3001      	adds	r0, #1
 800240e:	d0ab      	beq.n	8002368 <_printf_i+0x164>
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	079b      	lsls	r3, r3, #30
 8002414:	d413      	bmi.n	800243e <_printf_i+0x23a>
 8002416:	68e0      	ldr	r0, [r4, #12]
 8002418:	9b03      	ldr	r3, [sp, #12]
 800241a:	4298      	cmp	r0, r3
 800241c:	bfb8      	it	lt
 800241e:	4618      	movlt	r0, r3
 8002420:	e7a4      	b.n	800236c <_printf_i+0x168>
 8002422:	2301      	movs	r3, #1
 8002424:	4632      	mov	r2, r6
 8002426:	4649      	mov	r1, r9
 8002428:	4640      	mov	r0, r8
 800242a:	47d0      	blx	sl
 800242c:	3001      	adds	r0, #1
 800242e:	d09b      	beq.n	8002368 <_printf_i+0x164>
 8002430:	3501      	adds	r5, #1
 8002432:	68e3      	ldr	r3, [r4, #12]
 8002434:	9903      	ldr	r1, [sp, #12]
 8002436:	1a5b      	subs	r3, r3, r1
 8002438:	42ab      	cmp	r3, r5
 800243a:	dcf2      	bgt.n	8002422 <_printf_i+0x21e>
 800243c:	e7eb      	b.n	8002416 <_printf_i+0x212>
 800243e:	2500      	movs	r5, #0
 8002440:	f104 0619 	add.w	r6, r4, #25
 8002444:	e7f5      	b.n	8002432 <_printf_i+0x22e>
 8002446:	bf00      	nop
 8002448:	0800276d 	.word	0x0800276d
 800244c:	0800277e 	.word	0x0800277e

08002450 <memcpy>:
 8002450:	440a      	add	r2, r1
 8002452:	4291      	cmp	r1, r2
 8002454:	f100 33ff 	add.w	r3, r0, #4294967295
 8002458:	d100      	bne.n	800245c <memcpy+0xc>
 800245a:	4770      	bx	lr
 800245c:	b510      	push	{r4, lr}
 800245e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002462:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002466:	4291      	cmp	r1, r2
 8002468:	d1f9      	bne.n	800245e <memcpy+0xe>
 800246a:	bd10      	pop	{r4, pc}

0800246c <memmove>:
 800246c:	4288      	cmp	r0, r1
 800246e:	b510      	push	{r4, lr}
 8002470:	eb01 0402 	add.w	r4, r1, r2
 8002474:	d902      	bls.n	800247c <memmove+0x10>
 8002476:	4284      	cmp	r4, r0
 8002478:	4623      	mov	r3, r4
 800247a:	d807      	bhi.n	800248c <memmove+0x20>
 800247c:	1e43      	subs	r3, r0, #1
 800247e:	42a1      	cmp	r1, r4
 8002480:	d008      	beq.n	8002494 <memmove+0x28>
 8002482:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002486:	f803 2f01 	strb.w	r2, [r3, #1]!
 800248a:	e7f8      	b.n	800247e <memmove+0x12>
 800248c:	4402      	add	r2, r0
 800248e:	4601      	mov	r1, r0
 8002490:	428a      	cmp	r2, r1
 8002492:	d100      	bne.n	8002496 <memmove+0x2a>
 8002494:	bd10      	pop	{r4, pc}
 8002496:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800249a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800249e:	e7f7      	b.n	8002490 <memmove+0x24>

080024a0 <_free_r>:
 80024a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80024a2:	2900      	cmp	r1, #0
 80024a4:	d044      	beq.n	8002530 <_free_r+0x90>
 80024a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80024aa:	9001      	str	r0, [sp, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f1a1 0404 	sub.w	r4, r1, #4
 80024b2:	bfb8      	it	lt
 80024b4:	18e4      	addlt	r4, r4, r3
 80024b6:	f000 f913 	bl	80026e0 <__malloc_lock>
 80024ba:	4a1e      	ldr	r2, [pc, #120]	; (8002534 <_free_r+0x94>)
 80024bc:	9801      	ldr	r0, [sp, #4]
 80024be:	6813      	ldr	r3, [r2, #0]
 80024c0:	b933      	cbnz	r3, 80024d0 <_free_r+0x30>
 80024c2:	6063      	str	r3, [r4, #4]
 80024c4:	6014      	str	r4, [r2, #0]
 80024c6:	b003      	add	sp, #12
 80024c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80024cc:	f000 b90e 	b.w	80026ec <__malloc_unlock>
 80024d0:	42a3      	cmp	r3, r4
 80024d2:	d908      	bls.n	80024e6 <_free_r+0x46>
 80024d4:	6825      	ldr	r5, [r4, #0]
 80024d6:	1961      	adds	r1, r4, r5
 80024d8:	428b      	cmp	r3, r1
 80024da:	bf01      	itttt	eq
 80024dc:	6819      	ldreq	r1, [r3, #0]
 80024de:	685b      	ldreq	r3, [r3, #4]
 80024e0:	1949      	addeq	r1, r1, r5
 80024e2:	6021      	streq	r1, [r4, #0]
 80024e4:	e7ed      	b.n	80024c2 <_free_r+0x22>
 80024e6:	461a      	mov	r2, r3
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	b10b      	cbz	r3, 80024f0 <_free_r+0x50>
 80024ec:	42a3      	cmp	r3, r4
 80024ee:	d9fa      	bls.n	80024e6 <_free_r+0x46>
 80024f0:	6811      	ldr	r1, [r2, #0]
 80024f2:	1855      	adds	r5, r2, r1
 80024f4:	42a5      	cmp	r5, r4
 80024f6:	d10b      	bne.n	8002510 <_free_r+0x70>
 80024f8:	6824      	ldr	r4, [r4, #0]
 80024fa:	4421      	add	r1, r4
 80024fc:	1854      	adds	r4, r2, r1
 80024fe:	42a3      	cmp	r3, r4
 8002500:	6011      	str	r1, [r2, #0]
 8002502:	d1e0      	bne.n	80024c6 <_free_r+0x26>
 8002504:	681c      	ldr	r4, [r3, #0]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	6053      	str	r3, [r2, #4]
 800250a:	4421      	add	r1, r4
 800250c:	6011      	str	r1, [r2, #0]
 800250e:	e7da      	b.n	80024c6 <_free_r+0x26>
 8002510:	d902      	bls.n	8002518 <_free_r+0x78>
 8002512:	230c      	movs	r3, #12
 8002514:	6003      	str	r3, [r0, #0]
 8002516:	e7d6      	b.n	80024c6 <_free_r+0x26>
 8002518:	6825      	ldr	r5, [r4, #0]
 800251a:	1961      	adds	r1, r4, r5
 800251c:	428b      	cmp	r3, r1
 800251e:	bf04      	itt	eq
 8002520:	6819      	ldreq	r1, [r3, #0]
 8002522:	685b      	ldreq	r3, [r3, #4]
 8002524:	6063      	str	r3, [r4, #4]
 8002526:	bf04      	itt	eq
 8002528:	1949      	addeq	r1, r1, r5
 800252a:	6021      	streq	r1, [r4, #0]
 800252c:	6054      	str	r4, [r2, #4]
 800252e:	e7ca      	b.n	80024c6 <_free_r+0x26>
 8002530:	b003      	add	sp, #12
 8002532:	bd30      	pop	{r4, r5, pc}
 8002534:	20000094 	.word	0x20000094

08002538 <sbrk_aligned>:
 8002538:	b570      	push	{r4, r5, r6, lr}
 800253a:	4e0e      	ldr	r6, [pc, #56]	; (8002574 <sbrk_aligned+0x3c>)
 800253c:	460c      	mov	r4, r1
 800253e:	6831      	ldr	r1, [r6, #0]
 8002540:	4605      	mov	r5, r0
 8002542:	b911      	cbnz	r1, 800254a <sbrk_aligned+0x12>
 8002544:	f000 f8bc 	bl	80026c0 <_sbrk_r>
 8002548:	6030      	str	r0, [r6, #0]
 800254a:	4621      	mov	r1, r4
 800254c:	4628      	mov	r0, r5
 800254e:	f000 f8b7 	bl	80026c0 <_sbrk_r>
 8002552:	1c43      	adds	r3, r0, #1
 8002554:	d00a      	beq.n	800256c <sbrk_aligned+0x34>
 8002556:	1cc4      	adds	r4, r0, #3
 8002558:	f024 0403 	bic.w	r4, r4, #3
 800255c:	42a0      	cmp	r0, r4
 800255e:	d007      	beq.n	8002570 <sbrk_aligned+0x38>
 8002560:	1a21      	subs	r1, r4, r0
 8002562:	4628      	mov	r0, r5
 8002564:	f000 f8ac 	bl	80026c0 <_sbrk_r>
 8002568:	3001      	adds	r0, #1
 800256a:	d101      	bne.n	8002570 <sbrk_aligned+0x38>
 800256c:	f04f 34ff 	mov.w	r4, #4294967295
 8002570:	4620      	mov	r0, r4
 8002572:	bd70      	pop	{r4, r5, r6, pc}
 8002574:	20000098 	.word	0x20000098

08002578 <_malloc_r>:
 8002578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800257c:	1ccd      	adds	r5, r1, #3
 800257e:	f025 0503 	bic.w	r5, r5, #3
 8002582:	3508      	adds	r5, #8
 8002584:	2d0c      	cmp	r5, #12
 8002586:	bf38      	it	cc
 8002588:	250c      	movcc	r5, #12
 800258a:	2d00      	cmp	r5, #0
 800258c:	4607      	mov	r7, r0
 800258e:	db01      	blt.n	8002594 <_malloc_r+0x1c>
 8002590:	42a9      	cmp	r1, r5
 8002592:	d905      	bls.n	80025a0 <_malloc_r+0x28>
 8002594:	230c      	movs	r3, #12
 8002596:	603b      	str	r3, [r7, #0]
 8002598:	2600      	movs	r6, #0
 800259a:	4630      	mov	r0, r6
 800259c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025a0:	4e2e      	ldr	r6, [pc, #184]	; (800265c <_malloc_r+0xe4>)
 80025a2:	f000 f89d 	bl	80026e0 <__malloc_lock>
 80025a6:	6833      	ldr	r3, [r6, #0]
 80025a8:	461c      	mov	r4, r3
 80025aa:	bb34      	cbnz	r4, 80025fa <_malloc_r+0x82>
 80025ac:	4629      	mov	r1, r5
 80025ae:	4638      	mov	r0, r7
 80025b0:	f7ff ffc2 	bl	8002538 <sbrk_aligned>
 80025b4:	1c43      	adds	r3, r0, #1
 80025b6:	4604      	mov	r4, r0
 80025b8:	d14d      	bne.n	8002656 <_malloc_r+0xde>
 80025ba:	6834      	ldr	r4, [r6, #0]
 80025bc:	4626      	mov	r6, r4
 80025be:	2e00      	cmp	r6, #0
 80025c0:	d140      	bne.n	8002644 <_malloc_r+0xcc>
 80025c2:	6823      	ldr	r3, [r4, #0]
 80025c4:	4631      	mov	r1, r6
 80025c6:	4638      	mov	r0, r7
 80025c8:	eb04 0803 	add.w	r8, r4, r3
 80025cc:	f000 f878 	bl	80026c0 <_sbrk_r>
 80025d0:	4580      	cmp	r8, r0
 80025d2:	d13a      	bne.n	800264a <_malloc_r+0xd2>
 80025d4:	6821      	ldr	r1, [r4, #0]
 80025d6:	3503      	adds	r5, #3
 80025d8:	1a6d      	subs	r5, r5, r1
 80025da:	f025 0503 	bic.w	r5, r5, #3
 80025de:	3508      	adds	r5, #8
 80025e0:	2d0c      	cmp	r5, #12
 80025e2:	bf38      	it	cc
 80025e4:	250c      	movcc	r5, #12
 80025e6:	4629      	mov	r1, r5
 80025e8:	4638      	mov	r0, r7
 80025ea:	f7ff ffa5 	bl	8002538 <sbrk_aligned>
 80025ee:	3001      	adds	r0, #1
 80025f0:	d02b      	beq.n	800264a <_malloc_r+0xd2>
 80025f2:	6823      	ldr	r3, [r4, #0]
 80025f4:	442b      	add	r3, r5
 80025f6:	6023      	str	r3, [r4, #0]
 80025f8:	e00e      	b.n	8002618 <_malloc_r+0xa0>
 80025fa:	6822      	ldr	r2, [r4, #0]
 80025fc:	1b52      	subs	r2, r2, r5
 80025fe:	d41e      	bmi.n	800263e <_malloc_r+0xc6>
 8002600:	2a0b      	cmp	r2, #11
 8002602:	d916      	bls.n	8002632 <_malloc_r+0xba>
 8002604:	1961      	adds	r1, r4, r5
 8002606:	42a3      	cmp	r3, r4
 8002608:	6025      	str	r5, [r4, #0]
 800260a:	bf18      	it	ne
 800260c:	6059      	strne	r1, [r3, #4]
 800260e:	6863      	ldr	r3, [r4, #4]
 8002610:	bf08      	it	eq
 8002612:	6031      	streq	r1, [r6, #0]
 8002614:	5162      	str	r2, [r4, r5]
 8002616:	604b      	str	r3, [r1, #4]
 8002618:	4638      	mov	r0, r7
 800261a:	f104 060b 	add.w	r6, r4, #11
 800261e:	f000 f865 	bl	80026ec <__malloc_unlock>
 8002622:	f026 0607 	bic.w	r6, r6, #7
 8002626:	1d23      	adds	r3, r4, #4
 8002628:	1af2      	subs	r2, r6, r3
 800262a:	d0b6      	beq.n	800259a <_malloc_r+0x22>
 800262c:	1b9b      	subs	r3, r3, r6
 800262e:	50a3      	str	r3, [r4, r2]
 8002630:	e7b3      	b.n	800259a <_malloc_r+0x22>
 8002632:	6862      	ldr	r2, [r4, #4]
 8002634:	42a3      	cmp	r3, r4
 8002636:	bf0c      	ite	eq
 8002638:	6032      	streq	r2, [r6, #0]
 800263a:	605a      	strne	r2, [r3, #4]
 800263c:	e7ec      	b.n	8002618 <_malloc_r+0xa0>
 800263e:	4623      	mov	r3, r4
 8002640:	6864      	ldr	r4, [r4, #4]
 8002642:	e7b2      	b.n	80025aa <_malloc_r+0x32>
 8002644:	4634      	mov	r4, r6
 8002646:	6876      	ldr	r6, [r6, #4]
 8002648:	e7b9      	b.n	80025be <_malloc_r+0x46>
 800264a:	230c      	movs	r3, #12
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	4638      	mov	r0, r7
 8002650:	f000 f84c 	bl	80026ec <__malloc_unlock>
 8002654:	e7a1      	b.n	800259a <_malloc_r+0x22>
 8002656:	6025      	str	r5, [r4, #0]
 8002658:	e7de      	b.n	8002618 <_malloc_r+0xa0>
 800265a:	bf00      	nop
 800265c:	20000094 	.word	0x20000094

08002660 <_realloc_r>:
 8002660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002664:	4680      	mov	r8, r0
 8002666:	4614      	mov	r4, r2
 8002668:	460e      	mov	r6, r1
 800266a:	b921      	cbnz	r1, 8002676 <_realloc_r+0x16>
 800266c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002670:	4611      	mov	r1, r2
 8002672:	f7ff bf81 	b.w	8002578 <_malloc_r>
 8002676:	b92a      	cbnz	r2, 8002684 <_realloc_r+0x24>
 8002678:	f7ff ff12 	bl	80024a0 <_free_r>
 800267c:	4625      	mov	r5, r4
 800267e:	4628      	mov	r0, r5
 8002680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002684:	f000 f838 	bl	80026f8 <_malloc_usable_size_r>
 8002688:	4284      	cmp	r4, r0
 800268a:	4607      	mov	r7, r0
 800268c:	d802      	bhi.n	8002694 <_realloc_r+0x34>
 800268e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002692:	d812      	bhi.n	80026ba <_realloc_r+0x5a>
 8002694:	4621      	mov	r1, r4
 8002696:	4640      	mov	r0, r8
 8002698:	f7ff ff6e 	bl	8002578 <_malloc_r>
 800269c:	4605      	mov	r5, r0
 800269e:	2800      	cmp	r0, #0
 80026a0:	d0ed      	beq.n	800267e <_realloc_r+0x1e>
 80026a2:	42bc      	cmp	r4, r7
 80026a4:	4622      	mov	r2, r4
 80026a6:	4631      	mov	r1, r6
 80026a8:	bf28      	it	cs
 80026aa:	463a      	movcs	r2, r7
 80026ac:	f7ff fed0 	bl	8002450 <memcpy>
 80026b0:	4631      	mov	r1, r6
 80026b2:	4640      	mov	r0, r8
 80026b4:	f7ff fef4 	bl	80024a0 <_free_r>
 80026b8:	e7e1      	b.n	800267e <_realloc_r+0x1e>
 80026ba:	4635      	mov	r5, r6
 80026bc:	e7df      	b.n	800267e <_realloc_r+0x1e>
	...

080026c0 <_sbrk_r>:
 80026c0:	b538      	push	{r3, r4, r5, lr}
 80026c2:	4d06      	ldr	r5, [pc, #24]	; (80026dc <_sbrk_r+0x1c>)
 80026c4:	2300      	movs	r3, #0
 80026c6:	4604      	mov	r4, r0
 80026c8:	4608      	mov	r0, r1
 80026ca:	602b      	str	r3, [r5, #0]
 80026cc:	f7fe fbce 	bl	8000e6c <_sbrk>
 80026d0:	1c43      	adds	r3, r0, #1
 80026d2:	d102      	bne.n	80026da <_sbrk_r+0x1a>
 80026d4:	682b      	ldr	r3, [r5, #0]
 80026d6:	b103      	cbz	r3, 80026da <_sbrk_r+0x1a>
 80026d8:	6023      	str	r3, [r4, #0]
 80026da:	bd38      	pop	{r3, r4, r5, pc}
 80026dc:	2000009c 	.word	0x2000009c

080026e0 <__malloc_lock>:
 80026e0:	4801      	ldr	r0, [pc, #4]	; (80026e8 <__malloc_lock+0x8>)
 80026e2:	f000 b811 	b.w	8002708 <__retarget_lock_acquire_recursive>
 80026e6:	bf00      	nop
 80026e8:	200000a0 	.word	0x200000a0

080026ec <__malloc_unlock>:
 80026ec:	4801      	ldr	r0, [pc, #4]	; (80026f4 <__malloc_unlock+0x8>)
 80026ee:	f000 b80c 	b.w	800270a <__retarget_lock_release_recursive>
 80026f2:	bf00      	nop
 80026f4:	200000a0 	.word	0x200000a0

080026f8 <_malloc_usable_size_r>:
 80026f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026fc:	1f18      	subs	r0, r3, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bfbc      	itt	lt
 8002702:	580b      	ldrlt	r3, [r1, r0]
 8002704:	18c0      	addlt	r0, r0, r3
 8002706:	4770      	bx	lr

08002708 <__retarget_lock_acquire_recursive>:
 8002708:	4770      	bx	lr

0800270a <__retarget_lock_release_recursive>:
 800270a:	4770      	bx	lr

0800270c <_init>:
 800270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800270e:	bf00      	nop
 8002710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002712:	bc08      	pop	{r3}
 8002714:	469e      	mov	lr, r3
 8002716:	4770      	bx	lr

08002718 <_fini>:
 8002718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271a:	bf00      	nop
 800271c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271e:	bc08      	pop	{r3}
 8002720:	469e      	mov	lr, r3
 8002722:	4770      	bx	lr
