
Ejemplo16_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ad0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006df8  08006df8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006df8  08006df8  00016df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e00  08006e00  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e00  08006e00  00016e00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006e08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a6c  20000074  08006e7c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ae0  08006e7c  00024ae0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018d09  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003463  00000000  00000000  00038dad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001570  00000000  00000000  0003c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003d780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b41  00000000  00000000  0003ebb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f90  00000000  00000000  000436f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4be8  00000000  00000000  0005a689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff271  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000624c  00000000  00000000  000ff2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006c58 	.word	0x08006c58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006c58 	.word	0x08006c58

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch,1, HAL_MAX_DELAY);
 800058c:	1d39      	adds	r1, r7, #4
 800058e:	f04f 33ff 	mov.w	r3, #4294967295
 8000592:	2201      	movs	r2, #1
 8000594:	4803      	ldr	r0, [pc, #12]	; (80005a4 <__io_putchar+0x20>)
 8000596:	f002 fa86 	bl	8002aa6 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&huart1, (uint8_t *)&ch,1, HAL_MAX_DELAY);
	return ch;
 800059a:	687b      	ldr	r3, [r7, #4]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200000d8 	.word	0x200000d8

080005a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fc26 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f844 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 f92a 	bl	800080c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b8:	f000 f8fe 	bl	80007b8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005bc:	f000 f8aa 	bl	8000714 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c0:	f002 fe2a 	bl	8003218 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005c4:	4a11      	ldr	r2, [pc, #68]	; (800060c <main+0x64>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	4811      	ldr	r0, [pc, #68]	; (8000610 <main+0x68>)
 80005ca:	f002 fe6f 	bl	80032ac <osThreadNew>
 80005ce:	4603      	mov	r3, r0
 80005d0:	4a10      	ldr	r2, [pc, #64]	; (8000614 <main+0x6c>)
 80005d2:	6013      	str	r3, [r2, #0]

  /* creation of vLed */
  vLedHandle = osThreadNew(vGpioLed, NULL, &vLed_attributes);
 80005d4:	4a10      	ldr	r2, [pc, #64]	; (8000618 <main+0x70>)
 80005d6:	2100      	movs	r1, #0
 80005d8:	4810      	ldr	r0, [pc, #64]	; (800061c <main+0x74>)
 80005da:	f002 fe67 	bl	80032ac <osThreadNew>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a0f      	ldr	r2, [pc, #60]	; (8000620 <main+0x78>)
 80005e2:	6013      	str	r3, [r2, #0]

  /* creation of vADC */
  vADCHandle = osThreadNew(vAnalogRead, NULL, &vADC_attributes);
 80005e4:	4a0f      	ldr	r2, [pc, #60]	; (8000624 <main+0x7c>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	480f      	ldr	r0, [pc, #60]	; (8000628 <main+0x80>)
 80005ea:	f002 fe5f 	bl	80032ac <osThreadNew>
 80005ee:	4603      	mov	r3, r0
 80005f0:	4a0e      	ldr	r2, [pc, #56]	; (800062c <main+0x84>)
 80005f2:	6013      	str	r3, [r2, #0]

  /* creation of vUART */
  vUARTHandle = osThreadNew(vSendData, NULL, &vUART_attributes);
 80005f4:	4a0e      	ldr	r2, [pc, #56]	; (8000630 <main+0x88>)
 80005f6:	2100      	movs	r1, #0
 80005f8:	480e      	ldr	r0, [pc, #56]	; (8000634 <main+0x8c>)
 80005fa:	f002 fe57 	bl	80032ac <osThreadNew>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a0d      	ldr	r2, [pc, #52]	; (8000638 <main+0x90>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f002 fe2c 	bl	8003260 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x60>
 800060a:	bf00      	nop
 800060c:	08006cb8 	.word	0x08006cb8
 8000610:	080008e9 	.word	0x080008e9
 8000614:	2000011c 	.word	0x2000011c
 8000618:	08006cdc 	.word	0x08006cdc
 800061c:	080008f9 	.word	0x080008f9
 8000620:	20000120 	.word	0x20000120
 8000624:	08006d00 	.word	0x08006d00
 8000628:	08000915 	.word	0x08000915
 800062c:	20000124 	.word	0x20000124
 8000630:	08006d24 	.word	0x08006d24
 8000634:	08000951 	.word	0x08000951
 8000638:	20000128 	.word	0x20000128

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f005 fb6e 	bl	8005d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a28      	ldr	r2, [pc, #160]	; (800070c <SystemClock_Config+0xd0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000688:	4a21      	ldr	r2, [pc, #132]	; (8000710 <SystemClock_Config+0xd4>)
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <SystemClock_Config+0xd4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006b0:	2310      	movs	r3, #16
 80006b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006be:	2307      	movs	r3, #7
 80006c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c2:	f107 0320 	add.w	r3, r7, #32
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa56 	bl	8001b78 <HAL_RCC_OscConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006d2:	f000 f963 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d6:	230f      	movs	r3, #15
 80006d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006da:	2302      	movs	r3, #2
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2102      	movs	r1, #2
 80006f2:	4618      	mov	r0, r3
 80006f4:	f001 fcb8 	bl	8002068 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 f94d 	bl	800099c <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000726:	4b21      	ldr	r3, [pc, #132]	; (80007ac <MX_ADC1_Init+0x98>)
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <MX_ADC1_Init+0x9c>)
 800072a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <MX_ADC1_Init+0x98>)
 800072e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000732:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000734:	4b1d      	ldr	r3, [pc, #116]	; (80007ac <MX_ADC1_Init+0x98>)
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800073a:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <MX_ADC1_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <MX_ADC1_Init+0x98>)
 8000742:	2200      	movs	r2, #0
 8000744:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000746:	4b19      	ldr	r3, [pc, #100]	; (80007ac <MX_ADC1_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800074e:	4b17      	ldr	r3, [pc, #92]	; (80007ac <MX_ADC1_Init+0x98>)
 8000750:	2200      	movs	r2, #0
 8000752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <MX_ADC1_Init+0x98>)
 8000756:	4a17      	ldr	r2, [pc, #92]	; (80007b4 <MX_ADC1_Init+0xa0>)
 8000758:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800075a:	4b14      	ldr	r3, [pc, #80]	; (80007ac <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000760:	4b12      	ldr	r3, [pc, #72]	; (80007ac <MX_ADC1_Init+0x98>)
 8000762:	2201      	movs	r2, #1
 8000764:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800076e:	4b0f      	ldr	r3, [pc, #60]	; (80007ac <MX_ADC1_Init+0x98>)
 8000770:	2201      	movs	r2, #1
 8000772:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000774:	480d      	ldr	r0, [pc, #52]	; (80007ac <MX_ADC1_Init+0x98>)
 8000776:	f000 fb83 	bl	8000e80 <HAL_ADC_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000780:	f000 f90c 	bl	800099c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000784:	2300      	movs	r3, #0
 8000786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000788:	2301      	movs	r3, #1
 800078a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000790:	463b      	mov	r3, r7
 8000792:	4619      	mov	r1, r3
 8000794:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_ADC1_Init+0x98>)
 8000796:	f000 fd37 	bl	8001208 <HAL_ADC_ConfigChannel>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007a0:	f000 f8fc 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007a4:	bf00      	nop
 80007a6:	3710      	adds	r7, #16
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000090 	.word	0x20000090
 80007b0:	40012000 	.word	0x40012000
 80007b4:	0f000001 	.word	0x0f000001

080007b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007bc:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007be:	4a12      	ldr	r2, [pc, #72]	; (8000808 <MX_USART2_UART_Init+0x50>)
 80007c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007c2:	4b10      	ldr	r3, [pc, #64]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007d8:	2200      	movs	r2, #0
 80007da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007de:	220c      	movs	r2, #12
 80007e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART2_UART_Init+0x4c>)
 80007f0:	f002 f90c 	bl	8002a0c <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007fa:	f000 f8cf 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	200000d8 	.word	0x200000d8
 8000808:	40004400 	.word	0x40004400

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	; 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b2d      	ldr	r3, [pc, #180]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a2c      	ldr	r2, [pc, #176]	; (80008dc <MX_GPIO_Init+0xd0>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a25      	ldr	r2, [pc, #148]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1e      	ldr	r2, [pc, #120]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_GPIO_Init+0xd0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a17      	ldr	r2, [pc, #92]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <MX_GPIO_Init+0xd0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	4812      	ldr	r0, [pc, #72]	; (80008e0 <MX_GPIO_Init+0xd4>)
 8000898:	f001 f93a 	bl	8001b10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_GPIO_Init+0xd8>)
 80008b4:	f000 ffa8 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008b8:	2320      	movs	r3, #32
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008bc:	2301      	movs	r3, #1
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008c8:	f107 0314 	add.w	r3, r7, #20
 80008cc:	4619      	mov	r1, r3
 80008ce:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_GPIO_Init+0xd4>)
 80008d0:	f000 ff9a 	bl	8001808 <HAL_GPIO_Init>

}
 80008d4:	bf00      	nop
 80008d6:	3728      	adds	r7, #40	; 0x28
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020800 	.word	0x40020800

080008e8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f002 fd6d 	bl	80033d0 <osDelay>
 80008f6:	e7fb      	b.n	80008f0 <StartDefaultTask+0x8>

080008f8 <vGpioLed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vGpioLed */
void vGpioLed(void *argument)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vGpioLed */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000900:	2120      	movs	r1, #32
 8000902:	4803      	ldr	r0, [pc, #12]	; (8000910 <vGpioLed+0x18>)
 8000904:	f001 f91d 	bl	8001b42 <HAL_GPIO_TogglePin>
    osDelay(200);
 8000908:	20c8      	movs	r0, #200	; 0xc8
 800090a:	f002 fd61 	bl	80033d0 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800090e:	e7f7      	b.n	8000900 <vGpioLed+0x8>
 8000910:	40020000 	.word	0x40020000

08000914 <vAnalogRead>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vAnalogRead */
void vAnalogRead(void *argument)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vAnalogRead */
  /* Infinite loop */
  for(;;)
  {
	  HAL_ADC_Start(&hadc1);
 800091c:	480a      	ldr	r0, [pc, #40]	; (8000948 <vAnalogRead+0x34>)
 800091e:	f000 faf3 	bl	8000f08 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000922:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000926:	4808      	ldr	r0, [pc, #32]	; (8000948 <vAnalogRead+0x34>)
 8000928:	f000 fbd5 	bl	80010d6 <HAL_ADC_PollForConversion>
	  datos_read = HAL_ADC_GetValue(&hadc1);
 800092c:	4806      	ldr	r0, [pc, #24]	; (8000948 <vAnalogRead+0x34>)
 800092e:	f000 fc5d 	bl	80011ec <HAL_ADC_GetValue>
 8000932:	4603      	mov	r3, r0
 8000934:	4a05      	ldr	r2, [pc, #20]	; (800094c <vAnalogRead+0x38>)
 8000936:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Stop(&hadc1);
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <vAnalogRead+0x34>)
 800093a:	f000 fb99 	bl	8001070 <HAL_ADC_Stop>

       osDelay(10);
 800093e:	200a      	movs	r0, #10
 8000940:	f002 fd46 	bl	80033d0 <osDelay>
	  HAL_ADC_Start(&hadc1);
 8000944:	e7ea      	b.n	800091c <vAnalogRead+0x8>
 8000946:	bf00      	nop
 8000948:	20000090 	.word	0x20000090
 800094c:	2000012c 	.word	0x2000012c

08000950 <vSendData>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vSendData */
void vSendData(void *argument)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vSendData */
  /* Infinite loop */
  for(;;)
  {

	printf("ADC-> %lu\n\r",datos_read);
 8000958:	4b05      	ldr	r3, [pc, #20]	; (8000970 <vSendData+0x20>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <vSendData+0x24>)
 8000960:	f005 f9ec 	bl	8005d3c <iprintf>
    osDelay(600);
 8000964:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000968:	f002 fd32 	bl	80033d0 <osDelay>
	printf("ADC-> %lu\n\r",datos_read);
 800096c:	e7f4      	b.n	8000958 <vSendData+0x8>
 800096e:	bf00      	nop
 8000970:	2000012c 	.word	0x2000012c
 8000974:	08006c94 	.word	0x08006c94

08000978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a04      	ldr	r2, [pc, #16]	; (8000998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800098a:	f000 fa59 	bl	8000e40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40010000 	.word	0x40010000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b12      	ldr	r3, [pc, #72]	; (80009fc <HAL_MspInit+0x54>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	4a11      	ldr	r2, [pc, #68]	; (80009fc <HAL_MspInit+0x54>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	; 0x44
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <HAL_MspInit+0x54>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <HAL_MspInit+0x54>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a0a      	ldr	r2, [pc, #40]	; (80009fc <HAL_MspInit+0x54>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <HAL_MspInit+0x54>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	210f      	movs	r1, #15
 80009ea:	f06f 0001 	mvn.w	r0, #1
 80009ee:	f000 fee1 	bl	80017b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f2:	bf00      	nop
 80009f4:	3708      	adds	r7, #8
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a17      	ldr	r2, [pc, #92]	; (8000a7c <HAL_ADC_MspInit+0x7c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d127      	bne.n	8000a72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	613b      	str	r3, [r7, #16]
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <HAL_ADC_MspInit+0x80>)
 8000a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2a:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <HAL_ADC_MspInit+0x80>)
 8000a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a30:	6453      	str	r3, [r2, #68]	; 0x44
 8000a32:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <HAL_ADC_MspInit+0x80>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_ADC_MspInit+0x80>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_ADC_MspInit+0x80>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_ADC_MspInit+0x80>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a5e:	2303      	movs	r3, #3
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	; (8000a84 <HAL_ADC_MspInit+0x84>)
 8000a6e:	f000 fecb 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3728      	adds	r7, #40	; 0x28
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40012000 	.word	0x40012000
 8000a80:	40023800 	.word	0x40023800
 8000a84:	40020000 	.word	0x40020000

08000a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <HAL_UART_MspInit+0x84>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d12b      	bne.n	8000b02 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	4a10      	ldr	r2, [pc, #64]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad6:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <HAL_UART_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000af2:	2307      	movs	r3, #7
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4619      	mov	r1, r3
 8000afc:	4805      	ldr	r0, [pc, #20]	; (8000b14 <HAL_UART_MspInit+0x8c>)
 8000afe:	f000 fe83 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	; 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	40004400 	.word	0x40004400
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40020000 	.word	0x40020000

08000b18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <HAL_InitTick+0xd0>)
 8000b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b30:	4a2d      	ldr	r2, [pc, #180]	; (8000be8 <HAL_InitTick+0xd0>)
 8000b32:	f043 0301 	orr.w	r3, r3, #1
 8000b36:	6453      	str	r3, [r2, #68]	; 0x44
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <HAL_InitTick+0xd0>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b44:	f107 020c 	add.w	r2, r7, #12
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	4611      	mov	r1, r2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f001 fcaa 	bl	80024a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000b54:	f001 fc94 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8000b58:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b5c:	4a23      	ldr	r2, [pc, #140]	; (8000bec <HAL_InitTick+0xd4>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9b      	lsrs	r3, r3, #18
 8000b64:	3b01      	subs	r3, #1
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b68:	4b21      	ldr	r3, [pc, #132]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b6a:	4a22      	ldr	r2, [pc, #136]	; (8000bf4 <HAL_InitTick+0xdc>)
 8000b6c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000b6e:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b70:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b74:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b7a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b7c:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000b8e:	4818      	ldr	r0, [pc, #96]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000b90:	f001 fcbc 	bl	800250c <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d11b      	bne.n	8000bda <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ba2:	4813      	ldr	r0, [pc, #76]	; (8000bf0 <HAL_InitTick+0xd8>)
 8000ba4:	f001 fd0c 	bl	80025c0 <HAL_TIM_Base_Start_IT>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d111      	bne.n	8000bda <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000bb6:	2019      	movs	r0, #25
 8000bb8:	f000 fe18 	bl	80017ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b0f      	cmp	r3, #15
 8000bc0:	d808      	bhi.n	8000bd4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	6879      	ldr	r1, [r7, #4]
 8000bc6:	2019      	movs	r0, #25
 8000bc8:	f000 fdf4 	bl	80017b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bcc:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_InitTick+0xe0>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6013      	str	r3, [r2, #0]
 8000bd2:	e002      	b.n	8000bda <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	3730      	adds	r7, #48	; 0x30
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023800 	.word	0x40023800
 8000bec:	431bde83 	.word	0x431bde83
 8000bf0:	20000130 	.word	0x20000130
 8000bf4:	40010000 	.word	0x40010000
 8000bf8:	20000004 	.word	0x20000004

08000bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <NMI_Handler+0x4>

08000c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c06:	e7fe      	b.n	8000c06 <HardFault_Handler+0x4>

08000c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <MemManage_Handler+0x4>

08000c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c12:	e7fe      	b.n	8000c12 <BusFault_Handler+0x4>

08000c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <UsageFault_Handler+0x4>

08000c1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c2e:	f001 fd29 	bl	8002684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000130 	.word	0x20000130

08000c3c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c4e:	f3af 8000 	nop.w
 8000c52:	4601      	mov	r1, r0
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	1c5a      	adds	r2, r3, #1
 8000c58:	60ba      	str	r2, [r7, #8]
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	3301      	adds	r3, #1
 8000c62:	617b      	str	r3, [r7, #20]
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	dbf0      	blt.n	8000c4e <_read+0x12>
  }

  return len;
 8000c6c:	687b      	ldr	r3, [r7, #4]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3718      	adds	r7, #24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b086      	sub	sp, #24
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
 8000c86:	e009      	b.n	8000c9c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	1c5a      	adds	r2, r3, #1
 8000c8c:	60ba      	str	r2, [r7, #8]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fc77 	bl	8000584 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
 8000c9c:	697a      	ldr	r2, [r7, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	dbf1      	blt.n	8000c88 <_write+0x12>
  }
  return len;
 8000ca4:	687b      	ldr	r3, [r7, #4]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <_close>:

int _close(int file)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	b083      	sub	sp, #12
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cb6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b083      	sub	sp, #12
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
 8000cce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000cd6:	605a      	str	r2, [r3, #4]
  return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <_isatty>:

int _isatty(int file)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr

08000cfc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b085      	sub	sp, #20
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d08:	2300      	movs	r3, #0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3714      	adds	r7, #20
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b086      	sub	sp, #24
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <_sbrk+0x5c>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	; (8000d78 <_sbrk+0x60>)
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d2c:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d102      	bne.n	8000d3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d34:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <_sbrk+0x64>)
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <_sbrk+0x68>)
 8000d38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d3a:	4b10      	ldr	r3, [pc, #64]	; (8000d7c <_sbrk+0x64>)
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4413      	add	r3, r2
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d207      	bcs.n	8000d58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d48:	f004 ffb8 	bl	8005cbc <__errno>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	220c      	movs	r2, #12
 8000d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	e009      	b.n	8000d6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <_sbrk+0x64>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d5e:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <_sbrk+0x64>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4413      	add	r3, r2
 8000d66:	4a05      	ldr	r2, [pc, #20]	; (8000d7c <_sbrk+0x64>)
 8000d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	3718      	adds	r7, #24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	20018000 	.word	0x20018000
 8000d78:	00000400 	.word	0x00000400
 8000d7c:	20000178 	.word	0x20000178
 8000d80:	20004ae0 	.word	0x20004ae0

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dac:	480d      	ldr	r0, [pc, #52]	; (8000de4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dae:	490e      	ldr	r1, [pc, #56]	; (8000de8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db0:	4a0e      	ldr	r2, [pc, #56]	; (8000dec <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db4:	e002      	b.n	8000dbc <LoopCopyDataInit>

08000db6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000db6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000db8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dba:	3304      	adds	r3, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc0:	d3f9      	bcc.n	8000db6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc2:	4a0b      	ldr	r2, [pc, #44]	; (8000df0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dc4:	4c0b      	ldr	r4, [pc, #44]	; (8000df4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dc8:	e001      	b.n	8000dce <LoopFillZerobss>

08000dca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dcc:	3204      	adds	r2, #4

08000dce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd0:	d3fb      	bcc.n	8000dca <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dd2:	f7ff ffd7 	bl	8000d84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f004 ff77 	bl	8005cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fbe5 	bl	80005a8 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dec:	08006e08 	.word	0x08006e08
  ldr r2, =_sbss
 8000df0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000df4:	20004ae0 	.word	0x20004ae0

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 fcba 	bl	800179e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	200f      	movs	r0, #15
 8000e2c:	f7ff fe74 	bl	8000b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fdba 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_IncTick+0x20>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	461a      	mov	r2, r3
 8000e4a:	4b06      	ldr	r3, [pc, #24]	; (8000e64 <HAL_IncTick+0x24>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4413      	add	r3, r2
 8000e50:	4a04      	ldr	r2, [pc, #16]	; (8000e64 <HAL_IncTick+0x24>)
 8000e52:	6013      	str	r3, [r2, #0]
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20000008 	.word	0x20000008
 8000e64:	2000017c 	.word	0x2000017c

08000e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e6c:	4b03      	ldr	r3, [pc, #12]	; (8000e7c <HAL_GetTick+0x14>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	2000017c 	.word	0x2000017c

08000e80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d101      	bne.n	8000e96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e033      	b.n	8000efe <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d109      	bne.n	8000eb2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fdae 	bl	8000a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d118      	bne.n	8000ef0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ec6:	f023 0302 	bic.w	r3, r3, #2
 8000eca:	f043 0202 	orr.w	r2, r3, #2
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f000 faba 	bl	800144c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2200      	movs	r2, #0
 8000edc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee2:	f023 0303 	bic.w	r3, r3, #3
 8000ee6:	f043 0201 	orr.w	r2, r3, #1
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	641a      	str	r2, [r3, #64]	; 0x40
 8000eee:	e001      	b.n	8000ef4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <HAL_ADC_Start+0x1a>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e097      	b.n	8001052 <HAL_ADC_Start+0x14a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	f003 0301 	and.w	r3, r3, #1
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d018      	beq.n	8000f6a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689a      	ldr	r2, [r3, #8]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f042 0201 	orr.w	r2, r2, #1
 8000f46:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000f48:	4b45      	ldr	r3, [pc, #276]	; (8001060 <HAL_ADC_Start+0x158>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a45      	ldr	r2, [pc, #276]	; (8001064 <HAL_ADC_Start+0x15c>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	0c9a      	lsrs	r2, r3, #18
 8000f54:	4613      	mov	r3, r2
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	4413      	add	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f5c:	e002      	b.n	8000f64 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f9      	bne.n	8000f5e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d15f      	bne.n	8001038 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d007      	beq.n	8000faa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fa2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fb6:	d106      	bne.n	8000fc6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fbc:	f023 0206 	bic.w	r2, r3, #6
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	645a      	str	r2, [r3, #68]	; 0x44
 8000fc4:	e002      	b.n	8000fcc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000fd4:	4b24      	ldr	r3, [pc, #144]	; (8001068 <HAL_ADC_Start+0x160>)
 8000fd6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000fe0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 031f 	and.w	r3, r3, #31
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d10f      	bne.n	800100e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d129      	bne.n	8001050 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	e020      	b.n	8001050 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <HAL_ADC_Start+0x164>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d11b      	bne.n	8001050 <HAL_ADC_Start+0x148>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d114      	bne.n	8001050 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	e00b      	b.n	8001050 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103c:	f043 0210 	orr.w	r2, r3, #16
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001048:	f043 0201 	orr.w	r2, r3, #1
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001050:	2300      	movs	r3, #0
}
 8001052:	4618      	mov	r0, r3
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000000 	.word	0x20000000
 8001064:	431bde83 	.word	0x431bde83
 8001068:	40012300 	.word	0x40012300
 800106c:	40012000 	.word	0x40012000

08001070 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Stop+0x16>
 8001082:	2302      	movs	r3, #2
 8001084:	e021      	b.n	80010ca <HAL_ADC_Stop+0x5a>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f022 0201 	bic.w	r2, r2, #1
 800109c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d109      	bne.n	80010c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b4:	f023 0301 	bic.w	r3, r3, #1
 80010b8:	f043 0201 	orr.w	r2, r3, #1
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2200      	movs	r2, #0
 80010c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b084      	sub	sp, #16
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010f2:	d113      	bne.n	800111c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001102:	d10b      	bne.n	800111c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001108:	f043 0220 	orr.w	r2, r3, #32
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2200      	movs	r2, #0
 8001114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e063      	b.n	80011e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800111c:	f7ff fea4 	bl	8000e68 <HAL_GetTick>
 8001120:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001122:	e021      	b.n	8001168 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800112a:	d01d      	beq.n	8001168 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <HAL_ADC_PollForConversion+0x6c>
 8001132:	f7ff fe99 	bl	8000e68 <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	429a      	cmp	r2, r3
 8001140:	d212      	bcs.n	8001168 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b02      	cmp	r3, #2
 800114e:	d00b      	beq.n	8001168 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001154:	f043 0204 	orr.w	r2, r3, #4
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001164:	2303      	movs	r3, #3
 8001166:	e03d      	b.n	80011e4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	2b02      	cmp	r3, #2
 8001174:	d1d6      	bne.n	8001124 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f06f 0212 	mvn.w	r2, #18
 800117e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d123      	bne.n	80011e2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d11f      	bne.n	80011e2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d006      	beq.n	80011be <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d111      	bne.n	80011e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f043 0201 	orr.w	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
	...

08001208 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800121c:	2b01      	cmp	r3, #1
 800121e:	d101      	bne.n	8001224 <HAL_ADC_ConfigChannel+0x1c>
 8001220:	2302      	movs	r3, #2
 8001222:	e105      	b.n	8001430 <HAL_ADC_ConfigChannel+0x228>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b09      	cmp	r3, #9
 8001232:	d925      	bls.n	8001280 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68d9      	ldr	r1, [r3, #12]
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b29b      	uxth	r3, r3
 8001240:	461a      	mov	r2, r3
 8001242:	4613      	mov	r3, r2
 8001244:	005b      	lsls	r3, r3, #1
 8001246:	4413      	add	r3, r2
 8001248:	3b1e      	subs	r3, #30
 800124a:	2207      	movs	r2, #7
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43da      	mvns	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	400a      	ands	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	68d9      	ldr	r1, [r3, #12]
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	b29b      	uxth	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	4603      	mov	r3, r0
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	4403      	add	r3, r0
 8001272:	3b1e      	subs	r3, #30
 8001274:	409a      	lsls	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	430a      	orrs	r2, r1
 800127c:	60da      	str	r2, [r3, #12]
 800127e:	e022      	b.n	80012c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6919      	ldr	r1, [r3, #16]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	2207      	movs	r2, #7
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43da      	mvns	r2, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	400a      	ands	r2, r1
 80012a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	6919      	ldr	r1, [r3, #16]
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4618      	mov	r0, r3
 80012b6:	4603      	mov	r3, r0
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	4403      	add	r3, r0
 80012bc:	409a      	lsls	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	430a      	orrs	r2, r1
 80012c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	d824      	bhi.n	8001318 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	4613      	mov	r3, r2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	4413      	add	r3, r2
 80012de:	3b05      	subs	r3, #5
 80012e0:	221f      	movs	r2, #31
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	400a      	ands	r2, r1
 80012ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	4618      	mov	r0, r3
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685a      	ldr	r2, [r3, #4]
 8001302:	4613      	mov	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4413      	add	r3, r2
 8001308:	3b05      	subs	r3, #5
 800130a:	fa00 f203 	lsl.w	r2, r0, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	430a      	orrs	r2, r1
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
 8001316:	e04c      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	2b0c      	cmp	r3, #12
 800131e:	d824      	bhi.n	800136a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	4613      	mov	r3, r2
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4413      	add	r3, r2
 8001330:	3b23      	subs	r3, #35	; 0x23
 8001332:	221f      	movs	r2, #31
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43da      	mvns	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	400a      	ands	r2, r1
 8001340:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	b29b      	uxth	r3, r3
 800134e:	4618      	mov	r0, r3
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685a      	ldr	r2, [r3, #4]
 8001354:	4613      	mov	r3, r2
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	4413      	add	r3, r2
 800135a:	3b23      	subs	r3, #35	; 0x23
 800135c:	fa00 f203 	lsl.w	r2, r0, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	430a      	orrs	r2, r1
 8001366:	631a      	str	r2, [r3, #48]	; 0x30
 8001368:	e023      	b.n	80013b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685a      	ldr	r2, [r3, #4]
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	3b41      	subs	r3, #65	; 0x41
 800137c:	221f      	movs	r2, #31
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43da      	mvns	r2, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	400a      	ands	r2, r1
 800138a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	b29b      	uxth	r3, r3
 8001398:	4618      	mov	r0, r3
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	4613      	mov	r3, r2
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	3b41      	subs	r3, #65	; 0x41
 80013a6:	fa00 f203 	lsl.w	r2, r0, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b2:	4b22      	ldr	r3, [pc, #136]	; (800143c <HAL_ADC_ConfigChannel+0x234>)
 80013b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4a21      	ldr	r2, [pc, #132]	; (8001440 <HAL_ADC_ConfigChannel+0x238>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d109      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b12      	cmp	r3, #18
 80013c6:	d105      	bne.n	80013d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a19      	ldr	r2, [pc, #100]	; (8001440 <HAL_ADC_ConfigChannel+0x238>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d123      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x21e>
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2b10      	cmp	r3, #16
 80013e4:	d003      	beq.n	80013ee <HAL_ADC_ConfigChannel+0x1e6>
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2b11      	cmp	r3, #17
 80013ec:	d11b      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2b10      	cmp	r3, #16
 8001400:	d111      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001402:	4b10      	ldr	r3, [pc, #64]	; (8001444 <HAL_ADC_ConfigChannel+0x23c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a10      	ldr	r2, [pc, #64]	; (8001448 <HAL_ADC_ConfigChannel+0x240>)
 8001408:	fba2 2303 	umull	r2, r3, r2, r3
 800140c:	0c9a      	lsrs	r2, r3, #18
 800140e:	4613      	mov	r3, r2
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	4413      	add	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001418:	e002      	b.n	8001420 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3b01      	subs	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d1f9      	bne.n	800141a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	40012300 	.word	0x40012300
 8001440:	40012000 	.word	0x40012000
 8001444:	20000000 	.word	0x20000000
 8001448:	431bde83 	.word	0x431bde83

0800144c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800144c:	b480      	push	{r7}
 800144e:	b085      	sub	sp, #20
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001454:	4b79      	ldr	r3, [pc, #484]	; (800163c <ADC_Init+0x1f0>)
 8001456:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	431a      	orrs	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	691b      	ldr	r3, [r3, #16]
 800148c:	021a      	lsls	r2, r3, #8
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	685a      	ldr	r2, [r3, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	6859      	ldr	r1, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	430a      	orrs	r2, r1
 80014b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6899      	ldr	r1, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	68da      	ldr	r2, [r3, #12]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014de:	4a58      	ldr	r2, [pc, #352]	; (8001640 <ADC_Init+0x1f4>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d022      	beq.n	800152a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6899      	ldr	r1, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e00f      	b.n	800154a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0202 	bic.w	r2, r2, #2
 8001558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6899      	ldr	r1, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7e1b      	ldrb	r3, [r3, #24]
 8001564:	005a      	lsls	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d01b      	beq.n	80015b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6859      	ldr	r1, [r3, #4]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a2:	3b01      	subs	r3, #1
 80015a4:	035a      	lsls	r2, r3, #13
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	e007      	b.n	80015c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	3b01      	subs	r3, #1
 80015dc:	051a      	lsls	r2, r3, #20
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	6899      	ldr	r1, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001602:	025a      	lsls	r2, r3, #9
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800161a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6899      	ldr	r1, [r3, #8]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	029a      	lsls	r2, r3, #10
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	430a      	orrs	r2, r1
 800162e:	609a      	str	r2, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40012300 	.word	0x40012300
 8001640:	0f000001 	.word	0x0f000001

08001644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001660:	4013      	ands	r3, r2
 8001662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800166c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001670:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001674:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <__NVIC_SetPriorityGrouping+0x44>)
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	60d3      	str	r3, [r2, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001690:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	0a1b      	lsrs	r3, r3, #8
 8001696:	f003 0307 	and.w	r3, r3, #7
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	e000ed00 	.word	0xe000ed00

080016a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	db0b      	blt.n	80016d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	4907      	ldr	r1, [pc, #28]	; (80016e0 <__NVIC_EnableIRQ+0x38>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	095b      	lsrs	r3, r3, #5
 80016c8:	2001      	movs	r0, #1
 80016ca:	fa00 f202 	lsl.w	r2, r0, r2
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	e000e100 	.word	0xe000e100

080016e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	6039      	str	r1, [r7, #0]
 80016ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	db0a      	blt.n	800170e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	490c      	ldr	r1, [pc, #48]	; (8001730 <__NVIC_SetPriority+0x4c>)
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	0112      	lsls	r2, r2, #4
 8001704:	b2d2      	uxtb	r2, r2
 8001706:	440b      	add	r3, r1
 8001708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800170c:	e00a      	b.n	8001724 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <__NVIC_SetPriority+0x50>)
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	3b04      	subs	r3, #4
 800171c:	0112      	lsls	r2, r2, #4
 800171e:	b2d2      	uxtb	r2, r2
 8001720:	440b      	add	r3, r1
 8001722:	761a      	strb	r2, [r3, #24]
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000e100 	.word	0xe000e100
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	; 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f003 0307 	and.w	r3, r3, #7
 800174a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	f1c3 0307 	rsb	r3, r3, #7
 8001752:	2b04      	cmp	r3, #4
 8001754:	bf28      	it	cs
 8001756:	2304      	movcs	r3, #4
 8001758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	3304      	adds	r3, #4
 800175e:	2b06      	cmp	r3, #6
 8001760:	d902      	bls.n	8001768 <NVIC_EncodePriority+0x30>
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3b03      	subs	r3, #3
 8001766:	e000      	b.n	800176a <NVIC_EncodePriority+0x32>
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	f04f 32ff 	mov.w	r2, #4294967295
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	43da      	mvns	r2, r3
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	401a      	ands	r2, r3
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001780:	f04f 31ff 	mov.w	r1, #4294967295
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	43d9      	mvns	r1, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	4313      	orrs	r3, r2
         );
}
 8001792:	4618      	mov	r0, r3
 8001794:	3724      	adds	r7, #36	; 0x24
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179e:	b580      	push	{r7, lr}
 80017a0:	b082      	sub	sp, #8
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff ff4c 	bl	8001644 <__NVIC_SetPriorityGrouping>
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017c6:	f7ff ff61 	bl	800168c <__NVIC_GetPriorityGrouping>
 80017ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	68b9      	ldr	r1, [r7, #8]
 80017d0:	6978      	ldr	r0, [r7, #20]
 80017d2:	f7ff ffb1 	bl	8001738 <NVIC_EncodePriority>
 80017d6:	4602      	mov	r2, r0
 80017d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ff80 	bl	80016e4 <__NVIC_SetPriority>
}
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff ff54 	bl	80016a8 <__NVIC_EnableIRQ>
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b089      	sub	sp, #36	; 0x24
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181e:	2300      	movs	r3, #0
 8001820:	61fb      	str	r3, [r7, #28]
 8001822:	e159      	b.n	8001ad8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001824:	2201      	movs	r2, #1
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	697a      	ldr	r2, [r7, #20]
 8001834:	4013      	ands	r3, r2
 8001836:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001838:	693a      	ldr	r2, [r7, #16]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	429a      	cmp	r2, r3
 800183e:	f040 8148 	bne.w	8001ad2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	2b01      	cmp	r3, #1
 800184c:	d005      	beq.n	800185a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001856:	2b02      	cmp	r3, #2
 8001858:	d130      	bne.n	80018bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	fa02 f303 	lsl.w	r3, r2, r3
 800186a:	43db      	mvns	r3, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4013      	ands	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 0201 	and.w	r2, r3, #1
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	d017      	beq.n	80018f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ce:	69fb      	ldr	r3, [r7, #28]
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	2203      	movs	r2, #3
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	43db      	mvns	r3, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4013      	ands	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f003 0303 	and.w	r3, r3, #3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d123      	bne.n	800194c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001910:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4313      	orrs	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	08da      	lsrs	r2, r3, #3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	3208      	adds	r2, #8
 8001946:	69b9      	ldr	r1, [r7, #24]
 8001948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0203 	and.w	r2, r3, #3
 800196c:	69fb      	ldr	r3, [r7, #28]
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001988:	2b00      	cmp	r3, #0
 800198a:	f000 80a2 	beq.w	8001ad2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	4b57      	ldr	r3, [pc, #348]	; (8001af0 <HAL_GPIO_Init+0x2e8>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	4a56      	ldr	r2, [pc, #344]	; (8001af0 <HAL_GPIO_Init+0x2e8>)
 8001998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199c:	6453      	str	r3, [r2, #68]	; 0x44
 800199e:	4b54      	ldr	r3, [pc, #336]	; (8001af0 <HAL_GPIO_Init+0x2e8>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019aa:	4a52      	ldr	r2, [pc, #328]	; (8001af4 <HAL_GPIO_Init+0x2ec>)
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	089b      	lsrs	r3, r3, #2
 80019b0:	3302      	adds	r3, #2
 80019b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	43db      	mvns	r3, r3
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	4013      	ands	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a49      	ldr	r2, [pc, #292]	; (8001af8 <HAL_GPIO_Init+0x2f0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d019      	beq.n	8001a0a <HAL_GPIO_Init+0x202>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a48      	ldr	r2, [pc, #288]	; (8001afc <HAL_GPIO_Init+0x2f4>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d013      	beq.n	8001a06 <HAL_GPIO_Init+0x1fe>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a47      	ldr	r2, [pc, #284]	; (8001b00 <HAL_GPIO_Init+0x2f8>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00d      	beq.n	8001a02 <HAL_GPIO_Init+0x1fa>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a46      	ldr	r2, [pc, #280]	; (8001b04 <HAL_GPIO_Init+0x2fc>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d007      	beq.n	80019fe <HAL_GPIO_Init+0x1f6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4a45      	ldr	r2, [pc, #276]	; (8001b08 <HAL_GPIO_Init+0x300>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d101      	bne.n	80019fa <HAL_GPIO_Init+0x1f2>
 80019f6:	2304      	movs	r3, #4
 80019f8:	e008      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 80019fa:	2307      	movs	r3, #7
 80019fc:	e006      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 80019fe:	2303      	movs	r3, #3
 8001a00:	e004      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a02:	2302      	movs	r3, #2
 8001a04:	e002      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a06:	2301      	movs	r3, #1
 8001a08:	e000      	b.n	8001a0c <HAL_GPIO_Init+0x204>
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	69fa      	ldr	r2, [r7, #28]
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	0092      	lsls	r2, r2, #2
 8001a14:	4093      	lsls	r3, r2
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a1c:	4935      	ldr	r1, [pc, #212]	; (8001af4 <HAL_GPIO_Init+0x2ec>)
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	089b      	lsrs	r3, r3, #2
 8001a22:	3302      	adds	r3, #2
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a4e:	4a2f      	ldr	r2, [pc, #188]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a54:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	4013      	ands	r3, r2
 8001a62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a78:	4a24      	ldr	r2, [pc, #144]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a7e:	4b23      	ldr	r3, [pc, #140]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	43db      	mvns	r3, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a9a:	69ba      	ldr	r2, [r7, #24]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aa2:	4a1a      	ldr	r2, [pc, #104]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aa8:	4b18      	ldr	r3, [pc, #96]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	43db      	mvns	r3, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d003      	beq.n	8001acc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001acc:	4a0f      	ldr	r2, [pc, #60]	; (8001b0c <HAL_GPIO_Init+0x304>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	61fb      	str	r3, [r7, #28]
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	2b0f      	cmp	r3, #15
 8001adc:	f67f aea2 	bls.w	8001824 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3724      	adds	r7, #36	; 0x24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	40013800 	.word	0x40013800
 8001af8:	40020000 	.word	0x40020000
 8001afc:	40020400 	.word	0x40020400
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020c00 	.word	0x40020c00
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40013c00 	.word	0x40013c00

08001b10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	807b      	strh	r3, [r7, #2]
 8001b1c:	4613      	mov	r3, r2
 8001b1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b20:	787b      	ldrb	r3, [r7, #1]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b26:	887a      	ldrh	r2, [r7, #2]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001b2c:	e003      	b.n	8001b36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	041a      	lsls	r2, r3, #16
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	619a      	str	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b085      	sub	sp, #20
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b54:	887a      	ldrh	r2, [r7, #2]
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	041a      	lsls	r2, r3, #16
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	887b      	ldrh	r3, [r7, #2]
 8001b62:	400b      	ands	r3, r1
 8001b64:	431a      	orrs	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	619a      	str	r2, [r3, #24]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e267      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d075      	beq.n	8001c82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b96:	4b88      	ldr	r3, [pc, #544]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d00c      	beq.n	8001bbc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba2:	4b85      	ldr	r3, [pc, #532]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d112      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bae:	4b82      	ldr	r3, [pc, #520]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bba:	d10b      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbc:	4b7e      	ldr	r3, [pc, #504]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d05b      	beq.n	8001c80 <HAL_RCC_OscConfig+0x108>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d157      	bne.n	8001c80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e242      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bdc:	d106      	bne.n	8001bec <HAL_RCC_OscConfig+0x74>
 8001bde:	4b76      	ldr	r3, [pc, #472]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a75      	ldr	r2, [pc, #468]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001be8:	6013      	str	r3, [r2, #0]
 8001bea:	e01d      	b.n	8001c28 <HAL_RCC_OscConfig+0xb0>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf4:	d10c      	bne.n	8001c10 <HAL_RCC_OscConfig+0x98>
 8001bf6:	4b70      	ldr	r3, [pc, #448]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a6f      	ldr	r2, [pc, #444]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001bfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c00:	6013      	str	r3, [r2, #0]
 8001c02:	4b6d      	ldr	r3, [pc, #436]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a6c      	ldr	r2, [pc, #432]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c0c:	6013      	str	r3, [r2, #0]
 8001c0e:	e00b      	b.n	8001c28 <HAL_RCC_OscConfig+0xb0>
 8001c10:	4b69      	ldr	r3, [pc, #420]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a68      	ldr	r2, [pc, #416]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c1a:	6013      	str	r3, [r2, #0]
 8001c1c:	4b66      	ldr	r3, [pc, #408]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a65      	ldr	r2, [pc, #404]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d013      	beq.n	8001c58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c30:	f7ff f91a 	bl	8000e68 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c38:	f7ff f916 	bl	8000e68 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b64      	cmp	r3, #100	; 0x64
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e207      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c4a:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0xc0>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f906 	bl	8000e68 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff f902 	bl	8000e68 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	; 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e1f3      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c72:	4b51      	ldr	r3, [pc, #324]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1f0      	bne.n	8001c60 <HAL_RCC_OscConfig+0xe8>
 8001c7e:	e000      	b.n	8001c82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d063      	beq.n	8001d56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c8e:	4b4a      	ldr	r3, [pc, #296]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d00b      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c9a:	4b47      	ldr	r3, [pc, #284]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d11c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ca6:	4b44      	ldr	r3, [pc, #272]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d116      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cb2:	4b41      	ldr	r3, [pc, #260]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d005      	beq.n	8001cca <HAL_RCC_OscConfig+0x152>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d001      	beq.n	8001cca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e1c7      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cca:	4b3b      	ldr	r3, [pc, #236]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4937      	ldr	r1, [pc, #220]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cde:	e03a      	b.n	8001d56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d020      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce8:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <HAL_RCC_OscConfig+0x244>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7ff f8bb 	bl	8000e68 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f8b7 	bl	8000e68 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e1a8      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4925      	ldr	r1, [pc, #148]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	600b      	str	r3, [r1, #0]
 8001d28:	e015      	b.n	8001d56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_OscConfig+0x244>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d30:	f7ff f89a 	bl	8000e68 <HAL_GetTick>
 8001d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d36:	e008      	b.n	8001d4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d38:	f7ff f896 	bl	8000e68 <HAL_GetTick>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e187      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f0      	bne.n	8001d38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d036      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d016      	beq.n	8001d98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_RCC_OscConfig+0x248>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff f87a 	bl	8000e68 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff f876 	bl	8000e68 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e167      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <HAL_RCC_OscConfig+0x240>)
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x200>
 8001d96:	e01b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d98:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_OscConfig+0x248>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d9e:	f7ff f863 	bl	8000e68 <HAL_GetTick>
 8001da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da4:	e00e      	b.n	8001dc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da6:	f7ff f85f 	bl	8000e68 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d907      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e150      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	42470000 	.word	0x42470000
 8001dc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc4:	4b88      	ldr	r3, [pc, #544]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001dc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1ea      	bne.n	8001da6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f000 8097 	beq.w	8001f0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dde:	2300      	movs	r3, #0
 8001de0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de2:	4b81      	ldr	r3, [pc, #516]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10f      	bne.n	8001e0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	4b7d      	ldr	r3, [pc, #500]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a7c      	ldr	r2, [pc, #496]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b7a      	ldr	r3, [pc, #488]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	4b77      	ldr	r3, [pc, #476]	; (8001fec <HAL_RCC_OscConfig+0x474>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d118      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1a:	4b74      	ldr	r3, [pc, #464]	; (8001fec <HAL_RCC_OscConfig+0x474>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a73      	ldr	r2, [pc, #460]	; (8001fec <HAL_RCC_OscConfig+0x474>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e26:	f7ff f81f 	bl	8000e68 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7ff f81b 	bl	8000e68 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e10c      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	4b6a      	ldr	r3, [pc, #424]	; (8001fec <HAL_RCC_OscConfig+0x474>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x2ea>
 8001e54:	4b64      	ldr	r3, [pc, #400]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a63      	ldr	r2, [pc, #396]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	e01c      	b.n	8001e9c <HAL_RCC_OscConfig+0x324>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x30c>
 8001e6a:	4b5f      	ldr	r3, [pc, #380]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e6e:	4a5e      	ldr	r2, [pc, #376]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e70:	f043 0304 	orr.w	r3, r3, #4
 8001e74:	6713      	str	r3, [r2, #112]	; 0x70
 8001e76:	4b5c      	ldr	r3, [pc, #368]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e7a:	4a5b      	ldr	r2, [pc, #364]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6713      	str	r3, [r2, #112]	; 0x70
 8001e82:	e00b      	b.n	8001e9c <HAL_RCC_OscConfig+0x324>
 8001e84:	4b58      	ldr	r3, [pc, #352]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e88:	4a57      	ldr	r2, [pc, #348]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e90:	4b55      	ldr	r3, [pc, #340]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e94:	4a54      	ldr	r2, [pc, #336]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001e96:	f023 0304 	bic.w	r3, r3, #4
 8001e9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d015      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea4:	f7fe ffe0 	bl	8000e68 <HAL_GetTick>
 8001ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eac:	f7fe ffdc 	bl	8000e68 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e0cb      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ec2:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d0ee      	beq.n	8001eac <HAL_RCC_OscConfig+0x334>
 8001ece:	e014      	b.n	8001efa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ed0:	f7fe ffca 	bl	8000e68 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f7fe ffc6 	bl	8000e68 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e0b5      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eee:	4b3e      	ldr	r3, [pc, #248]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ee      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001efa:	7dfb      	ldrb	r3, [r7, #23]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f00:	4b39      	ldr	r3, [pc, #228]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f04:	4a38      	ldr	r2, [pc, #224]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001f06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	f000 80a1 	beq.w	8002058 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f16:	4b34      	ldr	r3, [pc, #208]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d05c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d141      	bne.n	8001fae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2a:	4b31      	ldr	r3, [pc, #196]	; (8001ff0 <HAL_RCC_OscConfig+0x478>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f30:	f7fe ff9a 	bl	8000e68 <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f38:	f7fe ff96 	bl	8000e68 <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e087      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4a:	4b27      	ldr	r3, [pc, #156]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d1f0      	bne.n	8001f38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69da      	ldr	r2, [r3, #28]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a1b      	ldr	r3, [r3, #32]
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	019b      	lsls	r3, r3, #6
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f78:	061b      	lsls	r3, r3, #24
 8001f7a:	491b      	ldr	r1, [pc, #108]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_RCC_OscConfig+0x478>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f86:	f7fe ff6f 	bl	8000e68 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f8e:	f7fe ff6b 	bl	8000e68 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e05c      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0f0      	beq.n	8001f8e <HAL_RCC_OscConfig+0x416>
 8001fac:	e054      	b.n	8002058 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b10      	ldr	r3, [pc, #64]	; (8001ff0 <HAL_RCC_OscConfig+0x478>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ff58 	bl	8000e68 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe ff54 	bl	8000e68 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e045      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_RCC_OscConfig+0x470>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x444>
 8001fda:	e03d      	b.n	8002058 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e038      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	40007000 	.word	0x40007000
 8001ff0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ff4:	4b1b      	ldr	r3, [pc, #108]	; (8002064 <HAL_RCC_OscConfig+0x4ec>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d028      	beq.n	8002054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800200c:	429a      	cmp	r2, r3
 800200e:	d121      	bne.n	8002054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d11a      	bne.n	8002054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002024:	4013      	ands	r3, r2
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800202a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800202c:	4293      	cmp	r3, r2
 800202e:	d111      	bne.n	8002054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	085b      	lsrs	r3, r3, #1
 800203c:	3b01      	subs	r3, #1
 800203e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d107      	bne.n	8002054 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800204e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40023800 	.word	0x40023800

08002068 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0cc      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b68      	ldr	r3, [pc, #416]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d90c      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b65      	ldr	r3, [pc, #404]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b63      	ldr	r3, [pc, #396]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0b8      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d020      	beq.n	80020f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d005      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020bc:	4b59      	ldr	r3, [pc, #356]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	4a58      	ldr	r2, [pc, #352]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80020c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020d4:	4b53      	ldr	r3, [pc, #332]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	4a52      	ldr	r2, [pc, #328]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80020de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020e0:	4b50      	ldr	r3, [pc, #320]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	494d      	ldr	r1, [pc, #308]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d044      	beq.n	8002188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d107      	bne.n	8002116 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002106:	4b47      	ldr	r3, [pc, #284]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d119      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e07f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	2b02      	cmp	r3, #2
 800211c:	d003      	beq.n	8002126 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002122:	2b03      	cmp	r3, #3
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002126:	4b3f      	ldr	r3, [pc, #252]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e06f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e067      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b37      	ldr	r3, [pc, #220]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4934      	ldr	r1, [pc, #208]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002158:	f7fe fe86 	bl	8000e68 <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7fe fe82 	bl	8000e68 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e04f      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002188:	4b25      	ldr	r3, [pc, #148]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	429a      	cmp	r2, r3
 8002194:	d20c      	bcs.n	80021b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002196:	4b22      	ldr	r3, [pc, #136]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	4b20      	ldr	r3, [pc, #128]	; (8002220 <HAL_RCC_ClockConfig+0x1b8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e032      	b.n	8002216 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d008      	beq.n	80021ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021bc:	4b19      	ldr	r3, [pc, #100]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	4916      	ldr	r1, [pc, #88]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	490e      	ldr	r1, [pc, #56]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80021ee:	f000 f821 	bl	8002234 <HAL_RCC_GetSysClockFreq>
 80021f2:	4602      	mov	r2, r0
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_ClockConfig+0x1bc>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	490a      	ldr	r1, [pc, #40]	; (8002228 <HAL_RCC_ClockConfig+0x1c0>)
 8002200:	5ccb      	ldrb	r3, [r1, r3]
 8002202:	fa22 f303 	lsr.w	r3, r2, r3
 8002206:	4a09      	ldr	r2, [pc, #36]	; (800222c <HAL_RCC_ClockConfig+0x1c4>)
 8002208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800220a:	4b09      	ldr	r3, [pc, #36]	; (8002230 <HAL_RCC_ClockConfig+0x1c8>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fc82 	bl	8000b18 <HAL_InitTick>

  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40023c00 	.word	0x40023c00
 8002224:	40023800 	.word	0x40023800
 8002228:	08006d48 	.word	0x08006d48
 800222c:	20000000 	.word	0x20000000
 8002230:	20000004 	.word	0x20000004

08002234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002238:	b094      	sub	sp, #80	; 0x50
 800223a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800223c:	2300      	movs	r3, #0
 800223e:	647b      	str	r3, [r7, #68]	; 0x44
 8002240:	2300      	movs	r3, #0
 8002242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002244:	2300      	movs	r3, #0
 8002246:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002248:	2300      	movs	r3, #0
 800224a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800224c:	4b79      	ldr	r3, [pc, #484]	; (8002434 <HAL_RCC_GetSysClockFreq+0x200>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 030c 	and.w	r3, r3, #12
 8002254:	2b08      	cmp	r3, #8
 8002256:	d00d      	beq.n	8002274 <HAL_RCC_GetSysClockFreq+0x40>
 8002258:	2b08      	cmp	r3, #8
 800225a:	f200 80e1 	bhi.w	8002420 <HAL_RCC_GetSysClockFreq+0x1ec>
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x34>
 8002262:	2b04      	cmp	r3, #4
 8002264:	d003      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x3a>
 8002266:	e0db      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002268:	4b73      	ldr	r3, [pc, #460]	; (8002438 <HAL_RCC_GetSysClockFreq+0x204>)
 800226a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800226c:	e0db      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800226e:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_RCC_GetSysClockFreq+0x208>)
 8002270:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002272:	e0d8      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002274:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_GetSysClockFreq+0x200>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800227c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800227e:	4b6d      	ldr	r3, [pc, #436]	; (8002434 <HAL_RCC_GetSysClockFreq+0x200>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d063      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800228a:	4b6a      	ldr	r3, [pc, #424]	; (8002434 <HAL_RCC_GetSysClockFreq+0x200>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	099b      	lsrs	r3, r3, #6
 8002290:	2200      	movs	r2, #0
 8002292:	63bb      	str	r3, [r7, #56]	; 0x38
 8002294:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
 800229e:	2300      	movs	r3, #0
 80022a0:	637b      	str	r3, [r7, #52]	; 0x34
 80022a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80022a6:	4622      	mov	r2, r4
 80022a8:	462b      	mov	r3, r5
 80022aa:	f04f 0000 	mov.w	r0, #0
 80022ae:	f04f 0100 	mov.w	r1, #0
 80022b2:	0159      	lsls	r1, r3, #5
 80022b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022b8:	0150      	lsls	r0, r2, #5
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4621      	mov	r1, r4
 80022c0:	1a51      	subs	r1, r2, r1
 80022c2:	6139      	str	r1, [r7, #16]
 80022c4:	4629      	mov	r1, r5
 80022c6:	eb63 0301 	sbc.w	r3, r3, r1
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	f04f 0200 	mov.w	r2, #0
 80022d0:	f04f 0300 	mov.w	r3, #0
 80022d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022d8:	4659      	mov	r1, fp
 80022da:	018b      	lsls	r3, r1, #6
 80022dc:	4651      	mov	r1, sl
 80022de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022e2:	4651      	mov	r1, sl
 80022e4:	018a      	lsls	r2, r1, #6
 80022e6:	4651      	mov	r1, sl
 80022e8:	ebb2 0801 	subs.w	r8, r2, r1
 80022ec:	4659      	mov	r1, fp
 80022ee:	eb63 0901 	sbc.w	r9, r3, r1
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	f04f 0300 	mov.w	r3, #0
 80022fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002302:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002306:	4690      	mov	r8, r2
 8002308:	4699      	mov	r9, r3
 800230a:	4623      	mov	r3, r4
 800230c:	eb18 0303 	adds.w	r3, r8, r3
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	462b      	mov	r3, r5
 8002314:	eb49 0303 	adc.w	r3, r9, r3
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	f04f 0200 	mov.w	r2, #0
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002326:	4629      	mov	r1, r5
 8002328:	024b      	lsls	r3, r1, #9
 800232a:	4621      	mov	r1, r4
 800232c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002330:	4621      	mov	r1, r4
 8002332:	024a      	lsls	r2, r1, #9
 8002334:	4610      	mov	r0, r2
 8002336:	4619      	mov	r1, r3
 8002338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800233a:	2200      	movs	r2, #0
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002344:	f7fd ff9c 	bl	8000280 <__aeabi_uldivmod>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4613      	mov	r3, r2
 800234e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002350:	e058      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002352:	4b38      	ldr	r3, [pc, #224]	; (8002434 <HAL_RCC_GetSysClockFreq+0x200>)
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	099b      	lsrs	r3, r3, #6
 8002358:	2200      	movs	r2, #0
 800235a:	4618      	mov	r0, r3
 800235c:	4611      	mov	r1, r2
 800235e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002362:	623b      	str	r3, [r7, #32]
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
 8002368:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800236c:	4642      	mov	r2, r8
 800236e:	464b      	mov	r3, r9
 8002370:	f04f 0000 	mov.w	r0, #0
 8002374:	f04f 0100 	mov.w	r1, #0
 8002378:	0159      	lsls	r1, r3, #5
 800237a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800237e:	0150      	lsls	r0, r2, #5
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4641      	mov	r1, r8
 8002386:	ebb2 0a01 	subs.w	sl, r2, r1
 800238a:	4649      	mov	r1, r9
 800238c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800239c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023a4:	ebb2 040a 	subs.w	r4, r2, sl
 80023a8:	eb63 050b 	sbc.w	r5, r3, fp
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	00eb      	lsls	r3, r5, #3
 80023b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80023ba:	00e2      	lsls	r2, r4, #3
 80023bc:	4614      	mov	r4, r2
 80023be:	461d      	mov	r5, r3
 80023c0:	4643      	mov	r3, r8
 80023c2:	18e3      	adds	r3, r4, r3
 80023c4:	603b      	str	r3, [r7, #0]
 80023c6:	464b      	mov	r3, r9
 80023c8:	eb45 0303 	adc.w	r3, r5, r3
 80023cc:	607b      	str	r3, [r7, #4]
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023da:	4629      	mov	r1, r5
 80023dc:	028b      	lsls	r3, r1, #10
 80023de:	4621      	mov	r1, r4
 80023e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023e4:	4621      	mov	r1, r4
 80023e6:	028a      	lsls	r2, r1, #10
 80023e8:	4610      	mov	r0, r2
 80023ea:	4619      	mov	r1, r3
 80023ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80023ee:	2200      	movs	r2, #0
 80023f0:	61bb      	str	r3, [r7, #24]
 80023f2:	61fa      	str	r2, [r7, #28]
 80023f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023f8:	f7fd ff42 	bl	8000280 <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4613      	mov	r3, r2
 8002402:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_GetSysClockFreq+0x200>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	0c1b      	lsrs	r3, r3, #16
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	3301      	adds	r3, #1
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002414:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800241e:	e002      	b.n	8002426 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002420:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetSysClockFreq+0x204>)
 8002422:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002428:	4618      	mov	r0, r3
 800242a:	3750      	adds	r7, #80	; 0x50
 800242c:	46bd      	mov	sp, r7
 800242e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	00f42400 	.word	0x00f42400
 800243c:	007a1200 	.word	0x007a1200

08002440 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002444:	4b03      	ldr	r3, [pc, #12]	; (8002454 <HAL_RCC_GetHCLKFreq+0x14>)
 8002446:	681b      	ldr	r3, [r3, #0]
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	20000000 	.word	0x20000000

08002458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800245c:	f7ff fff0 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002460:	4602      	mov	r2, r0
 8002462:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	0a9b      	lsrs	r3, r3, #10
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	4903      	ldr	r1, [pc, #12]	; (800247c <HAL_RCC_GetPCLK1Freq+0x24>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002474:	4618      	mov	r0, r3
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40023800 	.word	0x40023800
 800247c:	08006d58 	.word	0x08006d58

08002480 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002484:	f7ff ffdc 	bl	8002440 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0b5b      	lsrs	r3, r3, #13
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4903      	ldr	r1, [pc, #12]	; (80024a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800249c:	4618      	mov	r0, r3
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	40023800 	.word	0x40023800
 80024a4:	08006d58 	.word	0x08006d58

080024a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
 80024b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	220f      	movs	r2, #15
 80024b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0203 	and.w	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024dc:	4b09      	ldr	r3, [pc, #36]	; (8002504 <HAL_RCC_GetClockConfig+0x5c>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	08db      	lsrs	r3, r3, #3
 80024e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024ea:	4b07      	ldr	r3, [pc, #28]	; (8002508 <HAL_RCC_GetClockConfig+0x60>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0207 	and.w	r2, r3, #7
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	601a      	str	r2, [r3, #0]
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40023c00 	.word	0x40023c00

0800250c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e041      	b.n	80025a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002524:	b2db      	uxtb	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d106      	bne.n	8002538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f839 	bl	80025aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2202      	movs	r2, #2
 800253c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	4619      	mov	r1, r3
 800254a:	4610      	mov	r0, r2
 800254c:	f000 f9ca 	bl	80028e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d001      	beq.n	80025d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e044      	b.n	8002662 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2202      	movs	r2, #2
 80025dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0201 	orr.w	r2, r2, #1
 80025ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_TIM_Base_Start_IT+0xb0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d018      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x6c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002602:	d013      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x6c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <HAL_TIM_Base_Start_IT+0xb4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00e      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x6c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a19      	ldr	r2, [pc, #100]	; (8002678 <HAL_TIM_Base_Start_IT+0xb8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d009      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x6c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <HAL_TIM_Base_Start_IT+0xbc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_TIM_Base_Start_IT+0x6c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a16      	ldr	r2, [pc, #88]	; (8002680 <HAL_TIM_Base_Start_IT+0xc0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d111      	bne.n	8002650 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b06      	cmp	r3, #6
 800263c:	d010      	beq.n	8002660 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f042 0201 	orr.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	e007      	b.n	8002660 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 0201 	orr.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40010000 	.word	0x40010000
 8002674:	40000400 	.word	0x40000400
 8002678:	40000800 	.word	0x40000800
 800267c:	40000c00 	.word	0x40000c00
 8002680:	40014000 	.word	0x40014000

08002684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b02      	cmp	r3, #2
 8002698:	d122      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d11b      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0202 	mvn.w	r2, #2
 80026b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	699b      	ldr	r3, [r3, #24]
 80026be:	f003 0303 	and.w	r3, r3, #3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f8ee 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 80026cc:	e005      	b.n	80026da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f8e0 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8f1 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d122      	bne.n	8002734 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d11b      	bne.n	8002734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0204 	mvn.w	r2, #4
 8002704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2202      	movs	r2, #2
 800270a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f000 f8c4 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 8002720:	e005      	b.n	800272e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f8b6 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f8c7 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0308 	and.w	r3, r3, #8
 800273e:	2b08      	cmp	r3, #8
 8002740:	d122      	bne.n	8002788 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b08      	cmp	r3, #8
 800274e:	d11b      	bne.n	8002788 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0208 	mvn.w	r2, #8
 8002758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2204      	movs	r2, #4
 800275e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	69db      	ldr	r3, [r3, #28]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f89a 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 8002774:	e005      	b.n	8002782 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f88c 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 f89d 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0310 	and.w	r3, r3, #16
 8002792:	2b10      	cmp	r3, #16
 8002794:	d122      	bne.n	80027dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	2b10      	cmp	r3, #16
 80027a2:	d11b      	bne.n	80027dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f06f 0210 	mvn.w	r2, #16
 80027ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2208      	movs	r2, #8
 80027b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d003      	beq.n	80027ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f870 	bl	80028a8 <HAL_TIM_IC_CaptureCallback>
 80027c8:	e005      	b.n	80027d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f862 	bl	8002894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f000 f873 	bl	80028bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10e      	bne.n	8002808 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d107      	bne.n	8002808 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f06f 0201 	mvn.w	r2, #1
 8002800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f7fe f8b8 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002812:	2b80      	cmp	r3, #128	; 0x80
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002820:	2b80      	cmp	r3, #128	; 0x80
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f8e2 	bl	80029f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283e:	2b40      	cmp	r3, #64	; 0x40
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284c:	2b40      	cmp	r3, #64	; 0x40
 800284e:	d107      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f838 	bl	80028d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0320 	and.w	r3, r3, #32
 800286a:	2b20      	cmp	r3, #32
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0320 	and.w	r3, r3, #32
 8002878:	2b20      	cmp	r3, #32
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0220 	mvn.w	r2, #32
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f8ac 	bl	80029e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800289c:	bf00      	nop
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a34      	ldr	r2, [pc, #208]	; (80029c8 <TIM_Base_SetConfig+0xe4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00f      	beq.n	800291c <TIM_Base_SetConfig+0x38>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d00b      	beq.n	800291c <TIM_Base_SetConfig+0x38>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a31      	ldr	r2, [pc, #196]	; (80029cc <TIM_Base_SetConfig+0xe8>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d007      	beq.n	800291c <TIM_Base_SetConfig+0x38>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a30      	ldr	r2, [pc, #192]	; (80029d0 <TIM_Base_SetConfig+0xec>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d003      	beq.n	800291c <TIM_Base_SetConfig+0x38>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a2f      	ldr	r2, [pc, #188]	; (80029d4 <TIM_Base_SetConfig+0xf0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d108      	bne.n	800292e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	68fa      	ldr	r2, [r7, #12]
 800292a:	4313      	orrs	r3, r2
 800292c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a25      	ldr	r2, [pc, #148]	; (80029c8 <TIM_Base_SetConfig+0xe4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01b      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800293c:	d017      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a22      	ldr	r2, [pc, #136]	; (80029cc <TIM_Base_SetConfig+0xe8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d013      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a21      	ldr	r2, [pc, #132]	; (80029d0 <TIM_Base_SetConfig+0xec>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00f      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a20      	ldr	r2, [pc, #128]	; (80029d4 <TIM_Base_SetConfig+0xf0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00b      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <TIM_Base_SetConfig+0xf4>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a1e      	ldr	r2, [pc, #120]	; (80029dc <TIM_Base_SetConfig+0xf8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d003      	beq.n	800296e <TIM_Base_SetConfig+0x8a>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1d      	ldr	r2, [pc, #116]	; (80029e0 <TIM_Base_SetConfig+0xfc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d108      	bne.n	8002980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a08      	ldr	r2, [pc, #32]	; (80029c8 <TIM_Base_SetConfig+0xe4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40014000 	.word	0x40014000
 80029dc:	40014400 	.word	0x40014400
 80029e0:	40014800 	.word	0x40014800

080029e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e03f      	b.n	8002a9e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fe f828 	bl	8000a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2224      	movs	r2, #36	; 0x24
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f929 	bl	8002ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b08a      	sub	sp, #40	; 0x28
 8002aaa:	af02      	add	r7, sp, #8
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	603b      	str	r3, [r7, #0]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	d17c      	bne.n	8002bc0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d002      	beq.n	8002ad2 <HAL_UART_Transmit+0x2c>
 8002acc:	88fb      	ldrh	r3, [r7, #6]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d101      	bne.n	8002ad6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e075      	b.n	8002bc2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_UART_Transmit+0x3e>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e06e      	b.n	8002bc2 <HAL_UART_Transmit+0x11c>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	2200      	movs	r2, #0
 8002af0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2221      	movs	r2, #33	; 0x21
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002afa:	f7fe f9b5 	bl	8000e68 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	88fa      	ldrh	r2, [r7, #6]
 8002b04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	88fa      	ldrh	r2, [r7, #6]
 8002b0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b14:	d108      	bne.n	8002b28 <HAL_UART_Transmit+0x82>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d104      	bne.n	8002b28 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	61bb      	str	r3, [r7, #24]
 8002b26:	e003      	b.n	8002b30 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002b38:	e02a      	b.n	8002b90 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2200      	movs	r2, #0
 8002b42:	2180      	movs	r1, #128	; 0x80
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f000 f840 	bl	8002bca <UART_WaitOnFlagUntilTimeout>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e036      	b.n	8002bc2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10b      	bne.n	8002b72 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3302      	adds	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
 8002b70:	e007      	b.n	8002b82 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	781a      	ldrb	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3301      	adds	r3, #1
 8002b80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b86:	b29b      	uxth	r3, r3
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b29a      	uxth	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b94:	b29b      	uxth	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1cf      	bne.n	8002b3a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2140      	movs	r1, #64	; 0x40
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 f810 	bl	8002bca <UART_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e006      	b.n	8002bc2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b090      	sub	sp, #64	; 0x40
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	603b      	str	r3, [r7, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bda:	e050      	b.n	8002c7e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d04c      	beq.n	8002c7e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x30>
 8002bea:	f7fe f93d 	bl	8000e68 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d241      	bcs.n	8002c7e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	330c      	adds	r3, #12
 8002c00:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c04:	e853 3f00 	ldrex	r3, [r3]
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	330c      	adds	r3, #12
 8002c18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c1a:	637a      	str	r2, [r7, #52]	; 0x34
 8002c1c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c22:	e841 2300 	strex	r3, r2, [r1]
 8002c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d1e5      	bne.n	8002bfa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	3314      	adds	r3, #20
 8002c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	e853 3f00 	ldrex	r3, [r3]
 8002c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	f023 0301 	bic.w	r3, r3, #1
 8002c44:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3314      	adds	r3, #20
 8002c4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c4e:	623a      	str	r2, [r7, #32]
 8002c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c52:	69f9      	ldr	r1, [r7, #28]
 8002c54:	6a3a      	ldr	r2, [r7, #32]
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1e5      	bne.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2220      	movs	r2, #32
 8002c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2220      	movs	r2, #32
 8002c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e00f      	b.n	8002c9e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	4013      	ands	r3, r2
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	bf0c      	ite	eq
 8002c8e:	2301      	moveq	r3, #1
 8002c90:	2300      	movne	r3, #0
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d09f      	beq.n	8002bdc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3740      	adds	r7, #64	; 0x40
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cac:	b0c0      	sub	sp, #256	; 0x100
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc4:	68d9      	ldr	r1, [r3, #12]
 8002cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	ea40 0301 	orr.w	r3, r0, r1
 8002cd0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cdc:	691b      	ldr	r3, [r3, #16]
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cec:	69db      	ldr	r3, [r3, #28]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002d00:	f021 010c 	bic.w	r1, r1, #12
 8002d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d22:	6999      	ldr	r1, [r3, #24]
 8002d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	ea40 0301 	orr.w	r3, r0, r1
 8002d2e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	4b8f      	ldr	r3, [pc, #572]	; (8002f74 <UART_SetConfig+0x2cc>)
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d005      	beq.n	8002d48 <UART_SetConfig+0xa0>
 8002d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b8d      	ldr	r3, [pc, #564]	; (8002f78 <UART_SetConfig+0x2d0>)
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d104      	bne.n	8002d52 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d48:	f7ff fb9a 	bl	8002480 <HAL_RCC_GetPCLK2Freq>
 8002d4c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002d50:	e003      	b.n	8002d5a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d52:	f7ff fb81 	bl	8002458 <HAL_RCC_GetPCLK1Freq>
 8002d56:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d64:	f040 810c 	bne.w	8002f80 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d72:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d76:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d7a:	4622      	mov	r2, r4
 8002d7c:	462b      	mov	r3, r5
 8002d7e:	1891      	adds	r1, r2, r2
 8002d80:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d82:	415b      	adcs	r3, r3
 8002d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d86:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	eb12 0801 	adds.w	r8, r2, r1
 8002d90:	4629      	mov	r1, r5
 8002d92:	eb43 0901 	adc.w	r9, r3, r1
 8002d96:	f04f 0200 	mov.w	r2, #0
 8002d9a:	f04f 0300 	mov.w	r3, #0
 8002d9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002da6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002daa:	4690      	mov	r8, r2
 8002dac:	4699      	mov	r9, r3
 8002dae:	4623      	mov	r3, r4
 8002db0:	eb18 0303 	adds.w	r3, r8, r3
 8002db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002db8:	462b      	mov	r3, r5
 8002dba:	eb49 0303 	adc.w	r3, r9, r3
 8002dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002dc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002dd2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	18db      	adds	r3, r3, r3
 8002dda:	653b      	str	r3, [r7, #80]	; 0x50
 8002ddc:	4613      	mov	r3, r2
 8002dde:	eb42 0303 	adc.w	r3, r2, r3
 8002de2:	657b      	str	r3, [r7, #84]	; 0x54
 8002de4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002de8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002dec:	f7fd fa48 	bl	8000280 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4b61      	ldr	r3, [pc, #388]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002df6:	fba3 2302 	umull	r2, r3, r3, r2
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	011c      	lsls	r4, r3, #4
 8002dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e02:	2200      	movs	r2, #0
 8002e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e08:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002e0c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002e10:	4642      	mov	r2, r8
 8002e12:	464b      	mov	r3, r9
 8002e14:	1891      	adds	r1, r2, r2
 8002e16:	64b9      	str	r1, [r7, #72]	; 0x48
 8002e18:	415b      	adcs	r3, r3
 8002e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e1c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002e20:	4641      	mov	r1, r8
 8002e22:	eb12 0a01 	adds.w	sl, r2, r1
 8002e26:	4649      	mov	r1, r9
 8002e28:	eb43 0b01 	adc.w	fp, r3, r1
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002e38:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002e3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002e40:	4692      	mov	sl, r2
 8002e42:	469b      	mov	fp, r3
 8002e44:	4643      	mov	r3, r8
 8002e46:	eb1a 0303 	adds.w	r3, sl, r3
 8002e4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e4e:	464b      	mov	r3, r9
 8002e50:	eb4b 0303 	adc.w	r3, fp, r3
 8002e54:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e64:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e68:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	18db      	adds	r3, r3, r3
 8002e70:	643b      	str	r3, [r7, #64]	; 0x40
 8002e72:	4613      	mov	r3, r2
 8002e74:	eb42 0303 	adc.w	r3, r2, r3
 8002e78:	647b      	str	r3, [r7, #68]	; 0x44
 8002e7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e7e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e82:	f7fd f9fd 	bl	8000280 <__aeabi_uldivmod>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4b3b      	ldr	r3, [pc, #236]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002e8e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2264      	movs	r2, #100	; 0x64
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	1acb      	subs	r3, r1, r3
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002ea2:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002ea4:	fba3 2302 	umull	r2, r3, r3, r2
 8002ea8:	095b      	lsrs	r3, r3, #5
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002eb0:	441c      	add	r4, r3
 8002eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ebc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002ec0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	1891      	adds	r1, r2, r2
 8002eca:	63b9      	str	r1, [r7, #56]	; 0x38
 8002ecc:	415b      	adcs	r3, r3
 8002ece:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002ed4:	4641      	mov	r1, r8
 8002ed6:	1851      	adds	r1, r2, r1
 8002ed8:	6339      	str	r1, [r7, #48]	; 0x30
 8002eda:	4649      	mov	r1, r9
 8002edc:	414b      	adcs	r3, r1
 8002ede:	637b      	str	r3, [r7, #52]	; 0x34
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002eec:	4659      	mov	r1, fp
 8002eee:	00cb      	lsls	r3, r1, #3
 8002ef0:	4651      	mov	r1, sl
 8002ef2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ef6:	4651      	mov	r1, sl
 8002ef8:	00ca      	lsls	r2, r1, #3
 8002efa:	4610      	mov	r0, r2
 8002efc:	4619      	mov	r1, r3
 8002efe:	4603      	mov	r3, r0
 8002f00:	4642      	mov	r2, r8
 8002f02:	189b      	adds	r3, r3, r2
 8002f04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f08:	464b      	mov	r3, r9
 8002f0a:	460a      	mov	r2, r1
 8002f0c:	eb42 0303 	adc.w	r3, r2, r3
 8002f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002f20:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002f24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002f28:	460b      	mov	r3, r1
 8002f2a:	18db      	adds	r3, r3, r3
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2e:	4613      	mov	r3, r2
 8002f30:	eb42 0303 	adc.w	r3, r2, r3
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f36:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f3a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002f3e:	f7fd f99f 	bl	8000280 <__aeabi_uldivmod>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4b0d      	ldr	r3, [pc, #52]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002f48:	fba3 1302 	umull	r1, r3, r3, r2
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	2164      	movs	r1, #100	; 0x64
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	3332      	adds	r3, #50	; 0x32
 8002f5a:	4a08      	ldr	r2, [pc, #32]	; (8002f7c <UART_SetConfig+0x2d4>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	f003 0207 	and.w	r2, r3, #7
 8002f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4422      	add	r2, r4
 8002f6e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f70:	e105      	b.n	800317e <UART_SetConfig+0x4d6>
 8002f72:	bf00      	nop
 8002f74:	40011000 	.word	0x40011000
 8002f78:	40011400 	.word	0x40011400
 8002f7c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f84:	2200      	movs	r2, #0
 8002f86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f8a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f8e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f92:	4642      	mov	r2, r8
 8002f94:	464b      	mov	r3, r9
 8002f96:	1891      	adds	r1, r2, r2
 8002f98:	6239      	str	r1, [r7, #32]
 8002f9a:	415b      	adcs	r3, r3
 8002f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fa2:	4641      	mov	r1, r8
 8002fa4:	1854      	adds	r4, r2, r1
 8002fa6:	4649      	mov	r1, r9
 8002fa8:	eb43 0501 	adc.w	r5, r3, r1
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	f04f 0300 	mov.w	r3, #0
 8002fb4:	00eb      	lsls	r3, r5, #3
 8002fb6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fba:	00e2      	lsls	r2, r4, #3
 8002fbc:	4614      	mov	r4, r2
 8002fbe:	461d      	mov	r5, r3
 8002fc0:	4643      	mov	r3, r8
 8002fc2:	18e3      	adds	r3, r4, r3
 8002fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002fc8:	464b      	mov	r3, r9
 8002fca:	eb45 0303 	adc.w	r3, r5, r3
 8002fce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002fde:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002fe2:	f04f 0200 	mov.w	r2, #0
 8002fe6:	f04f 0300 	mov.w	r3, #0
 8002fea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002fee:	4629      	mov	r1, r5
 8002ff0:	008b      	lsls	r3, r1, #2
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ff8:	4621      	mov	r1, r4
 8002ffa:	008a      	lsls	r2, r1, #2
 8002ffc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003000:	f7fd f93e 	bl	8000280 <__aeabi_uldivmod>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4b60      	ldr	r3, [pc, #384]	; (800318c <UART_SetConfig+0x4e4>)
 800300a:	fba3 2302 	umull	r2, r3, r3, r2
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	011c      	lsls	r4, r3, #4
 8003012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003016:	2200      	movs	r2, #0
 8003018:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800301c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003020:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003024:	4642      	mov	r2, r8
 8003026:	464b      	mov	r3, r9
 8003028:	1891      	adds	r1, r2, r2
 800302a:	61b9      	str	r1, [r7, #24]
 800302c:	415b      	adcs	r3, r3
 800302e:	61fb      	str	r3, [r7, #28]
 8003030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003034:	4641      	mov	r1, r8
 8003036:	1851      	adds	r1, r2, r1
 8003038:	6139      	str	r1, [r7, #16]
 800303a:	4649      	mov	r1, r9
 800303c:	414b      	adcs	r3, r1
 800303e:	617b      	str	r3, [r7, #20]
 8003040:	f04f 0200 	mov.w	r2, #0
 8003044:	f04f 0300 	mov.w	r3, #0
 8003048:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800304c:	4659      	mov	r1, fp
 800304e:	00cb      	lsls	r3, r1, #3
 8003050:	4651      	mov	r1, sl
 8003052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003056:	4651      	mov	r1, sl
 8003058:	00ca      	lsls	r2, r1, #3
 800305a:	4610      	mov	r0, r2
 800305c:	4619      	mov	r1, r3
 800305e:	4603      	mov	r3, r0
 8003060:	4642      	mov	r2, r8
 8003062:	189b      	adds	r3, r3, r2
 8003064:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003068:	464b      	mov	r3, r9
 800306a:	460a      	mov	r2, r1
 800306c:	eb42 0303 	adc.w	r3, r2, r3
 8003070:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	67bb      	str	r3, [r7, #120]	; 0x78
 800307e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800308c:	4649      	mov	r1, r9
 800308e:	008b      	lsls	r3, r1, #2
 8003090:	4641      	mov	r1, r8
 8003092:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003096:	4641      	mov	r1, r8
 8003098:	008a      	lsls	r2, r1, #2
 800309a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800309e:	f7fd f8ef 	bl	8000280 <__aeabi_uldivmod>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4b39      	ldr	r3, [pc, #228]	; (800318c <UART_SetConfig+0x4e4>)
 80030a8:	fba3 1302 	umull	r1, r3, r3, r2
 80030ac:	095b      	lsrs	r3, r3, #5
 80030ae:	2164      	movs	r1, #100	; 0x64
 80030b0:	fb01 f303 	mul.w	r3, r1, r3
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	011b      	lsls	r3, r3, #4
 80030b8:	3332      	adds	r3, #50	; 0x32
 80030ba:	4a34      	ldr	r2, [pc, #208]	; (800318c <UART_SetConfig+0x4e4>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	095b      	lsrs	r3, r3, #5
 80030c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030c6:	441c      	add	r4, r3
 80030c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030cc:	2200      	movs	r2, #0
 80030ce:	673b      	str	r3, [r7, #112]	; 0x70
 80030d0:	677a      	str	r2, [r7, #116]	; 0x74
 80030d2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80030d6:	4642      	mov	r2, r8
 80030d8:	464b      	mov	r3, r9
 80030da:	1891      	adds	r1, r2, r2
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	415b      	adcs	r3, r3
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030e6:	4641      	mov	r1, r8
 80030e8:	1851      	adds	r1, r2, r1
 80030ea:	6039      	str	r1, [r7, #0]
 80030ec:	4649      	mov	r1, r9
 80030ee:	414b      	adcs	r3, r1
 80030f0:	607b      	str	r3, [r7, #4]
 80030f2:	f04f 0200 	mov.w	r2, #0
 80030f6:	f04f 0300 	mov.w	r3, #0
 80030fa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030fe:	4659      	mov	r1, fp
 8003100:	00cb      	lsls	r3, r1, #3
 8003102:	4651      	mov	r1, sl
 8003104:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003108:	4651      	mov	r1, sl
 800310a:	00ca      	lsls	r2, r1, #3
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	4603      	mov	r3, r0
 8003112:	4642      	mov	r2, r8
 8003114:	189b      	adds	r3, r3, r2
 8003116:	66bb      	str	r3, [r7, #104]	; 0x68
 8003118:	464b      	mov	r3, r9
 800311a:	460a      	mov	r2, r1
 800311c:	eb42 0303 	adc.w	r3, r2, r3
 8003120:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	663b      	str	r3, [r7, #96]	; 0x60
 800312c:	667a      	str	r2, [r7, #100]	; 0x64
 800312e:	f04f 0200 	mov.w	r2, #0
 8003132:	f04f 0300 	mov.w	r3, #0
 8003136:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800313a:	4649      	mov	r1, r9
 800313c:	008b      	lsls	r3, r1, #2
 800313e:	4641      	mov	r1, r8
 8003140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003144:	4641      	mov	r1, r8
 8003146:	008a      	lsls	r2, r1, #2
 8003148:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800314c:	f7fd f898 	bl	8000280 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4b0d      	ldr	r3, [pc, #52]	; (800318c <UART_SetConfig+0x4e4>)
 8003156:	fba3 1302 	umull	r1, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2164      	movs	r1, #100	; 0x64
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	011b      	lsls	r3, r3, #4
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a08      	ldr	r2, [pc, #32]	; (800318c <UART_SetConfig+0x4e4>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 020f 	and.w	r2, r3, #15
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4422      	add	r2, r4
 800317c:	609a      	str	r2, [r3, #8]
}
 800317e:	bf00      	nop
 8003180:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003184:	46bd      	mov	sp, r7
 8003186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800318a:	bf00      	nop
 800318c:	51eb851f 	.word	0x51eb851f

08003190 <__NVIC_SetPriority>:
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	; (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80031e8:	4b05      	ldr	r3, [pc, #20]	; (8003200 <SysTick_Handler+0x1c>)
 80031ea:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80031ec:	f001 fcfe 	bl	8004bec <xTaskGetSchedulerState>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d001      	beq.n	80031fa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80031f6:	f002 fae7 	bl	80057c8 <xPortSysTickHandler>
  }
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	e000e010 	.word	0xe000e010

08003204 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003204:	b580      	push	{r7, lr}
 8003206:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003208:	2100      	movs	r1, #0
 800320a:	f06f 0004 	mvn.w	r0, #4
 800320e:	f7ff ffbf 	bl	8003190 <__NVIC_SetPriority>
#endif
}
 8003212:	bf00      	nop
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800321e:	f3ef 8305 	mrs	r3, IPSR
 8003222:	603b      	str	r3, [r7, #0]
  return(result);
 8003224:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800322a:	f06f 0305 	mvn.w	r3, #5
 800322e:	607b      	str	r3, [r7, #4]
 8003230:	e00c      	b.n	800324c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003232:	4b0a      	ldr	r3, [pc, #40]	; (800325c <osKernelInitialize+0x44>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d105      	bne.n	8003246 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800323a:	4b08      	ldr	r3, [pc, #32]	; (800325c <osKernelInitialize+0x44>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003240:	2300      	movs	r3, #0
 8003242:	607b      	str	r3, [r7, #4]
 8003244:	e002      	b.n	800324c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003246:	f04f 33ff 	mov.w	r3, #4294967295
 800324a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800324c:	687b      	ldr	r3, [r7, #4]
}
 800324e:	4618      	mov	r0, r3
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000180 	.word	0x20000180

08003260 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003266:	f3ef 8305 	mrs	r3, IPSR
 800326a:	603b      	str	r3, [r7, #0]
  return(result);
 800326c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003272:	f06f 0305 	mvn.w	r3, #5
 8003276:	607b      	str	r3, [r7, #4]
 8003278:	e010      	b.n	800329c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800327a:	4b0b      	ldr	r3, [pc, #44]	; (80032a8 <osKernelStart+0x48>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d109      	bne.n	8003296 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003282:	f7ff ffbf 	bl	8003204 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003286:	4b08      	ldr	r3, [pc, #32]	; (80032a8 <osKernelStart+0x48>)
 8003288:	2202      	movs	r2, #2
 800328a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800328c:	f001 f866 	bl	800435c <vTaskStartScheduler>
      stat = osOK;
 8003290:	2300      	movs	r3, #0
 8003292:	607b      	str	r3, [r7, #4]
 8003294:	e002      	b.n	800329c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003296:	f04f 33ff 	mov.w	r3, #4294967295
 800329a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800329c:	687b      	ldr	r3, [r7, #4]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000180 	.word	0x20000180

080032ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08e      	sub	sp, #56	; 0x38
 80032b0:	af04      	add	r7, sp, #16
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032bc:	f3ef 8305 	mrs	r3, IPSR
 80032c0:	617b      	str	r3, [r7, #20]
  return(result);
 80032c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d17e      	bne.n	80033c6 <osThreadNew+0x11a>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d07b      	beq.n	80033c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80032ce:	2380      	movs	r3, #128	; 0x80
 80032d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80032d2:	2318      	movs	r3, #24
 80032d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80032d6:	2300      	movs	r3, #0
 80032d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80032da:	f04f 33ff 	mov.w	r3, #4294967295
 80032de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d045      	beq.n	8003372 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d002      	beq.n	80032f4 <osThreadNew+0x48>
        name = attr->name;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d002      	beq.n	8003302 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d008      	beq.n	800331a <osThreadNew+0x6e>
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	2b38      	cmp	r3, #56	; 0x38
 800330c:	d805      	bhi.n	800331a <osThreadNew+0x6e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <osThreadNew+0x72>
        return (NULL);
 800331a:	2300      	movs	r3, #0
 800331c:	e054      	b.n	80033c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	089b      	lsrs	r3, r3, #2
 800332c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00e      	beq.n	8003354 <osThreadNew+0xa8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b5b      	cmp	r3, #91	; 0x5b
 800333c:	d90a      	bls.n	8003354 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <osThreadNew+0xa8>
        mem = 1;
 800334e:	2301      	movs	r3, #1
 8003350:	61bb      	str	r3, [r7, #24]
 8003352:	e010      	b.n	8003376 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d10c      	bne.n	8003376 <osThreadNew+0xca>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d108      	bne.n	8003376 <osThreadNew+0xca>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d104      	bne.n	8003376 <osThreadNew+0xca>
          mem = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
 8003370:	e001      	b.n	8003376 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d110      	bne.n	800339e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003384:	9202      	str	r2, [sp, #8]
 8003386:	9301      	str	r3, [sp, #4]
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	6a3a      	ldr	r2, [r7, #32]
 8003390:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f000 fe0c 	bl	8003fb0 <xTaskCreateStatic>
 8003398:	4603      	mov	r3, r0
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	e013      	b.n	80033c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d110      	bne.n	80033c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80033a4:	6a3b      	ldr	r3, [r7, #32]
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	9301      	str	r3, [sp, #4]
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033b6:	68f8      	ldr	r0, [r7, #12]
 80033b8:	f000 fe57 	bl	800406a <xTaskCreate>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d001      	beq.n	80033c6 <osThreadNew+0x11a>
            hTask = NULL;
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80033c6:	693b      	ldr	r3, [r7, #16]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3728      	adds	r7, #40	; 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80033d8:	f3ef 8305 	mrs	r3, IPSR
 80033dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80033de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <osDelay+0x1c>
    stat = osErrorISR;
 80033e4:	f06f 0305 	mvn.w	r3, #5
 80033e8:	60fb      	str	r3, [r7, #12]
 80033ea:	e007      	b.n	80033fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80033ec:	2300      	movs	r3, #0
 80033ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d002      	beq.n	80033fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 ff7c 	bl	80042f4 <vTaskDelay>
    }
  }

  return (stat);
 80033fc:	68fb      	ldr	r3, [r7, #12]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a07      	ldr	r2, [pc, #28]	; (8003434 <vApplicationGetIdleTaskMemory+0x2c>)
 8003418:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4a06      	ldr	r2, [pc, #24]	; (8003438 <vApplicationGetIdleTaskMemory+0x30>)
 800341e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2280      	movs	r2, #128	; 0x80
 8003424:	601a      	str	r2, [r3, #0]
}
 8003426:	bf00      	nop
 8003428:	3714      	adds	r7, #20
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000184 	.word	0x20000184
 8003438:	200001e0 	.word	0x200001e0

0800343c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a07      	ldr	r2, [pc, #28]	; (8003468 <vApplicationGetTimerTaskMemory+0x2c>)
 800344c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4a06      	ldr	r2, [pc, #24]	; (800346c <vApplicationGetTimerTaskMemory+0x30>)
 8003452:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345a:	601a      	str	r2, [r3, #0]
}
 800345c:	bf00      	nop
 800345e:	3714      	adds	r7, #20
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	200003e0 	.word	0x200003e0
 800346c:	2000043c 	.word	0x2000043c

08003470 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f103 0208 	add.w	r2, r3, #8
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f04f 32ff 	mov.w	r2, #4294967295
 8003488:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f103 0208 	add.w	r2, r3, #8
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f103 0208 	add.w	r2, r3, #8
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034be:	bf00      	nop
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr

080034ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ca:	b480      	push	{r7}
 80034cc:	b085      	sub	sp, #20
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
 80034d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	689a      	ldr	r2, [r3, #8]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	683a      	ldr	r2, [r7, #0]
 80034f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	1c5a      	adds	r2, r3, #1
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	601a      	str	r2, [r3, #0]
}
 8003506:	bf00      	nop
 8003508:	3714      	adds	r7, #20
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr

08003512 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
 800351a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d103      	bne.n	8003532 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	60fb      	str	r3, [r7, #12]
 8003530:	e00c      	b.n	800354c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	3308      	adds	r3, #8
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	e002      	b.n	8003540 <vListInsert+0x2e>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	429a      	cmp	r2, r3
 800354a:	d2f6      	bcs.n	800353a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	601a      	str	r2, [r3, #0]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	6892      	ldr	r2, [r2, #8]
 800359a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	6852      	ldr	r2, [r2, #4]
 80035a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d103      	bne.n	80035b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	1e5a      	subs	r2, r3, #1
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3714      	adds	r7, #20
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10a      	bne.n	8003602 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f0:	f383 8811 	msr	BASEPRI, r3
 80035f4:	f3bf 8f6f 	isb	sy
 80035f8:	f3bf 8f4f 	dsb	sy
 80035fc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035fe:	bf00      	nop
 8003600:	e7fe      	b.n	8003600 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003602:	f002 f84f 	bl	80056a4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	68f9      	ldr	r1, [r7, #12]
 8003610:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003612:	fb01 f303 	mul.w	r3, r1, r3
 8003616:	441a      	add	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	3b01      	subs	r3, #1
 8003634:	68f9      	ldr	r1, [r7, #12]
 8003636:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003638:	fb01 f303 	mul.w	r3, r1, r3
 800363c:	441a      	add	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	22ff      	movs	r2, #255	; 0xff
 8003646:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	22ff      	movs	r2, #255	; 0xff
 800364e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d114      	bne.n	8003682 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d01a      	beq.n	8003696 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	3310      	adds	r3, #16
 8003664:	4618      	mov	r0, r3
 8003666:	f001 f903 	bl	8004870 <xTaskRemoveFromEventList>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d012      	beq.n	8003696 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003670:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <xQueueGenericReset+0xcc>)
 8003672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	f3bf 8f4f 	dsb	sy
 800367c:	f3bf 8f6f 	isb	sy
 8003680:	e009      	b.n	8003696 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	3310      	adds	r3, #16
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fef2 	bl	8003470 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3324      	adds	r3, #36	; 0x24
 8003690:	4618      	mov	r0, r3
 8003692:	f7ff feed 	bl	8003470 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003696:	f002 f835 	bl	8005704 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800369a:	2301      	movs	r3, #1
}
 800369c:	4618      	mov	r0, r3
 800369e:	3710      	adds	r7, #16
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	e000ed04 	.word	0xe000ed04

080036a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b08e      	sub	sp, #56	; 0x38
 80036ac:	af02      	add	r7, sp, #8
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
 80036b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10a      	bne.n	80036d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80036bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036c0:	f383 8811 	msr	BASEPRI, r3
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	f3bf 8f4f 	dsb	sy
 80036cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80036ce:	bf00      	nop
 80036d0:	e7fe      	b.n	80036d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <xQueueGenericCreateStatic+0x52>
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <xQueueGenericCreateStatic+0x56>
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <xQueueGenericCreateStatic+0x58>
 80036fe:	2300      	movs	r3, #0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003708:	f383 8811 	msr	BASEPRI, r3
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f3bf 8f4f 	dsb	sy
 8003714:	623b      	str	r3, [r7, #32]
}
 8003716:	bf00      	nop
 8003718:	e7fe      	b.n	8003718 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <xQueueGenericCreateStatic+0x7e>
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <xQueueGenericCreateStatic+0x82>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <xQueueGenericCreateStatic+0x84>
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	61fb      	str	r3, [r7, #28]
}
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003746:	2350      	movs	r3, #80	; 0x50
 8003748:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b50      	cmp	r3, #80	; 0x50
 800374e:	d00a      	beq.n	8003766 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003754:	f383 8811 	msr	BASEPRI, r3
 8003758:	f3bf 8f6f 	isb	sy
 800375c:	f3bf 8f4f 	dsb	sy
 8003760:	61bb      	str	r3, [r7, #24]
}
 8003762:	bf00      	nop
 8003764:	e7fe      	b.n	8003764 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003766:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800376c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00d      	beq.n	800378e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800377a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800377e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68b9      	ldr	r1, [r7, #8]
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f805 	bl	8003798 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800378e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003790:	4618      	mov	r0, r3
 8003792:	3730      	adds	r7, #48	; 0x30
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d103      	bne.n	80037b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	e002      	b.n	80037ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	68fa      	ldr	r2, [r7, #12]
 80037be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	68ba      	ldr	r2, [r7, #8]
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80037c6:	2101      	movs	r1, #1
 80037c8:	69b8      	ldr	r0, [r7, #24]
 80037ca:	f7ff ff05 	bl	80035d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	78fa      	ldrb	r2, [r7, #3]
 80037d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80037d6:	bf00      	nop
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b08e      	sub	sp, #56	; 0x38
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
 80037ec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80037ee:	2300      	movs	r3, #0
 80037f0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80037f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d10a      	bne.n	8003812 <xQueueGenericSend+0x32>
	__asm volatile
 80037fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003800:	f383 8811 	msr	BASEPRI, r3
 8003804:	f3bf 8f6f 	isb	sy
 8003808:	f3bf 8f4f 	dsb	sy
 800380c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800380e:	bf00      	nop
 8003810:	e7fe      	b.n	8003810 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <xQueueGenericSend+0x40>
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <xQueueGenericSend+0x44>
 8003820:	2301      	movs	r3, #1
 8003822:	e000      	b.n	8003826 <xQueueGenericSend+0x46>
 8003824:	2300      	movs	r3, #0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10a      	bne.n	8003840 <xQueueGenericSend+0x60>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800383c:	bf00      	nop
 800383e:	e7fe      	b.n	800383e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d103      	bne.n	800384e <xQueueGenericSend+0x6e>
 8003846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <xQueueGenericSend+0x72>
 800384e:	2301      	movs	r3, #1
 8003850:	e000      	b.n	8003854 <xQueueGenericSend+0x74>
 8003852:	2300      	movs	r3, #0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <xQueueGenericSend+0x8e>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	623b      	str	r3, [r7, #32]
}
 800386a:	bf00      	nop
 800386c:	e7fe      	b.n	800386c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800386e:	f001 f9bd 	bl	8004bec <xTaskGetSchedulerState>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d102      	bne.n	800387e <xQueueGenericSend+0x9e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <xQueueGenericSend+0xa2>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <xQueueGenericSend+0xa4>
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <xQueueGenericSend+0xbe>
	__asm volatile
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	61fb      	str	r3, [r7, #28]
}
 800389a:	bf00      	nop
 800389c:	e7fe      	b.n	800389c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800389e:	f001 ff01 	bl	80056a4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <xQueueGenericSend+0xd4>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d129      	bne.n	8003908 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	68b9      	ldr	r1, [r7, #8]
 80038b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038ba:	f000 fa0b 	bl	8003cd4 <prvCopyDataToQueue>
 80038be:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d010      	beq.n	80038ea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	3324      	adds	r3, #36	; 0x24
 80038cc:	4618      	mov	r0, r3
 80038ce:	f000 ffcf 	bl	8004870 <xTaskRemoveFromEventList>
 80038d2:	4603      	mov	r3, r0
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d013      	beq.n	8003900 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80038d8:	4b3f      	ldr	r3, [pc, #252]	; (80039d8 <xQueueGenericSend+0x1f8>)
 80038da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	f3bf 8f6f 	isb	sy
 80038e8:	e00a      	b.n	8003900 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d007      	beq.n	8003900 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <xQueueGenericSend+0x1f8>)
 80038f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003900:	f001 ff00 	bl	8005704 <vPortExitCritical>
				return pdPASS;
 8003904:	2301      	movs	r3, #1
 8003906:	e063      	b.n	80039d0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d103      	bne.n	8003916 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800390e:	f001 fef9 	bl	8005704 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003912:	2300      	movs	r3, #0
 8003914:	e05c      	b.n	80039d0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003918:	2b00      	cmp	r3, #0
 800391a:	d106      	bne.n	800392a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	4618      	mov	r0, r3
 8003922:	f001 f809 	bl	8004938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003926:	2301      	movs	r3, #1
 8003928:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800392a:	f001 feeb 	bl	8005704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800392e:	f000 fd7b 	bl	8004428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003932:	f001 feb7 	bl	80056a4 <vPortEnterCritical>
 8003936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003938:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800393c:	b25b      	sxtb	r3, r3
 800393e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003942:	d103      	bne.n	800394c <xQueueGenericSend+0x16c>
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003952:	b25b      	sxtb	r3, r3
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d103      	bne.n	8003962 <xQueueGenericSend+0x182>
 800395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003962:	f001 fecf 	bl	8005704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003966:	1d3a      	adds	r2, r7, #4
 8003968:	f107 0314 	add.w	r3, r7, #20
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fff8 	bl	8004964 <xTaskCheckForTimeOut>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d124      	bne.n	80039c4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800397a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800397c:	f000 faa2 	bl	8003ec4 <prvIsQueueFull>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d018      	beq.n	80039b8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003988:	3310      	adds	r3, #16
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f000 ff1e 	bl	80047d0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003994:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003996:	f000 fa2d 	bl	8003df4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800399a:	f000 fd53 	bl	8004444 <xTaskResumeAll>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	f47f af7c 	bne.w	800389e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039a6:	4b0c      	ldr	r3, [pc, #48]	; (80039d8 <xQueueGenericSend+0x1f8>)
 80039a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	f3bf 8f6f 	isb	sy
 80039b6:	e772      	b.n	800389e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039ba:	f000 fa1b 	bl	8003df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039be:	f000 fd41 	bl	8004444 <xTaskResumeAll>
 80039c2:	e76c      	b.n	800389e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80039c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039c6:	f000 fa15 	bl	8003df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80039ca:	f000 fd3b 	bl	8004444 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80039ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3738      	adds	r7, #56	; 0x38
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}
 80039d8:	e000ed04 	.word	0xe000ed04

080039dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b090      	sub	sp, #64	; 0x40
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
 80039e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80039ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d10a      	bne.n	8003a0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80039f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f8:	f383 8811 	msr	BASEPRI, r3
 80039fc:	f3bf 8f6f 	isb	sy
 8003a00:	f3bf 8f4f 	dsb	sy
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a06:	bf00      	nop
 8003a08:	e7fe      	b.n	8003a08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d103      	bne.n	8003a18 <xQueueGenericSendFromISR+0x3c>
 8003a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <xQueueGenericSendFromISR+0x40>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <xQueueGenericSendFromISR+0x42>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d10a      	bne.n	8003a38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	f3bf 8f4f 	dsb	sy
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a34:	bf00      	nop
 8003a36:	e7fe      	b.n	8003a36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d103      	bne.n	8003a46 <xQueueGenericSendFromISR+0x6a>
 8003a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <xQueueGenericSendFromISR+0x6e>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <xQueueGenericSendFromISR+0x70>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	623b      	str	r3, [r7, #32]
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a66:	f001 feff 	bl	8005868 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003a6a:	f3ef 8211 	mrs	r2, BASEPRI
 8003a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a72:	f383 8811 	msr	BASEPRI, r3
 8003a76:	f3bf 8f6f 	isb	sy
 8003a7a:	f3bf 8f4f 	dsb	sy
 8003a7e:	61fa      	str	r2, [r7, #28]
 8003a80:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003a82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d302      	bcc.n	8003a98 <xQueueGenericSendFromISR+0xbc>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d12f      	bne.n	8003af8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003aae:	f000 f911 	bl	8003cd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ab2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aba:	d112      	bne.n	8003ae2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d016      	beq.n	8003af2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	3324      	adds	r3, #36	; 0x24
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f000 fed1 	bl	8004870 <xTaskRemoveFromEventList>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00e      	beq.n	8003af2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	e007      	b.n	8003af2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ae2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	b25a      	sxtb	r2, r3
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003af2:	2301      	movs	r3, #1
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003af6:	e001      	b.n	8003afc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3740      	adds	r7, #64	; 0x40
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08c      	sub	sp, #48	; 0x30
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10a      	bne.n	8003b44 <xQueueReceive+0x30>
	__asm volatile
 8003b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b32:	f383 8811 	msr	BASEPRI, r3
 8003b36:	f3bf 8f6f 	isb	sy
 8003b3a:	f3bf 8f4f 	dsb	sy
 8003b3e:	623b      	str	r3, [r7, #32]
}
 8003b40:	bf00      	nop
 8003b42:	e7fe      	b.n	8003b42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d103      	bne.n	8003b52 <xQueueReceive+0x3e>
 8003b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d101      	bne.n	8003b56 <xQueueReceive+0x42>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <xQueueReceive+0x44>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <xQueueReceive+0x5e>
	__asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	61fb      	str	r3, [r7, #28]
}
 8003b6e:	bf00      	nop
 8003b70:	e7fe      	b.n	8003b70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b72:	f001 f83b 	bl	8004bec <xTaskGetSchedulerState>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d102      	bne.n	8003b82 <xQueueReceive+0x6e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <xQueueReceive+0x72>
 8003b82:	2301      	movs	r3, #1
 8003b84:	e000      	b.n	8003b88 <xQueueReceive+0x74>
 8003b86:	2300      	movs	r3, #0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d10a      	bne.n	8003ba2 <xQueueReceive+0x8e>
	__asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	61bb      	str	r3, [r7, #24]
}
 8003b9e:	bf00      	nop
 8003ba0:	e7fe      	b.n	8003ba0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ba2:	f001 fd7f 	bl	80056a4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d01f      	beq.n	8003bf2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003bb2:	68b9      	ldr	r1, [r7, #8]
 8003bb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003bb6:	f000 f8f7 	bl	8003da8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbc:	1e5a      	subs	r2, r3, #1
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00f      	beq.n	8003bea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	3310      	adds	r3, #16
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 fe4e 	bl	8004870 <xTaskRemoveFromEventList>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003bda:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <xQueueReceive+0x1bc>)
 8003bdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003bea:	f001 fd8b 	bl	8005704 <vPortExitCritical>
				return pdPASS;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e069      	b.n	8003cc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bf8:	f001 fd84 	bl	8005704 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e062      	b.n	8003cc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d106      	bne.n	8003c14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c06:	f107 0310 	add.w	r3, r7, #16
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 fe94 	bl	8004938 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c10:	2301      	movs	r3, #1
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c14:	f001 fd76 	bl	8005704 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c18:	f000 fc06 	bl	8004428 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c1c:	f001 fd42 	bl	80056a4 <vPortEnterCritical>
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2c:	d103      	bne.n	8003c36 <xQueueReceive+0x122>
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d103      	bne.n	8003c4c <xQueueReceive+0x138>
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c4c:	f001 fd5a 	bl	8005704 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c50:	1d3a      	adds	r2, r7, #4
 8003c52:	f107 0310 	add.w	r3, r7, #16
 8003c56:	4611      	mov	r1, r2
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f000 fe83 	bl	8004964 <xTaskCheckForTimeOut>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d123      	bne.n	8003cac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c66:	f000 f917 	bl	8003e98 <prvIsQueueEmpty>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d017      	beq.n	8003ca0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c72:	3324      	adds	r3, #36	; 0x24
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4611      	mov	r1, r2
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fda9 	bl	80047d0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c80:	f000 f8b8 	bl	8003df4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003c84:	f000 fbde 	bl	8004444 <xTaskResumeAll>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d189      	bne.n	8003ba2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <xQueueReceive+0x1bc>)
 8003c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	e780      	b.n	8003ba2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ca2:	f000 f8a7 	bl	8003df4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ca6:	f000 fbcd 	bl	8004444 <xTaskResumeAll>
 8003caa:	e77a      	b.n	8003ba2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003cac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cae:	f000 f8a1 	bl	8003df4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cb2:	f000 fbc7 	bl	8004444 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cb8:	f000 f8ee 	bl	8003e98 <prvIsQueueEmpty>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f43f af6f 	beq.w	8003ba2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003cc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3730      	adds	r7, #48	; 0x30
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	e000ed04 	.word	0xe000ed04

08003cd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10d      	bne.n	8003d0e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d14d      	bne.n	8003d96 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 ff92 	bl	8004c28 <xTaskPriorityDisinherit>
 8003d04:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	609a      	str	r2, [r3, #8]
 8003d0c:	e043      	b.n	8003d96 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d119      	bne.n	8003d48 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6858      	ldr	r0, [r3, #4]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	68b9      	ldr	r1, [r7, #8]
 8003d20:	f001 fff6 	bl	8005d10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	685a      	ldr	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d32b      	bcc.n	8003d96 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	605a      	str	r2, [r3, #4]
 8003d46:	e026      	b.n	8003d96 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	68d8      	ldr	r0, [r3, #12]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d50:	461a      	mov	r2, r3
 8003d52:	68b9      	ldr	r1, [r7, #8]
 8003d54:	f001 ffdc 	bl	8005d10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68da      	ldr	r2, [r3, #12]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	425b      	negs	r3, r3
 8003d62:	441a      	add	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d207      	bcs.n	8003d84 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7c:	425b      	negs	r3, r3
 8003d7e:	441a      	add	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b02      	cmp	r3, #2
 8003d88:	d105      	bne.n	8003d96 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	3b01      	subs	r3, #1
 8003d94:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003d9e:	697b      	ldr	r3, [r7, #20]
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d018      	beq.n	8003dec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	441a      	add	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d303      	bcc.n	8003ddc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68d9      	ldr	r1, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de4:	461a      	mov	r2, r3
 8003de6:	6838      	ldr	r0, [r7, #0]
 8003de8:	f001 ff92 	bl	8005d10 <memcpy>
	}
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003dfc:	f001 fc52 	bl	80056a4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e06:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e08:	e011      	b.n	8003e2e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d012      	beq.n	8003e38 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	3324      	adds	r3, #36	; 0x24
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 fd2a 	bl	8004870 <xTaskRemoveFromEventList>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d001      	beq.n	8003e26 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003e22:	f000 fe01 	bl	8004a28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dce9      	bgt.n	8003e0a <prvUnlockQueue+0x16>
 8003e36:	e000      	b.n	8003e3a <prvUnlockQueue+0x46>
					break;
 8003e38:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	22ff      	movs	r2, #255	; 0xff
 8003e3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003e42:	f001 fc5f 	bl	8005704 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003e46:	f001 fc2d 	bl	80056a4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e50:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e52:	e011      	b.n	8003e78 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d012      	beq.n	8003e82 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	3310      	adds	r3, #16
 8003e60:	4618      	mov	r0, r3
 8003e62:	f000 fd05 	bl	8004870 <xTaskRemoveFromEventList>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003e6c:	f000 fddc 	bl	8004a28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003e70:	7bbb      	ldrb	r3, [r7, #14]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	dce9      	bgt.n	8003e54 <prvUnlockQueue+0x60>
 8003e80:	e000      	b.n	8003e84 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003e82:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	22ff      	movs	r2, #255	; 0xff
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003e8c:	f001 fc3a 	bl	8005704 <vPortExitCritical>
}
 8003e90:	bf00      	nop
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ea0:	f001 fc00 	bl	80056a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	60fb      	str	r3, [r7, #12]
 8003eb0:	e001      	b.n	8003eb6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003eb6:	f001 fc25 	bl	8005704 <vPortExitCritical>

	return xReturn;
 8003eba:	68fb      	ldr	r3, [r7, #12]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3710      	adds	r7, #16
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003ecc:	f001 fbea 	bl	80056a4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d102      	bne.n	8003ee2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003edc:	2301      	movs	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	e001      	b.n	8003ee6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003ee6:	f001 fc0d 	bl	8005704 <vPortExitCritical>

	return xReturn;
 8003eea:	68fb      	ldr	r3, [r7, #12]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003efe:	2300      	movs	r3, #0
 8003f00:	60fb      	str	r3, [r7, #12]
 8003f02:	e014      	b.n	8003f2e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003f04:	4a0f      	ldr	r2, [pc, #60]	; (8003f44 <vQueueAddToRegistry+0x50>)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10b      	bne.n	8003f28 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003f10:	490c      	ldr	r1, [pc, #48]	; (8003f44 <vQueueAddToRegistry+0x50>)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003f1a:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <vQueueAddToRegistry+0x50>)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4413      	add	r3, r2
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003f26:	e006      	b.n	8003f36 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b07      	cmp	r3, #7
 8003f32:	d9e7      	bls.n	8003f04 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	2000083c 	.word	0x2000083c

08003f48 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003f58:	f001 fba4 	bl	80056a4 <vPortEnterCritical>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f62:	b25b      	sxtb	r3, r3
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d103      	bne.n	8003f72 <vQueueWaitForMessageRestricted+0x2a>
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f78:	b25b      	sxtb	r3, r3
 8003f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7e:	d103      	bne.n	8003f88 <vQueueWaitForMessageRestricted+0x40>
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f88:	f001 fbbc 	bl	8005704 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d106      	bne.n	8003fa2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	3324      	adds	r3, #36	; 0x24
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	68b9      	ldr	r1, [r7, #8]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fc3b 	bl	8004818 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003fa2:	6978      	ldr	r0, [r7, #20]
 8003fa4:	f7ff ff26 	bl	8003df4 <prvUnlockQueue>
	}
 8003fa8:	bf00      	nop
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08e      	sub	sp, #56	; 0x38
 8003fb4:	af04      	add	r7, sp, #16
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10a      	bne.n	8003fda <xTaskCreateStatic+0x2a>
	__asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	623b      	str	r3, [r7, #32]
}
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10a      	bne.n	8003ff6 <xTaskCreateStatic+0x46>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	61fb      	str	r3, [r7, #28]
}
 8003ff2:	bf00      	nop
 8003ff4:	e7fe      	b.n	8003ff4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ff6:	235c      	movs	r3, #92	; 0x5c
 8003ff8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	2b5c      	cmp	r3, #92	; 0x5c
 8003ffe:	d00a      	beq.n	8004016 <xTaskCreateStatic+0x66>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	61bb      	str	r3, [r7, #24]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004016:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01e      	beq.n	800405c <xTaskCreateStatic+0xac>
 800401e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800402a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800402c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	2202      	movs	r2, #2
 8004032:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004036:	2300      	movs	r3, #0
 8004038:	9303      	str	r3, [sp, #12]
 800403a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	f107 0314 	add.w	r3, r7, #20
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f850 	bl	80040f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004056:	f000 f8dd 	bl	8004214 <prvAddNewTaskToReadyList>
 800405a:	e001      	b.n	8004060 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004060:	697b      	ldr	r3, [r7, #20]
	}
 8004062:	4618      	mov	r0, r3
 8004064:	3728      	adds	r7, #40	; 0x28
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800406a:	b580      	push	{r7, lr}
 800406c:	b08c      	sub	sp, #48	; 0x30
 800406e:	af04      	add	r7, sp, #16
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800407a:	88fb      	ldrh	r3, [r7, #6]
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4618      	mov	r0, r3
 8004080:	f001 fc32 	bl	80058e8 <pvPortMalloc>
 8004084:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00e      	beq.n	80040aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800408c:	205c      	movs	r0, #92	; 0x5c
 800408e:	f001 fc2b 	bl	80058e8 <pvPortMalloc>
 8004092:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	697a      	ldr	r2, [r7, #20]
 800409e:	631a      	str	r2, [r3, #48]	; 0x30
 80040a0:	e005      	b.n	80040ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040a2:	6978      	ldr	r0, [r7, #20]
 80040a4:	f001 fcec 	bl	8005a80 <vPortFree>
 80040a8:	e001      	b.n	80040ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d017      	beq.n	80040e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	2300      	movs	r3, #0
 80040c0:	9303      	str	r3, [sp, #12]
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	9302      	str	r3, [sp, #8]
 80040c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c8:	9301      	str	r3, [sp, #4]
 80040ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68b9      	ldr	r1, [r7, #8]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 f80e 	bl	80040f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040d8:	69f8      	ldr	r0, [r7, #28]
 80040da:	f000 f89b 	bl	8004214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040de:	2301      	movs	r3, #1
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	e002      	b.n	80040ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040e4:	f04f 33ff 	mov.w	r3, #4294967295
 80040e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040ea:	69bb      	ldr	r3, [r7, #24]
	}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3720      	adds	r7, #32
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	461a      	mov	r2, r3
 800410c:	21a5      	movs	r1, #165	; 0xa5
 800410e:	f001 fe0d 	bl	8005d2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800411c:	3b01      	subs	r3, #1
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	f023 0307 	bic.w	r3, r3, #7
 800412a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00a      	beq.n	800414c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	617b      	str	r3, [r7, #20]
}
 8004148:	bf00      	nop
 800414a:	e7fe      	b.n	800414a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d01f      	beq.n	8004192 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	e012      	b.n	800417e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	7819      	ldrb	r1, [r3, #0]
 8004160:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	3334      	adds	r3, #52	; 0x34
 8004168:	460a      	mov	r2, r1
 800416a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d006      	beq.n	8004186 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	3301      	adds	r3, #1
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2b0f      	cmp	r3, #15
 8004182:	d9e9      	bls.n	8004158 <prvInitialiseNewTask+0x64>
 8004184:	e000      	b.n	8004188 <prvInitialiseNewTask+0x94>
			{
				break;
 8004186:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004190:	e003      	b.n	800419a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800419a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419c:	2b37      	cmp	r3, #55	; 0x37
 800419e:	d901      	bls.n	80041a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80041a0:	2337      	movs	r3, #55	; 0x37
 80041a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80041a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80041aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80041b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b2:	2200      	movs	r2, #0
 80041b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b8:	3304      	adds	r3, #4
 80041ba:	4618      	mov	r0, r3
 80041bc:	f7ff f978 	bl	80034b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c2:	3318      	adds	r3, #24
 80041c4:	4618      	mov	r0, r3
 80041c6:	f7ff f973 	bl	80034b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	2200      	movs	r2, #0
 80041e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	68f9      	ldr	r1, [r7, #12]
 80041f2:	69b8      	ldr	r0, [r7, #24]
 80041f4:	f001 f928 	bl	8005448 <pxPortInitialiseStack>
 80041f8:	4602      	mov	r2, r0
 80041fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004208:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800420a:	bf00      	nop
 800420c:	3720      	adds	r7, #32
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
	...

08004214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800421c:	f001 fa42 	bl	80056a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004220:	4b2d      	ldr	r3, [pc, #180]	; (80042d8 <prvAddNewTaskToReadyList+0xc4>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	3301      	adds	r3, #1
 8004226:	4a2c      	ldr	r2, [pc, #176]	; (80042d8 <prvAddNewTaskToReadyList+0xc4>)
 8004228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800422a:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d109      	bne.n	8004246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004232:	4a2a      	ldr	r2, [pc, #168]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <prvAddNewTaskToReadyList+0xc4>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2b01      	cmp	r3, #1
 800423e:	d110      	bne.n	8004262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004240:	f000 fc16 	bl	8004a70 <prvInitialiseTaskLists>
 8004244:	e00d      	b.n	8004262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004246:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <prvAddNewTaskToReadyList+0xcc>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d109      	bne.n	8004262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800424e:	4b23      	ldr	r3, [pc, #140]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	429a      	cmp	r2, r3
 800425a:	d802      	bhi.n	8004262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800425c:	4a1f      	ldr	r2, [pc, #124]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004262:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <prvAddNewTaskToReadyList+0xd0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3301      	adds	r3, #1
 8004268:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <prvAddNewTaskToReadyList+0xd0>)
 800426a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800426c:	4b1d      	ldr	r3, [pc, #116]	; (80042e4 <prvAddNewTaskToReadyList+0xd0>)
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <prvAddNewTaskToReadyList+0xd4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	429a      	cmp	r2, r3
 800427e:	d903      	bls.n	8004288 <prvAddNewTaskToReadyList+0x74>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004284:	4a18      	ldr	r2, [pc, #96]	; (80042e8 <prvAddNewTaskToReadyList+0xd4>)
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4a15      	ldr	r2, [pc, #84]	; (80042ec <prvAddNewTaskToReadyList+0xd8>)
 8004296:	441a      	add	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3304      	adds	r3, #4
 800429c:	4619      	mov	r1, r3
 800429e:	4610      	mov	r0, r2
 80042a0:	f7ff f913 	bl	80034ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80042a4:	f001 fa2e 	bl	8005704 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80042a8:	4b0d      	ldr	r3, [pc, #52]	; (80042e0 <prvAddNewTaskToReadyList+0xcc>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80042b0:	4b0a      	ldr	r3, [pc, #40]	; (80042dc <prvAddNewTaskToReadyList+0xc8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d207      	bcs.n	80042ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <prvAddNewTaskToReadyList+0xdc>)
 80042c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	20000d50 	.word	0x20000d50
 80042dc:	2000087c 	.word	0x2000087c
 80042e0:	20000d5c 	.word	0x20000d5c
 80042e4:	20000d6c 	.word	0x20000d6c
 80042e8:	20000d58 	.word	0x20000d58
 80042ec:	20000880 	.word	0x20000880
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004306:	4b13      	ldr	r3, [pc, #76]	; (8004354 <vTaskDelay+0x60>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00a      	beq.n	8004324 <vTaskDelay+0x30>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	60bb      	str	r3, [r7, #8]
}
 8004320:	bf00      	nop
 8004322:	e7fe      	b.n	8004322 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004324:	f000 f880 	bl	8004428 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004328:	2100      	movs	r1, #0
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fcea 	bl	8004d04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004330:	f000 f888 	bl	8004444 <xTaskResumeAll>
 8004334:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d107      	bne.n	800434c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800433c:	4b06      	ldr	r3, [pc, #24]	; (8004358 <vTaskDelay+0x64>)
 800433e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004342:	601a      	str	r2, [r3, #0]
 8004344:	f3bf 8f4f 	dsb	sy
 8004348:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800434c:	bf00      	nop
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	20000d78 	.word	0x20000d78
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004362:	2300      	movs	r3, #0
 8004364:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800436a:	463a      	mov	r2, r7
 800436c:	1d39      	adds	r1, r7, #4
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	4618      	mov	r0, r3
 8004374:	f7ff f848 	bl	8003408 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004378:	6839      	ldr	r1, [r7, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	9202      	str	r2, [sp, #8]
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2300      	movs	r3, #0
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2300      	movs	r3, #0
 8004388:	460a      	mov	r2, r1
 800438a:	4921      	ldr	r1, [pc, #132]	; (8004410 <vTaskStartScheduler+0xb4>)
 800438c:	4821      	ldr	r0, [pc, #132]	; (8004414 <vTaskStartScheduler+0xb8>)
 800438e:	f7ff fe0f 	bl	8003fb0 <xTaskCreateStatic>
 8004392:	4603      	mov	r3, r0
 8004394:	4a20      	ldr	r2, [pc, #128]	; (8004418 <vTaskStartScheduler+0xbc>)
 8004396:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004398:	4b1f      	ldr	r3, [pc, #124]	; (8004418 <vTaskStartScheduler+0xbc>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80043a0:	2301      	movs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e001      	b.n	80043aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80043a6:	2300      	movs	r3, #0
 80043a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d102      	bne.n	80043b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80043b0:	f000 fcfc 	bl	8004dac <xTimerCreateTimerTask>
 80043b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d116      	bne.n	80043ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	613b      	str	r3, [r7, #16]
}
 80043ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80043d0:	4b12      	ldr	r3, [pc, #72]	; (800441c <vTaskStartScheduler+0xc0>)
 80043d2:	f04f 32ff 	mov.w	r2, #4294967295
 80043d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <vTaskStartScheduler+0xc4>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80043de:	4b11      	ldr	r3, [pc, #68]	; (8004424 <vTaskStartScheduler+0xc8>)
 80043e0:	2200      	movs	r2, #0
 80043e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80043e4:	f001 f8bc 	bl	8005560 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80043e8:	e00e      	b.n	8004408 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f0:	d10a      	bne.n	8004408 <vTaskStartScheduler+0xac>
	__asm volatile
 80043f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f6:	f383 8811 	msr	BASEPRI, r3
 80043fa:	f3bf 8f6f 	isb	sy
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	60fb      	str	r3, [r7, #12]
}
 8004404:	bf00      	nop
 8004406:	e7fe      	b.n	8004406 <vTaskStartScheduler+0xaa>
}
 8004408:	bf00      	nop
 800440a:	3718      	adds	r7, #24
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	08006ca0 	.word	0x08006ca0
 8004414:	08004a41 	.word	0x08004a41
 8004418:	20000d74 	.word	0x20000d74
 800441c:	20000d70 	.word	0x20000d70
 8004420:	20000d5c 	.word	0x20000d5c
 8004424:	20000d54 	.word	0x20000d54

08004428 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800442c:	4b04      	ldr	r3, [pc, #16]	; (8004440 <vTaskSuspendAll+0x18>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3301      	adds	r3, #1
 8004432:	4a03      	ldr	r2, [pc, #12]	; (8004440 <vTaskSuspendAll+0x18>)
 8004434:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004436:	bf00      	nop
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	20000d78 	.word	0x20000d78

08004444 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800444e:	2300      	movs	r3, #0
 8004450:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004452:	4b42      	ldr	r3, [pc, #264]	; (800455c <xTaskResumeAll+0x118>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <xTaskResumeAll+0x2c>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	603b      	str	r3, [r7, #0]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004470:	f001 f918 	bl	80056a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004474:	4b39      	ldr	r3, [pc, #228]	; (800455c <xTaskResumeAll+0x118>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3b01      	subs	r3, #1
 800447a:	4a38      	ldr	r2, [pc, #224]	; (800455c <xTaskResumeAll+0x118>)
 800447c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800447e:	4b37      	ldr	r3, [pc, #220]	; (800455c <xTaskResumeAll+0x118>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d162      	bne.n	800454c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004486:	4b36      	ldr	r3, [pc, #216]	; (8004560 <xTaskResumeAll+0x11c>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d05e      	beq.n	800454c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800448e:	e02f      	b.n	80044f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004490:	4b34      	ldr	r3, [pc, #208]	; (8004564 <xTaskResumeAll+0x120>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	3318      	adds	r3, #24
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff f871 	bl	8003584 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3304      	adds	r3, #4
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff f86c 	bl	8003584 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044b0:	4b2d      	ldr	r3, [pc, #180]	; (8004568 <xTaskResumeAll+0x124>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d903      	bls.n	80044c0 <xTaskResumeAll+0x7c>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044bc:	4a2a      	ldr	r2, [pc, #168]	; (8004568 <xTaskResumeAll+0x124>)
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044c4:	4613      	mov	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4413      	add	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4a27      	ldr	r2, [pc, #156]	; (800456c <xTaskResumeAll+0x128>)
 80044ce:	441a      	add	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3304      	adds	r3, #4
 80044d4:	4619      	mov	r1, r3
 80044d6:	4610      	mov	r0, r2
 80044d8:	f7fe fff7 	bl	80034ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4b23      	ldr	r3, [pc, #140]	; (8004570 <xTaskResumeAll+0x12c>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d302      	bcc.n	80044f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80044ea:	4b22      	ldr	r3, [pc, #136]	; (8004574 <xTaskResumeAll+0x130>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044f0:	4b1c      	ldr	r3, [pc, #112]	; (8004564 <xTaskResumeAll+0x120>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1cb      	bne.n	8004490 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044fe:	f000 fb55 	bl	8004bac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <xTaskResumeAll+0x134>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d010      	beq.n	8004530 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800450e:	f000 f847 	bl	80045a0 <xTaskIncrementTick>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004518:	4b16      	ldr	r3, [pc, #88]	; (8004574 <xTaskResumeAll+0x130>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	3b01      	subs	r3, #1
 8004522:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f1      	bne.n	800450e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800452a:	4b13      	ldr	r3, [pc, #76]	; (8004578 <xTaskResumeAll+0x134>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004530:	4b10      	ldr	r3, [pc, #64]	; (8004574 <xTaskResumeAll+0x130>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004538:	2301      	movs	r3, #1
 800453a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <xTaskResumeAll+0x138>)
 800453e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	f3bf 8f4f 	dsb	sy
 8004548:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800454c:	f001 f8da 	bl	8005704 <vPortExitCritical>

	return xAlreadyYielded;
 8004550:	68bb      	ldr	r3, [r7, #8]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	20000d78 	.word	0x20000d78
 8004560:	20000d50 	.word	0x20000d50
 8004564:	20000d10 	.word	0x20000d10
 8004568:	20000d58 	.word	0x20000d58
 800456c:	20000880 	.word	0x20000880
 8004570:	2000087c 	.word	0x2000087c
 8004574:	20000d64 	.word	0x20000d64
 8004578:	20000d60 	.word	0x20000d60
 800457c:	e000ed04 	.word	0xe000ed04

08004580 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004586:	4b05      	ldr	r3, [pc, #20]	; (800459c <xTaskGetTickCount+0x1c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800458c:	687b      	ldr	r3, [r7, #4]
}
 800458e:	4618      	mov	r0, r3
 8004590:	370c      	adds	r7, #12
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	20000d54 	.word	0x20000d54

080045a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045aa:	4b4f      	ldr	r3, [pc, #316]	; (80046e8 <xTaskIncrementTick+0x148>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 808f 	bne.w	80046d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80045b4:	4b4d      	ldr	r3, [pc, #308]	; (80046ec <xTaskIncrementTick+0x14c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	3301      	adds	r3, #1
 80045ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80045bc:	4a4b      	ldr	r2, [pc, #300]	; (80046ec <xTaskIncrementTick+0x14c>)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d120      	bne.n	800460a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80045c8:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <xTaskIncrementTick+0x150>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80045d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045d6:	f383 8811 	msr	BASEPRI, r3
 80045da:	f3bf 8f6f 	isb	sy
 80045de:	f3bf 8f4f 	dsb	sy
 80045e2:	603b      	str	r3, [r7, #0]
}
 80045e4:	bf00      	nop
 80045e6:	e7fe      	b.n	80045e6 <xTaskIncrementTick+0x46>
 80045e8:	4b41      	ldr	r3, [pc, #260]	; (80046f0 <xTaskIncrementTick+0x150>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	4b41      	ldr	r3, [pc, #260]	; (80046f4 <xTaskIncrementTick+0x154>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3f      	ldr	r2, [pc, #252]	; (80046f0 <xTaskIncrementTick+0x150>)
 80045f4:	6013      	str	r3, [r2, #0]
 80045f6:	4a3f      	ldr	r2, [pc, #252]	; (80046f4 <xTaskIncrementTick+0x154>)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	4b3e      	ldr	r3, [pc, #248]	; (80046f8 <xTaskIncrementTick+0x158>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3301      	adds	r3, #1
 8004602:	4a3d      	ldr	r2, [pc, #244]	; (80046f8 <xTaskIncrementTick+0x158>)
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	f000 fad1 	bl	8004bac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800460a:	4b3c      	ldr	r3, [pc, #240]	; (80046fc <xTaskIncrementTick+0x15c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	429a      	cmp	r2, r3
 8004612:	d349      	bcc.n	80046a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004614:	4b36      	ldr	r3, [pc, #216]	; (80046f0 <xTaskIncrementTick+0x150>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800461e:	4b37      	ldr	r3, [pc, #220]	; (80046fc <xTaskIncrementTick+0x15c>)
 8004620:	f04f 32ff 	mov.w	r2, #4294967295
 8004624:	601a      	str	r2, [r3, #0]
					break;
 8004626:	e03f      	b.n	80046a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004628:	4b31      	ldr	r3, [pc, #196]	; (80046f0 <xTaskIncrementTick+0x150>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004638:	693a      	ldr	r2, [r7, #16]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	429a      	cmp	r2, r3
 800463e:	d203      	bcs.n	8004648 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004640:	4a2e      	ldr	r2, [pc, #184]	; (80046fc <xTaskIncrementTick+0x15c>)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004646:	e02f      	b.n	80046a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3304      	adds	r3, #4
 800464c:	4618      	mov	r0, r3
 800464e:	f7fe ff99 	bl	8003584 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004656:	2b00      	cmp	r3, #0
 8004658:	d004      	beq.n	8004664 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3318      	adds	r3, #24
 800465e:	4618      	mov	r0, r3
 8004660:	f7fe ff90 	bl	8003584 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004668:	4b25      	ldr	r3, [pc, #148]	; (8004700 <xTaskIncrementTick+0x160>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d903      	bls.n	8004678 <xTaskIncrementTick+0xd8>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4a22      	ldr	r2, [pc, #136]	; (8004700 <xTaskIncrementTick+0x160>)
 8004676:	6013      	str	r3, [r2, #0]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4a1f      	ldr	r2, [pc, #124]	; (8004704 <xTaskIncrementTick+0x164>)
 8004686:	441a      	add	r2, r3
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f7fe ff1b 	bl	80034ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	4b1b      	ldr	r3, [pc, #108]	; (8004708 <xTaskIncrementTick+0x168>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	429a      	cmp	r2, r3
 80046a0:	d3b8      	bcc.n	8004614 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80046a2:	2301      	movs	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046a6:	e7b5      	b.n	8004614 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80046a8:	4b17      	ldr	r3, [pc, #92]	; (8004708 <xTaskIncrementTick+0x168>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ae:	4915      	ldr	r1, [pc, #84]	; (8004704 <xTaskIncrementTick+0x164>)
 80046b0:	4613      	mov	r3, r2
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d901      	bls.n	80046c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80046c0:	2301      	movs	r3, #1
 80046c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <xTaskIncrementTick+0x16c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80046cc:	2301      	movs	r3, #1
 80046ce:	617b      	str	r3, [r7, #20]
 80046d0:	e004      	b.n	80046dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80046d2:	4b0f      	ldr	r3, [pc, #60]	; (8004710 <xTaskIncrementTick+0x170>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	4a0d      	ldr	r2, [pc, #52]	; (8004710 <xTaskIncrementTick+0x170>)
 80046da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80046dc:	697b      	ldr	r3, [r7, #20]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20000d78 	.word	0x20000d78
 80046ec:	20000d54 	.word	0x20000d54
 80046f0:	20000d08 	.word	0x20000d08
 80046f4:	20000d0c 	.word	0x20000d0c
 80046f8:	20000d68 	.word	0x20000d68
 80046fc:	20000d70 	.word	0x20000d70
 8004700:	20000d58 	.word	0x20000d58
 8004704:	20000880 	.word	0x20000880
 8004708:	2000087c 	.word	0x2000087c
 800470c:	20000d64 	.word	0x20000d64
 8004710:	20000d60 	.word	0x20000d60

08004714 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800471a:	4b28      	ldr	r3, [pc, #160]	; (80047bc <vTaskSwitchContext+0xa8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004722:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <vTaskSwitchContext+0xac>)
 8004724:	2201      	movs	r2, #1
 8004726:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004728:	e041      	b.n	80047ae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800472a:	4b25      	ldr	r3, [pc, #148]	; (80047c0 <vTaskSwitchContext+0xac>)
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004730:	4b24      	ldr	r3, [pc, #144]	; (80047c4 <vTaskSwitchContext+0xb0>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e010      	b.n	800475a <vTaskSwitchContext+0x46>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <vTaskSwitchContext+0x40>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	607b      	str	r3, [r7, #4]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <vTaskSwitchContext+0x3e>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b01      	subs	r3, #1
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	491b      	ldr	r1, [pc, #108]	; (80047c8 <vTaskSwitchContext+0xb4>)
 800475c:	68fa      	ldr	r2, [r7, #12]
 800475e:	4613      	mov	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	4413      	add	r3, r2
 8004764:	009b      	lsls	r3, r3, #2
 8004766:	440b      	add	r3, r1
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0e4      	beq.n	8004738 <vTaskSwitchContext+0x24>
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <vTaskSwitchContext+0xb4>)
 800477a:	4413      	add	r3, r2
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	605a      	str	r2, [r3, #4]
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	685a      	ldr	r2, [r3, #4]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	3308      	adds	r3, #8
 8004790:	429a      	cmp	r2, r3
 8004792:	d104      	bne.n	800479e <vTaskSwitchContext+0x8a>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	685a      	ldr	r2, [r3, #4]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	605a      	str	r2, [r3, #4]
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	4a09      	ldr	r2, [pc, #36]	; (80047cc <vTaskSwitchContext+0xb8>)
 80047a6:	6013      	str	r3, [r2, #0]
 80047a8:	4a06      	ldr	r2, [pc, #24]	; (80047c4 <vTaskSwitchContext+0xb0>)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6013      	str	r3, [r2, #0]
}
 80047ae:	bf00      	nop
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000d78 	.word	0x20000d78
 80047c0:	20000d64 	.word	0x20000d64
 80047c4:	20000d58 	.word	0x20000d58
 80047c8:	20000880 	.word	0x20000880
 80047cc:	2000087c 	.word	0x2000087c

080047d0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
 80047d8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10a      	bne.n	80047f6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	60fb      	str	r3, [r7, #12]
}
 80047f2:	bf00      	nop
 80047f4:	e7fe      	b.n	80047f4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80047f6:	4b07      	ldr	r3, [pc, #28]	; (8004814 <vTaskPlaceOnEventList+0x44>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	3318      	adds	r3, #24
 80047fc:	4619      	mov	r1, r3
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f7fe fe87 	bl	8003512 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004804:	2101      	movs	r1, #1
 8004806:	6838      	ldr	r0, [r7, #0]
 8004808:	f000 fa7c 	bl	8004d04 <prvAddCurrentTaskToDelayedList>
}
 800480c:	bf00      	nop
 800480e:	3710      	adds	r7, #16
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	2000087c 	.word	0x2000087c

08004818 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10a      	bne.n	8004840 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	617b      	str	r3, [r7, #20]
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004840:	4b0a      	ldr	r3, [pc, #40]	; (800486c <vTaskPlaceOnEventListRestricted+0x54>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3318      	adds	r3, #24
 8004846:	4619      	mov	r1, r3
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f7fe fe3e 	bl	80034ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d002      	beq.n	800485a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004854:	f04f 33ff 	mov.w	r3, #4294967295
 8004858:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800485a:	6879      	ldr	r1, [r7, #4]
 800485c:	68b8      	ldr	r0, [r7, #8]
 800485e:	f000 fa51 	bl	8004d04 <prvAddCurrentTaskToDelayedList>
	}
 8004862:	bf00      	nop
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	2000087c 	.word	0x2000087c

08004870 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488a:	f383 8811 	msr	BASEPRI, r3
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	60fb      	str	r3, [r7, #12]
}
 8004898:	bf00      	nop
 800489a:	e7fe      	b.n	800489a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	3318      	adds	r3, #24
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fe fe6f 	bl	8003584 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <xTaskRemoveFromEventList+0xb0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11d      	bne.n	80048ea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	3304      	adds	r3, #4
 80048b2:	4618      	mov	r0, r3
 80048b4:	f7fe fe66 	bl	8003584 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	4b19      	ldr	r3, [pc, #100]	; (8004924 <xTaskRemoveFromEventList+0xb4>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d903      	bls.n	80048cc <xTaskRemoveFromEventList+0x5c>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4a16      	ldr	r2, [pc, #88]	; (8004924 <xTaskRemoveFromEventList+0xb4>)
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4a13      	ldr	r2, [pc, #76]	; (8004928 <xTaskRemoveFromEventList+0xb8>)
 80048da:	441a      	add	r2, r3
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	3304      	adds	r3, #4
 80048e0:	4619      	mov	r1, r3
 80048e2:	4610      	mov	r0, r2
 80048e4:	f7fe fdf1 	bl	80034ca <vListInsertEnd>
 80048e8:	e005      	b.n	80048f6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3318      	adds	r3, #24
 80048ee:	4619      	mov	r1, r3
 80048f0:	480e      	ldr	r0, [pc, #56]	; (800492c <xTaskRemoveFromEventList+0xbc>)
 80048f2:	f7fe fdea 	bl	80034ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048fa:	4b0d      	ldr	r3, [pc, #52]	; (8004930 <xTaskRemoveFromEventList+0xc0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004900:	429a      	cmp	r2, r3
 8004902:	d905      	bls.n	8004910 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <xTaskRemoveFromEventList+0xc4>)
 800490a:	2201      	movs	r2, #1
 800490c:	601a      	str	r2, [r3, #0]
 800490e:	e001      	b.n	8004914 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004910:	2300      	movs	r3, #0
 8004912:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004914:	697b      	ldr	r3, [r7, #20]
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	20000d78 	.word	0x20000d78
 8004924:	20000d58 	.word	0x20000d58
 8004928:	20000880 	.word	0x20000880
 800492c:	20000d10 	.word	0x20000d10
 8004930:	2000087c 	.word	0x2000087c
 8004934:	20000d64 	.word	0x20000d64

08004938 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <vTaskInternalSetTimeOutState+0x24>)
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004948:	4b05      	ldr	r3, [pc, #20]	; (8004960 <vTaskInternalSetTimeOutState+0x28>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	605a      	str	r2, [r3, #4]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr
 800495c:	20000d68 	.word	0x20000d68
 8004960:	20000d54 	.word	0x20000d54

08004964 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
 800496c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d10a      	bne.n	800498a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004978:	f383 8811 	msr	BASEPRI, r3
 800497c:	f3bf 8f6f 	isb	sy
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	613b      	str	r3, [r7, #16]
}
 8004986:	bf00      	nop
 8004988:	e7fe      	b.n	8004988 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d10a      	bne.n	80049a6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004994:	f383 8811 	msr	BASEPRI, r3
 8004998:	f3bf 8f6f 	isb	sy
 800499c:	f3bf 8f4f 	dsb	sy
 80049a0:	60fb      	str	r3, [r7, #12]
}
 80049a2:	bf00      	nop
 80049a4:	e7fe      	b.n	80049a4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80049a6:	f000 fe7d 	bl	80056a4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80049aa:	4b1d      	ldr	r3, [pc, #116]	; (8004a20 <xTaskCheckForTimeOut+0xbc>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049c2:	d102      	bne.n	80049ca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e023      	b.n	8004a12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	4b15      	ldr	r3, [pc, #84]	; (8004a24 <xTaskCheckForTimeOut+0xc0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d007      	beq.n	80049e6 <xTaskCheckForTimeOut+0x82>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	69ba      	ldr	r2, [r7, #24]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d302      	bcc.n	80049e6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	e015      	b.n	8004a12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	697a      	ldr	r2, [r7, #20]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d20b      	bcs.n	8004a08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	1ad2      	subs	r2, r2, r3
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f7ff ff9b 	bl	8004938 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	e004      	b.n	8004a12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a12:	f000 fe77 	bl	8005704 <vPortExitCritical>

	return xReturn;
 8004a16:	69fb      	ldr	r3, [r7, #28]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3720      	adds	r7, #32
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	20000d54 	.word	0x20000d54
 8004a24:	20000d68 	.word	0x20000d68

08004a28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a2c:	4b03      	ldr	r3, [pc, #12]	; (8004a3c <vTaskMissedYield+0x14>)
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
}
 8004a32:	bf00      	nop
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	20000d64 	.word	0x20000d64

08004a40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a48:	f000 f852 	bl	8004af0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a4c:	4b06      	ldr	r3, [pc, #24]	; (8004a68 <prvIdleTask+0x28>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d9f9      	bls.n	8004a48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a54:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <prvIdleTask+0x2c>)
 8004a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004a64:	e7f0      	b.n	8004a48 <prvIdleTask+0x8>
 8004a66:	bf00      	nop
 8004a68:	20000880 	.word	0x20000880
 8004a6c:	e000ed04 	.word	0xe000ed04

08004a70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]
 8004a7a:	e00c      	b.n	8004a96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4a12      	ldr	r2, [pc, #72]	; (8004ad0 <prvInitialiseTaskLists+0x60>)
 8004a88:	4413      	add	r3, r2
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fe fcf0 	bl	8003470 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3301      	adds	r3, #1
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b37      	cmp	r3, #55	; 0x37
 8004a9a:	d9ef      	bls.n	8004a7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a9c:	480d      	ldr	r0, [pc, #52]	; (8004ad4 <prvInitialiseTaskLists+0x64>)
 8004a9e:	f7fe fce7 	bl	8003470 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004aa2:	480d      	ldr	r0, [pc, #52]	; (8004ad8 <prvInitialiseTaskLists+0x68>)
 8004aa4:	f7fe fce4 	bl	8003470 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004aa8:	480c      	ldr	r0, [pc, #48]	; (8004adc <prvInitialiseTaskLists+0x6c>)
 8004aaa:	f7fe fce1 	bl	8003470 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004aae:	480c      	ldr	r0, [pc, #48]	; (8004ae0 <prvInitialiseTaskLists+0x70>)
 8004ab0:	f7fe fcde 	bl	8003470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004ab4:	480b      	ldr	r0, [pc, #44]	; (8004ae4 <prvInitialiseTaskLists+0x74>)
 8004ab6:	f7fe fcdb 	bl	8003470 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004aba:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <prvInitialiseTaskLists+0x78>)
 8004abc:	4a05      	ldr	r2, [pc, #20]	; (8004ad4 <prvInitialiseTaskLists+0x64>)
 8004abe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ac0:	4b0a      	ldr	r3, [pc, #40]	; (8004aec <prvInitialiseTaskLists+0x7c>)
 8004ac2:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <prvInitialiseTaskLists+0x68>)
 8004ac4:	601a      	str	r2, [r3, #0]
}
 8004ac6:	bf00      	nop
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	20000880 	.word	0x20000880
 8004ad4:	20000ce0 	.word	0x20000ce0
 8004ad8:	20000cf4 	.word	0x20000cf4
 8004adc:	20000d10 	.word	0x20000d10
 8004ae0:	20000d24 	.word	0x20000d24
 8004ae4:	20000d3c 	.word	0x20000d3c
 8004ae8:	20000d08 	.word	0x20000d08
 8004aec:	20000d0c 	.word	0x20000d0c

08004af0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004af6:	e019      	b.n	8004b2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004af8:	f000 fdd4 	bl	80056a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004afc:	4b10      	ldr	r3, [pc, #64]	; (8004b40 <prvCheckTasksWaitingTermination+0x50>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3304      	adds	r3, #4
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fe fd3b 	bl	8003584 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <prvCheckTasksWaitingTermination+0x54>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	4a0b      	ldr	r2, [pc, #44]	; (8004b44 <prvCheckTasksWaitingTermination+0x54>)
 8004b16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b18:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3b01      	subs	r3, #1
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b22:	f000 fdef 	bl	8005704 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 f810 	bl	8004b4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b2c:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <prvCheckTasksWaitingTermination+0x58>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d1e1      	bne.n	8004af8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3708      	adds	r7, #8
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20000d24 	.word	0x20000d24
 8004b44:	20000d50 	.word	0x20000d50
 8004b48:	20000d38 	.word	0x20000d38

08004b4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d108      	bne.n	8004b70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 ff8c 	bl	8005a80 <vPortFree>
				vPortFree( pxTCB );
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 ff89 	bl	8005a80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b6e:	e018      	b.n	8004ba2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d103      	bne.n	8004b82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 ff80 	bl	8005a80 <vPortFree>
	}
 8004b80:	e00f      	b.n	8004ba2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d00a      	beq.n	8004ba2 <prvDeleteTCB+0x56>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60fb      	str	r3, [r7, #12]
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <prvDeleteTCB+0x54>
	}
 8004ba2:	bf00      	nop
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bb2:	4b0c      	ldr	r3, [pc, #48]	; (8004be4 <prvResetNextTaskUnblockTime+0x38>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d104      	bne.n	8004bc6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <prvResetNextTaskUnblockTime+0x3c>)
 8004bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bc4:	e008      	b.n	8004bd8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc6:	4b07      	ldr	r3, [pc, #28]	; (8004be4 <prvResetNextTaskUnblockTime+0x38>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4a04      	ldr	r2, [pc, #16]	; (8004be8 <prvResetNextTaskUnblockTime+0x3c>)
 8004bd6:	6013      	str	r3, [r2, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	20000d08 	.word	0x20000d08
 8004be8:	20000d70 	.word	0x20000d70

08004bec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bec:	b480      	push	{r7}
 8004bee:	b083      	sub	sp, #12
 8004bf0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bf2:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <xTaskGetSchedulerState+0x34>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d102      	bne.n	8004c00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	607b      	str	r3, [r7, #4]
 8004bfe:	e008      	b.n	8004c12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c00:	4b08      	ldr	r3, [pc, #32]	; (8004c24 <xTaskGetSchedulerState+0x38>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d102      	bne.n	8004c0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	e001      	b.n	8004c12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c12:	687b      	ldr	r3, [r7, #4]
	}
 8004c14:	4618      	mov	r0, r3
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	20000d5c 	.word	0x20000d5c
 8004c24:	20000d78 	.word	0x20000d78

08004c28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d056      	beq.n	8004cec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004c3e:	4b2e      	ldr	r3, [pc, #184]	; (8004cf8 <xTaskPriorityDisinherit+0xd0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d00a      	beq.n	8004c5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10a      	bne.n	8004c7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60bb      	str	r3, [r7, #8]
}
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c80:	1e5a      	subs	r2, r3, #1
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d02c      	beq.n	8004cec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d128      	bne.n	8004cec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	3304      	adds	r3, #4
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fc70 	bl	8003584 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cbc:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <xTaskPriorityDisinherit+0xd4>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d903      	bls.n	8004ccc <xTaskPriorityDisinherit+0xa4>
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	4a0c      	ldr	r2, [pc, #48]	; (8004cfc <xTaskPriorityDisinherit+0xd4>)
 8004cca:	6013      	str	r3, [r2, #0]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4a09      	ldr	r2, [pc, #36]	; (8004d00 <xTaskPriorityDisinherit+0xd8>)
 8004cda:	441a      	add	r2, r3
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	3304      	adds	r3, #4
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	4610      	mov	r0, r2
 8004ce4:	f7fe fbf1 	bl	80034ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004cec:	697b      	ldr	r3, [r7, #20]
	}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	2000087c 	.word	0x2000087c
 8004cfc:	20000d58 	.word	0x20000d58
 8004d00:	20000880 	.word	0x20000880

08004d04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004d0e:	4b21      	ldr	r3, [pc, #132]	; (8004d94 <prvAddCurrentTaskToDelayedList+0x90>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d14:	4b20      	ldr	r3, [pc, #128]	; (8004d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	3304      	adds	r3, #4
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe fc32 	bl	8003584 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d26:	d10a      	bne.n	8004d3e <prvAddCurrentTaskToDelayedList+0x3a>
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d007      	beq.n	8004d3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d2e:	4b1a      	ldr	r3, [pc, #104]	; (8004d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3304      	adds	r3, #4
 8004d34:	4619      	mov	r1, r3
 8004d36:	4819      	ldr	r0, [pc, #100]	; (8004d9c <prvAddCurrentTaskToDelayedList+0x98>)
 8004d38:	f7fe fbc7 	bl	80034ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004d3c:	e026      	b.n	8004d8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004d46:	4b14      	ldr	r3, [pc, #80]	; (8004d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d209      	bcs.n	8004d6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d56:	4b12      	ldr	r3, [pc, #72]	; (8004da0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b0f      	ldr	r3, [pc, #60]	; (8004d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	3304      	adds	r3, #4
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7fe fbd5 	bl	8003512 <vListInsert>
}
 8004d68:	e010      	b.n	8004d8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004d6a:	4b0e      	ldr	r3, [pc, #56]	; (8004da4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	4b0a      	ldr	r3, [pc, #40]	; (8004d98 <prvAddCurrentTaskToDelayedList+0x94>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3304      	adds	r3, #4
 8004d74:	4619      	mov	r1, r3
 8004d76:	4610      	mov	r0, r2
 8004d78:	f7fe fbcb 	bl	8003512 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004d7c:	4b0a      	ldr	r3, [pc, #40]	; (8004da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d202      	bcs.n	8004d8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004d86:	4a08      	ldr	r2, [pc, #32]	; (8004da8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	6013      	str	r3, [r2, #0]
}
 8004d8c:	bf00      	nop
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	20000d54 	.word	0x20000d54
 8004d98:	2000087c 	.word	0x2000087c
 8004d9c:	20000d3c 	.word	0x20000d3c
 8004da0:	20000d0c 	.word	0x20000d0c
 8004da4:	20000d08 	.word	0x20000d08
 8004da8:	20000d70 	.word	0x20000d70

08004dac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004db2:	2300      	movs	r3, #0
 8004db4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004db6:	f000 fb07 	bl	80053c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004dba:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <xTimerCreateTimerTask+0x80>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d021      	beq.n	8004e06 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004dca:	1d3a      	adds	r2, r7, #4
 8004dcc:	f107 0108 	add.w	r1, r7, #8
 8004dd0:	f107 030c 	add.w	r3, r7, #12
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fe fb31 	bl	800343c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004dda:	6879      	ldr	r1, [r7, #4]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	9202      	str	r2, [sp, #8]
 8004de2:	9301      	str	r3, [sp, #4]
 8004de4:	2302      	movs	r3, #2
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	460a      	mov	r2, r1
 8004dec:	4910      	ldr	r1, [pc, #64]	; (8004e30 <xTimerCreateTimerTask+0x84>)
 8004dee:	4811      	ldr	r0, [pc, #68]	; (8004e34 <xTimerCreateTimerTask+0x88>)
 8004df0:	f7ff f8de 	bl	8003fb0 <xTaskCreateStatic>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a10      	ldr	r2, [pc, #64]	; (8004e38 <xTimerCreateTimerTask+0x8c>)
 8004df8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <xTimerCreateTimerTask+0x8c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d001      	beq.n	8004e06 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004e02:	2301      	movs	r3, #1
 8004e04:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	f3bf 8f4f 	dsb	sy
 8004e1c:	613b      	str	r3, [r7, #16]
}
 8004e1e:	bf00      	nop
 8004e20:	e7fe      	b.n	8004e20 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004e22:	697b      	ldr	r3, [r7, #20]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3718      	adds	r7, #24
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000dac 	.word	0x20000dac
 8004e30:	08006ca8 	.word	0x08006ca8
 8004e34:	08004f71 	.word	0x08004f71
 8004e38:	20000db0 	.word	0x20000db0

08004e3c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08a      	sub	sp, #40	; 0x28
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	623b      	str	r3, [r7, #32]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <xTimerGenericCommand+0x98>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d02a      	beq.n	8004ec8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	2b05      	cmp	r3, #5
 8004e82:	dc18      	bgt.n	8004eb6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e84:	f7ff feb2 	bl	8004bec <xTaskGetSchedulerState>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b02      	cmp	r3, #2
 8004e8c:	d109      	bne.n	8004ea2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e8e:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <xTimerGenericCommand+0x98>)
 8004e90:	6818      	ldr	r0, [r3, #0]
 8004e92:	f107 0110 	add.w	r1, r7, #16
 8004e96:	2300      	movs	r3, #0
 8004e98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e9a:	f7fe fca1 	bl	80037e0 <xQueueGenericSend>
 8004e9e:	6278      	str	r0, [r7, #36]	; 0x24
 8004ea0:	e012      	b.n	8004ec8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004ea2:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <xTimerGenericCommand+0x98>)
 8004ea4:	6818      	ldr	r0, [r3, #0]
 8004ea6:	f107 0110 	add.w	r1, r7, #16
 8004eaa:	2300      	movs	r3, #0
 8004eac:	2200      	movs	r2, #0
 8004eae:	f7fe fc97 	bl	80037e0 <xQueueGenericSend>
 8004eb2:	6278      	str	r0, [r7, #36]	; 0x24
 8004eb4:	e008      	b.n	8004ec8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004eb6:	4b07      	ldr	r3, [pc, #28]	; (8004ed4 <xTimerGenericCommand+0x98>)
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	f107 0110 	add.w	r1, r7, #16
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	f7fe fd8b 	bl	80039dc <xQueueGenericSendFromISR>
 8004ec6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3728      	adds	r7, #40	; 0x28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	20000dac 	.word	0x20000dac

08004ed8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b088      	sub	sp, #32
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ee2:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <prvProcessExpiredTimer+0x94>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	3304      	adds	r3, #4
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f7fe fb47 	bl	8003584 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d022      	beq.n	8004f4a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	699a      	ldr	r2, [r3, #24]
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	18d1      	adds	r1, r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	6978      	ldr	r0, [r7, #20]
 8004f12:	f000 f8d1 	bl	80050b8 <prvInsertTimerInActiveList>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d01f      	beq.n	8004f5c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	2300      	movs	r3, #0
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	2100      	movs	r1, #0
 8004f26:	6978      	ldr	r0, [r7, #20]
 8004f28:	f7ff ff88 	bl	8004e3c <xTimerGenericCommand>
 8004f2c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d113      	bne.n	8004f5c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	60fb      	str	r3, [r7, #12]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f50:	f023 0301 	bic.w	r3, r3, #1
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	6978      	ldr	r0, [r7, #20]
 8004f62:	4798      	blx	r3
}
 8004f64:	bf00      	nop
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	20000da4 	.word	0x20000da4

08004f70 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f000 f857 	bl	8005030 <prvGetNextExpireTime>
 8004f82:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4619      	mov	r1, r3
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f803 	bl	8004f94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f8e:	f000 f8d5 	bl	800513c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f92:	e7f1      	b.n	8004f78 <prvTimerTask+0x8>

08004f94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f9e:	f7ff fa43 	bl	8004428 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004fa2:	f107 0308 	add.w	r3, r7, #8
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 f866 	bl	8005078 <prvSampleTimeNow>
 8004fac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d130      	bne.n	8005016 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <prvProcessTimerOrBlockTask+0x3c>
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d806      	bhi.n	8004fd0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004fc2:	f7ff fa3f 	bl	8004444 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004fc6:	68f9      	ldr	r1, [r7, #12]
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f7ff ff85 	bl	8004ed8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004fce:	e024      	b.n	800501a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d008      	beq.n	8004fe8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004fd6:	4b13      	ldr	r3, [pc, #76]	; (8005024 <prvProcessTimerOrBlockTask+0x90>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <prvProcessTimerOrBlockTask+0x50>
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <prvProcessTimerOrBlockTask+0x52>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <prvProcessTimerOrBlockTask+0x94>)
 8004fea:	6818      	ldr	r0, [r3, #0]
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	f7fe ffa7 	bl	8003f48 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ffa:	f7ff fa23 	bl	8004444 <xTaskResumeAll>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d10a      	bne.n	800501a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005004:	4b09      	ldr	r3, [pc, #36]	; (800502c <prvProcessTimerOrBlockTask+0x98>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
}
 8005014:	e001      	b.n	800501a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005016:	f7ff fa15 	bl	8004444 <xTaskResumeAll>
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20000da8 	.word	0x20000da8
 8005028:	20000dac 	.word	0x20000dac
 800502c:	e000ed04 	.word	0xe000ed04

08005030 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005030:	b480      	push	{r7}
 8005032:	b085      	sub	sp, #20
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005038:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <prvGetNextExpireTime+0x44>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <prvGetNextExpireTime+0x16>
 8005042:	2201      	movs	r2, #1
 8005044:	e000      	b.n	8005048 <prvGetNextExpireTime+0x18>
 8005046:	2200      	movs	r2, #0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d105      	bne.n	8005060 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005054:	4b07      	ldr	r3, [pc, #28]	; (8005074 <prvGetNextExpireTime+0x44>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	60fb      	str	r3, [r7, #12]
 800505e:	e001      	b.n	8005064 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005064:	68fb      	ldr	r3, [r7, #12]
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000da4 	.word	0x20000da4

08005078 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005080:	f7ff fa7e 	bl	8004580 <xTaskGetTickCount>
 8005084:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <prvSampleTimeNow+0x3c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	429a      	cmp	r2, r3
 800508e:	d205      	bcs.n	800509c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005090:	f000 f936 	bl	8005300 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	601a      	str	r2, [r3, #0]
 800509a:	e002      	b.n	80050a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80050a2:	4a04      	ldr	r2, [pc, #16]	; (80050b4 <prvSampleTimeNow+0x3c>)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80050a8:	68fb      	ldr	r3, [r7, #12]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000db4 	.word	0x20000db4

080050b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80050c6:	2300      	movs	r3, #0
 80050c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d812      	bhi.n	8005104 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	1ad2      	subs	r2, r2, r3
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d302      	bcc.n	80050f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80050ec:	2301      	movs	r3, #1
 80050ee:	617b      	str	r3, [r7, #20]
 80050f0:	e01b      	b.n	800512a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <prvInsertTimerInActiveList+0x7c>)
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3304      	adds	r3, #4
 80050fa:	4619      	mov	r1, r3
 80050fc:	4610      	mov	r0, r2
 80050fe:	f7fe fa08 	bl	8003512 <vListInsert>
 8005102:	e012      	b.n	800512a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d206      	bcs.n	800511a <prvInsertTimerInActiveList+0x62>
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d302      	bcc.n	800511a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005114:	2301      	movs	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e007      	b.n	800512a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800511a:	4b07      	ldr	r3, [pc, #28]	; (8005138 <prvInsertTimerInActiveList+0x80>)
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3304      	adds	r3, #4
 8005122:	4619      	mov	r1, r3
 8005124:	4610      	mov	r0, r2
 8005126:	f7fe f9f4 	bl	8003512 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800512a:	697b      	ldr	r3, [r7, #20]
}
 800512c:	4618      	mov	r0, r3
 800512e:	3718      	adds	r7, #24
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}
 8005134:	20000da8 	.word	0x20000da8
 8005138:	20000da4 	.word	0x20000da4

0800513c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005142:	e0ca      	b.n	80052da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	da18      	bge.n	800517c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800514a:	1d3b      	adds	r3, r7, #4
 800514c:	3304      	adds	r3, #4
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	61fb      	str	r3, [r7, #28]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800516c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005172:	6850      	ldr	r0, [r2, #4]
 8005174:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005176:	6892      	ldr	r2, [r2, #8]
 8005178:	4611      	mov	r1, r2
 800517a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f2c0 80aa 	blt.w	80052d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	3304      	adds	r3, #4
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe f9f5 	bl	8003584 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800519a:	463b      	mov	r3, r7
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff ff6b 	bl	8005078 <prvSampleTimeNow>
 80051a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b09      	cmp	r3, #9
 80051a8:	f200 8097 	bhi.w	80052da <prvProcessReceivedCommands+0x19e>
 80051ac:	a201      	add	r2, pc, #4	; (adr r2, 80051b4 <prvProcessReceivedCommands+0x78>)
 80051ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b2:	bf00      	nop
 80051b4:	080051dd 	.word	0x080051dd
 80051b8:	080051dd 	.word	0x080051dd
 80051bc:	080051dd 	.word	0x080051dd
 80051c0:	08005251 	.word	0x08005251
 80051c4:	08005265 	.word	0x08005265
 80051c8:	080052af 	.word	0x080052af
 80051cc:	080051dd 	.word	0x080051dd
 80051d0:	080051dd 	.word	0x080051dd
 80051d4:	08005251 	.word	0x08005251
 80051d8:	08005265 	.word	0x08005265
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80051dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051e2:	f043 0301 	orr.w	r3, r3, #1
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	18d1      	adds	r1, r2, r3
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051fc:	f7ff ff5c 	bl	80050b8 <prvInsertTimerInActiveList>
 8005200:	4603      	mov	r3, r0
 8005202:	2b00      	cmp	r3, #0
 8005204:	d069      	beq.n	80052da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800520c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800520e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005210:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d05e      	beq.n	80052da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	441a      	add	r2, r3
 8005224:	2300      	movs	r3, #0
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2300      	movs	r3, #0
 800522a:	2100      	movs	r1, #0
 800522c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800522e:	f7ff fe05 	bl	8004e3c <xTimerGenericCommand>
 8005232:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d14f      	bne.n	80052da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	61bb      	str	r3, [r7, #24]
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005256:	f023 0301 	bic.w	r3, r3, #1
 800525a:	b2da      	uxtb	r2, r3
 800525c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800525e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005262:	e03a      	b.n	80052da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800526a:	f043 0301 	orr.w	r3, r3, #1
 800526e:	b2da      	uxtb	r2, r3
 8005270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005272:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800527c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	617b      	str	r3, [r7, #20]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800529a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529c:	699a      	ldr	r2, [r3, #24]
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	18d1      	adds	r1, r2, r3
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052a8:	f7ff ff06 	bl	80050b8 <prvInsertTimerInActiveList>
					break;
 80052ac:	e015      	b.n	80052da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052b4:	f003 0302 	and.w	r3, r3, #2
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d103      	bne.n	80052c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80052bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052be:	f000 fbdf 	bl	8005a80 <vPortFree>
 80052c2:	e00a      	b.n	80052da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052ca:	f023 0301 	bic.w	r3, r3, #1
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80052d6:	e000      	b.n	80052da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80052d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80052da:	4b08      	ldr	r3, [pc, #32]	; (80052fc <prvProcessReceivedCommands+0x1c0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	1d39      	adds	r1, r7, #4
 80052e0:	2200      	movs	r2, #0
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fe fc16 	bl	8003b14 <xQueueReceive>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	f47f af2a 	bne.w	8005144 <prvProcessReceivedCommands+0x8>
	}
}
 80052f0:	bf00      	nop
 80052f2:	bf00      	nop
 80052f4:	3730      	adds	r7, #48	; 0x30
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000dac 	.word	0x20000dac

08005300 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005306:	e048      	b.n	800539a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005308:	4b2d      	ldr	r3, [pc, #180]	; (80053c0 <prvSwitchTimerLists+0xc0>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005312:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <prvSwitchTimerLists+0xc0>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3304      	adds	r3, #4
 8005320:	4618      	mov	r0, r3
 8005322:	f7fe f92f 	bl	8003584 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	68f8      	ldr	r0, [r7, #12]
 800532c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005334:	f003 0304 	and.w	r3, r3, #4
 8005338:	2b00      	cmp	r3, #0
 800533a:	d02e      	beq.n	800539a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	4413      	add	r3, r2
 8005344:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	429a      	cmp	r2, r3
 800534c:	d90e      	bls.n	800536c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800535a:	4b19      	ldr	r3, [pc, #100]	; (80053c0 <prvSwitchTimerLists+0xc0>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7fe f8d4 	bl	8003512 <vListInsert>
 800536a:	e016      	b.n	800539a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800536c:	2300      	movs	r3, #0
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	2300      	movs	r3, #0
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	2100      	movs	r1, #0
 8005376:	68f8      	ldr	r0, [r7, #12]
 8005378:	f7ff fd60 	bl	8004e3c <xTimerGenericCommand>
 800537c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10a      	bne.n	800539a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	603b      	str	r3, [r7, #0]
}
 8005396:	bf00      	nop
 8005398:	e7fe      	b.n	8005398 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800539a:	4b09      	ldr	r3, [pc, #36]	; (80053c0 <prvSwitchTimerLists+0xc0>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d1b1      	bne.n	8005308 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <prvSwitchTimerLists+0xc0>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80053aa:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <prvSwitchTimerLists+0xc4>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <prvSwitchTimerLists+0xc0>)
 80053b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80053b2:	4a04      	ldr	r2, [pc, #16]	; (80053c4 <prvSwitchTimerLists+0xc4>)
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	6013      	str	r3, [r2, #0]
}
 80053b8:	bf00      	nop
 80053ba:	3718      	adds	r7, #24
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	20000da4 	.word	0x20000da4
 80053c4:	20000da8 	.word	0x20000da8

080053c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80053ce:	f000 f969 	bl	80056a4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80053d2:	4b15      	ldr	r3, [pc, #84]	; (8005428 <prvCheckForValidListAndQueue+0x60>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d120      	bne.n	800541c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80053da:	4814      	ldr	r0, [pc, #80]	; (800542c <prvCheckForValidListAndQueue+0x64>)
 80053dc:	f7fe f848 	bl	8003470 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80053e0:	4813      	ldr	r0, [pc, #76]	; (8005430 <prvCheckForValidListAndQueue+0x68>)
 80053e2:	f7fe f845 	bl	8003470 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80053e6:	4b13      	ldr	r3, [pc, #76]	; (8005434 <prvCheckForValidListAndQueue+0x6c>)
 80053e8:	4a10      	ldr	r2, [pc, #64]	; (800542c <prvCheckForValidListAndQueue+0x64>)
 80053ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80053ec:	4b12      	ldr	r3, [pc, #72]	; (8005438 <prvCheckForValidListAndQueue+0x70>)
 80053ee:	4a10      	ldr	r2, [pc, #64]	; (8005430 <prvCheckForValidListAndQueue+0x68>)
 80053f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80053f2:	2300      	movs	r3, #0
 80053f4:	9300      	str	r3, [sp, #0]
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <prvCheckForValidListAndQueue+0x74>)
 80053f8:	4a11      	ldr	r2, [pc, #68]	; (8005440 <prvCheckForValidListAndQueue+0x78>)
 80053fa:	2110      	movs	r1, #16
 80053fc:	200a      	movs	r0, #10
 80053fe:	f7fe f953 	bl	80036a8 <xQueueGenericCreateStatic>
 8005402:	4603      	mov	r3, r0
 8005404:	4a08      	ldr	r2, [pc, #32]	; (8005428 <prvCheckForValidListAndQueue+0x60>)
 8005406:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005408:	4b07      	ldr	r3, [pc, #28]	; (8005428 <prvCheckForValidListAndQueue+0x60>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d005      	beq.n	800541c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <prvCheckForValidListAndQueue+0x60>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	490b      	ldr	r1, [pc, #44]	; (8005444 <prvCheckForValidListAndQueue+0x7c>)
 8005416:	4618      	mov	r0, r3
 8005418:	f7fe fd6c 	bl	8003ef4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800541c:	f000 f972 	bl	8005704 <vPortExitCritical>
}
 8005420:	bf00      	nop
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000dac 	.word	0x20000dac
 800542c:	20000d7c 	.word	0x20000d7c
 8005430:	20000d90 	.word	0x20000d90
 8005434:	20000da4 	.word	0x20000da4
 8005438:	20000da8 	.word	0x20000da8
 800543c:	20000e58 	.word	0x20000e58
 8005440:	20000db8 	.word	0x20000db8
 8005444:	08006cb0 	.word	0x08006cb0

08005448 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3b04      	subs	r3, #4
 8005458:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005460:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3b04      	subs	r3, #4
 8005466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	f023 0201 	bic.w	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3b04      	subs	r3, #4
 8005476:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005478:	4a0c      	ldr	r2, [pc, #48]	; (80054ac <pxPortInitialiseStack+0x64>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	3b14      	subs	r3, #20
 8005482:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	3b04      	subs	r3, #4
 800548e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f06f 0202 	mvn.w	r2, #2
 8005496:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3b20      	subs	r3, #32
 800549c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800549e:	68fb      	ldr	r3, [r7, #12]
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	080054b1 	.word	0x080054b1

080054b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80054ba:	4b12      	ldr	r3, [pc, #72]	; (8005504 <prvTaskExitError+0x54>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c2:	d00a      	beq.n	80054da <prvTaskExitError+0x2a>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <prvTaskExitError+0x28>
	__asm volatile
 80054da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	60bb      	str	r3, [r7, #8]
}
 80054ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054ee:	bf00      	nop
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0fc      	beq.n	80054f0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr
 8005504:	2000000c 	.word	0x2000000c
	...

08005510 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005510:	4b07      	ldr	r3, [pc, #28]	; (8005530 <pxCurrentTCBConst2>)
 8005512:	6819      	ldr	r1, [r3, #0]
 8005514:	6808      	ldr	r0, [r1, #0]
 8005516:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800551a:	f380 8809 	msr	PSP, r0
 800551e:	f3bf 8f6f 	isb	sy
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f380 8811 	msr	BASEPRI, r0
 800552a:	4770      	bx	lr
 800552c:	f3af 8000 	nop.w

08005530 <pxCurrentTCBConst2>:
 8005530:	2000087c 	.word	0x2000087c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop

08005538 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005538:	4808      	ldr	r0, [pc, #32]	; (800555c <prvPortStartFirstTask+0x24>)
 800553a:	6800      	ldr	r0, [r0, #0]
 800553c:	6800      	ldr	r0, [r0, #0]
 800553e:	f380 8808 	msr	MSP, r0
 8005542:	f04f 0000 	mov.w	r0, #0
 8005546:	f380 8814 	msr	CONTROL, r0
 800554a:	b662      	cpsie	i
 800554c:	b661      	cpsie	f
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	df00      	svc	0
 8005558:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800555a:	bf00      	nop
 800555c:	e000ed08 	.word	0xe000ed08

08005560 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005566:	4b46      	ldr	r3, [pc, #280]	; (8005680 <xPortStartScheduler+0x120>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a46      	ldr	r2, [pc, #280]	; (8005684 <xPortStartScheduler+0x124>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d10a      	bne.n	8005586 <xPortStartScheduler+0x26>
	__asm volatile
 8005570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005574:	f383 8811 	msr	BASEPRI, r3
 8005578:	f3bf 8f6f 	isb	sy
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	613b      	str	r3, [r7, #16]
}
 8005582:	bf00      	nop
 8005584:	e7fe      	b.n	8005584 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005586:	4b3e      	ldr	r3, [pc, #248]	; (8005680 <xPortStartScheduler+0x120>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a3f      	ldr	r2, [pc, #252]	; (8005688 <xPortStartScheduler+0x128>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d10a      	bne.n	80055a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	60fb      	str	r3, [r7, #12]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055a6:	4b39      	ldr	r3, [pc, #228]	; (800568c <xPortStartScheduler+0x12c>)
 80055a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	22ff      	movs	r2, #255	; 0xff
 80055b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055c0:	78fb      	ldrb	r3, [r7, #3]
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	4b31      	ldr	r3, [pc, #196]	; (8005690 <xPortStartScheduler+0x130>)
 80055cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055ce:	4b31      	ldr	r3, [pc, #196]	; (8005694 <xPortStartScheduler+0x134>)
 80055d0:	2207      	movs	r2, #7
 80055d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055d4:	e009      	b.n	80055ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80055d6:	4b2f      	ldr	r3, [pc, #188]	; (8005694 <xPortStartScheduler+0x134>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	3b01      	subs	r3, #1
 80055dc:	4a2d      	ldr	r2, [pc, #180]	; (8005694 <xPortStartScheduler+0x134>)
 80055de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	005b      	lsls	r3, r3, #1
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055f2:	2b80      	cmp	r3, #128	; 0x80
 80055f4:	d0ef      	beq.n	80055d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055f6:	4b27      	ldr	r3, [pc, #156]	; (8005694 <xPortStartScheduler+0x134>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f1c3 0307 	rsb	r3, r3, #7
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d00a      	beq.n	8005618 <xPortStartScheduler+0xb8>
	__asm volatile
 8005602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005606:	f383 8811 	msr	BASEPRI, r3
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	60bb      	str	r3, [r7, #8]
}
 8005614:	bf00      	nop
 8005616:	e7fe      	b.n	8005616 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005618:	4b1e      	ldr	r3, [pc, #120]	; (8005694 <xPortStartScheduler+0x134>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	021b      	lsls	r3, r3, #8
 800561e:	4a1d      	ldr	r2, [pc, #116]	; (8005694 <xPortStartScheduler+0x134>)
 8005620:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005622:	4b1c      	ldr	r3, [pc, #112]	; (8005694 <xPortStartScheduler+0x134>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800562a:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <xPortStartScheduler+0x134>)
 800562c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	b2da      	uxtb	r2, r3
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005636:	4b18      	ldr	r3, [pc, #96]	; (8005698 <xPortStartScheduler+0x138>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a17      	ldr	r2, [pc, #92]	; (8005698 <xPortStartScheduler+0x138>)
 800563c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005640:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005642:	4b15      	ldr	r3, [pc, #84]	; (8005698 <xPortStartScheduler+0x138>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a14      	ldr	r2, [pc, #80]	; (8005698 <xPortStartScheduler+0x138>)
 8005648:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800564c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800564e:	f000 f8dd 	bl	800580c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005652:	4b12      	ldr	r3, [pc, #72]	; (800569c <xPortStartScheduler+0x13c>)
 8005654:	2200      	movs	r2, #0
 8005656:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005658:	f000 f8fc 	bl	8005854 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800565c:	4b10      	ldr	r3, [pc, #64]	; (80056a0 <xPortStartScheduler+0x140>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a0f      	ldr	r2, [pc, #60]	; (80056a0 <xPortStartScheduler+0x140>)
 8005662:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005666:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005668:	f7ff ff66 	bl	8005538 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800566c:	f7ff f852 	bl	8004714 <vTaskSwitchContext>
	prvTaskExitError();
 8005670:	f7ff ff1e 	bl	80054b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	e000ed00 	.word	0xe000ed00
 8005684:	410fc271 	.word	0x410fc271
 8005688:	410fc270 	.word	0x410fc270
 800568c:	e000e400 	.word	0xe000e400
 8005690:	20000ea8 	.word	0x20000ea8
 8005694:	20000eac 	.word	0x20000eac
 8005698:	e000ed20 	.word	0xe000ed20
 800569c:	2000000c 	.word	0x2000000c
 80056a0:	e000ef34 	.word	0xe000ef34

080056a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
	__asm volatile
 80056aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ae:	f383 8811 	msr	BASEPRI, r3
 80056b2:	f3bf 8f6f 	isb	sy
 80056b6:	f3bf 8f4f 	dsb	sy
 80056ba:	607b      	str	r3, [r7, #4]
}
 80056bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80056be:	4b0f      	ldr	r3, [pc, #60]	; (80056fc <vPortEnterCritical+0x58>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3301      	adds	r3, #1
 80056c4:	4a0d      	ldr	r2, [pc, #52]	; (80056fc <vPortEnterCritical+0x58>)
 80056c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80056c8:	4b0c      	ldr	r3, [pc, #48]	; (80056fc <vPortEnterCritical+0x58>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d10f      	bne.n	80056f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056d0:	4b0b      	ldr	r3, [pc, #44]	; (8005700 <vPortEnterCritical+0x5c>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	b2db      	uxtb	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	603b      	str	r3, [r7, #0]
}
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <vPortEnterCritical+0x4a>
	}
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr
 80056fc:	2000000c 	.word	0x2000000c
 8005700:	e000ed04 	.word	0xe000ed04

08005704 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800570a:	4b12      	ldr	r3, [pc, #72]	; (8005754 <vPortExitCritical+0x50>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <vPortExitCritical+0x24>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	607b      	str	r3, [r7, #4]
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005728:	4b0a      	ldr	r3, [pc, #40]	; (8005754 <vPortExitCritical+0x50>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3b01      	subs	r3, #1
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <vPortExitCritical+0x50>)
 8005730:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005732:	4b08      	ldr	r3, [pc, #32]	; (8005754 <vPortExitCritical+0x50>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d105      	bne.n	8005746 <vPortExitCritical+0x42>
 800573a:	2300      	movs	r3, #0
 800573c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	f383 8811 	msr	BASEPRI, r3
}
 8005744:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005746:	bf00      	nop
 8005748:	370c      	adds	r7, #12
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	2000000c 	.word	0x2000000c
	...

08005760 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005760:	f3ef 8009 	mrs	r0, PSP
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	4b15      	ldr	r3, [pc, #84]	; (80057c0 <pxCurrentTCBConst>)
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	f01e 0f10 	tst.w	lr, #16
 8005770:	bf08      	it	eq
 8005772:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005776:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800577a:	6010      	str	r0, [r2, #0]
 800577c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005780:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005784:	f380 8811 	msr	BASEPRI, r0
 8005788:	f3bf 8f4f 	dsb	sy
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f7fe ffc0 	bl	8004714 <vTaskSwitchContext>
 8005794:	f04f 0000 	mov.w	r0, #0
 8005798:	f380 8811 	msr	BASEPRI, r0
 800579c:	bc09      	pop	{r0, r3}
 800579e:	6819      	ldr	r1, [r3, #0]
 80057a0:	6808      	ldr	r0, [r1, #0]
 80057a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057a6:	f01e 0f10 	tst.w	lr, #16
 80057aa:	bf08      	it	eq
 80057ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80057b0:	f380 8809 	msr	PSP, r0
 80057b4:	f3bf 8f6f 	isb	sy
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	f3af 8000 	nop.w

080057c0 <pxCurrentTCBConst>:
 80057c0:	2000087c 	.word	0x2000087c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop

080057c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	607b      	str	r3, [r7, #4]
}
 80057e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057e2:	f7fe fedd 	bl	80045a0 <xTaskIncrementTick>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d003      	beq.n	80057f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <xPortSysTickHandler+0x40>)
 80057ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f2:	601a      	str	r2, [r3, #0]
 80057f4:	2300      	movs	r3, #0
 80057f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	f383 8811 	msr	BASEPRI, r3
}
 80057fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005800:	bf00      	nop
 8005802:	3708      	adds	r7, #8
 8005804:	46bd      	mov	sp, r7
 8005806:	bd80      	pop	{r7, pc}
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800580c:	b480      	push	{r7}
 800580e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005810:	4b0b      	ldr	r3, [pc, #44]	; (8005840 <vPortSetupTimerInterrupt+0x34>)
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <vPortSetupTimerInterrupt+0x38>)
 8005818:	2200      	movs	r2, #0
 800581a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <vPortSetupTimerInterrupt+0x3c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a0a      	ldr	r2, [pc, #40]	; (800584c <vPortSetupTimerInterrupt+0x40>)
 8005822:	fba2 2303 	umull	r2, r3, r2, r3
 8005826:	099b      	lsrs	r3, r3, #6
 8005828:	4a09      	ldr	r2, [pc, #36]	; (8005850 <vPortSetupTimerInterrupt+0x44>)
 800582a:	3b01      	subs	r3, #1
 800582c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800582e:	4b04      	ldr	r3, [pc, #16]	; (8005840 <vPortSetupTimerInterrupt+0x34>)
 8005830:	2207      	movs	r2, #7
 8005832:	601a      	str	r2, [r3, #0]
}
 8005834:	bf00      	nop
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	e000e010 	.word	0xe000e010
 8005844:	e000e018 	.word	0xe000e018
 8005848:	20000000 	.word	0x20000000
 800584c:	10624dd3 	.word	0x10624dd3
 8005850:	e000e014 	.word	0xe000e014

08005854 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005854:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005864 <vPortEnableVFP+0x10>
 8005858:	6801      	ldr	r1, [r0, #0]
 800585a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800585e:	6001      	str	r1, [r0, #0]
 8005860:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005862:	bf00      	nop
 8005864:	e000ed88 	.word	0xe000ed88

08005868 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800586e:	f3ef 8305 	mrs	r3, IPSR
 8005872:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b0f      	cmp	r3, #15
 8005878:	d914      	bls.n	80058a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800587a:	4a17      	ldr	r2, [pc, #92]	; (80058d8 <vPortValidateInterruptPriority+0x70>)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	4413      	add	r3, r2
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005884:	4b15      	ldr	r3, [pc, #84]	; (80058dc <vPortValidateInterruptPriority+0x74>)
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	7afa      	ldrb	r2, [r7, #11]
 800588a:	429a      	cmp	r2, r3
 800588c:	d20a      	bcs.n	80058a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800588e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005892:	f383 8811 	msr	BASEPRI, r3
 8005896:	f3bf 8f6f 	isb	sy
 800589a:	f3bf 8f4f 	dsb	sy
 800589e:	607b      	str	r3, [r7, #4]
}
 80058a0:	bf00      	nop
 80058a2:	e7fe      	b.n	80058a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80058a4:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <vPortValidateInterruptPriority+0x78>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058ac:	4b0d      	ldr	r3, [pc, #52]	; (80058e4 <vPortValidateInterruptPriority+0x7c>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d90a      	bls.n	80058ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	603b      	str	r3, [r7, #0]
}
 80058c6:	bf00      	nop
 80058c8:	e7fe      	b.n	80058c8 <vPortValidateInterruptPriority+0x60>
	}
 80058ca:	bf00      	nop
 80058cc:	3714      	adds	r7, #20
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr
 80058d6:	bf00      	nop
 80058d8:	e000e3f0 	.word	0xe000e3f0
 80058dc:	20000ea8 	.word	0x20000ea8
 80058e0:	e000ed0c 	.word	0xe000ed0c
 80058e4:	20000eac 	.word	0x20000eac

080058e8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08a      	sub	sp, #40	; 0x28
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058f0:	2300      	movs	r3, #0
 80058f2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058f4:	f7fe fd98 	bl	8004428 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058f8:	4b5b      	ldr	r3, [pc, #364]	; (8005a68 <pvPortMalloc+0x180>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005900:	f000 f920 	bl	8005b44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005904:	4b59      	ldr	r3, [pc, #356]	; (8005a6c <pvPortMalloc+0x184>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	f040 8093 	bne.w	8005a38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01d      	beq.n	8005954 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005918:	2208      	movs	r2, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4413      	add	r3, r2
 800591e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	2b00      	cmp	r3, #0
 8005928:	d014      	beq.n	8005954 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f023 0307 	bic.w	r3, r3, #7
 8005930:	3308      	adds	r3, #8
 8005932:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f003 0307 	and.w	r3, r3, #7
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <pvPortMalloc+0x6c>
	__asm volatile
 800593e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005942:	f383 8811 	msr	BASEPRI, r3
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	f3bf 8f4f 	dsb	sy
 800594e:	617b      	str	r3, [r7, #20]
}
 8005950:	bf00      	nop
 8005952:	e7fe      	b.n	8005952 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d06e      	beq.n	8005a38 <pvPortMalloc+0x150>
 800595a:	4b45      	ldr	r3, [pc, #276]	; (8005a70 <pvPortMalloc+0x188>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	429a      	cmp	r2, r3
 8005962:	d869      	bhi.n	8005a38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005964:	4b43      	ldr	r3, [pc, #268]	; (8005a74 <pvPortMalloc+0x18c>)
 8005966:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005968:	4b42      	ldr	r3, [pc, #264]	; (8005a74 <pvPortMalloc+0x18c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800596e:	e004      	b.n	800597a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d903      	bls.n	800598c <pvPortMalloc+0xa4>
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1f1      	bne.n	8005970 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800598c:	4b36      	ldr	r3, [pc, #216]	; (8005a68 <pvPortMalloc+0x180>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005992:	429a      	cmp	r2, r3
 8005994:	d050      	beq.n	8005a38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2208      	movs	r2, #8
 800599c:	4413      	add	r3, r2
 800599e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80059a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80059a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	1ad2      	subs	r2, r2, r3
 80059b0:	2308      	movs	r3, #8
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d91f      	bls.n	80059f8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80059b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4413      	add	r3, r2
 80059be:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <pvPortMalloc+0xf8>
	__asm volatile
 80059ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ce:	f383 8811 	msr	BASEPRI, r3
 80059d2:	f3bf 8f6f 	isb	sy
 80059d6:	f3bf 8f4f 	dsb	sy
 80059da:	613b      	str	r3, [r7, #16]
}
 80059dc:	bf00      	nop
 80059de:	e7fe      	b.n	80059de <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	685a      	ldr	r2, [r3, #4]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	1ad2      	subs	r2, r2, r3
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	687a      	ldr	r2, [r7, #4]
 80059f0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059f2:	69b8      	ldr	r0, [r7, #24]
 80059f4:	f000 f908 	bl	8005c08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059f8:	4b1d      	ldr	r3, [pc, #116]	; (8005a70 <pvPortMalloc+0x188>)
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	4a1b      	ldr	r2, [pc, #108]	; (8005a70 <pvPortMalloc+0x188>)
 8005a04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a06:	4b1a      	ldr	r3, [pc, #104]	; (8005a70 <pvPortMalloc+0x188>)
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <pvPortMalloc+0x190>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d203      	bcs.n	8005a1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a12:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <pvPortMalloc+0x188>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a18      	ldr	r2, [pc, #96]	; (8005a78 <pvPortMalloc+0x190>)
 8005a18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	4b13      	ldr	r3, [pc, #76]	; (8005a6c <pvPortMalloc+0x184>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005a2e:	4b13      	ldr	r3, [pc, #76]	; (8005a7c <pvPortMalloc+0x194>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	3301      	adds	r3, #1
 8005a34:	4a11      	ldr	r2, [pc, #68]	; (8005a7c <pvPortMalloc+0x194>)
 8005a36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005a38:	f7fe fd04 	bl	8004444 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	f003 0307 	and.w	r3, r3, #7
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <pvPortMalloc+0x174>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60fb      	str	r3, [r7, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <pvPortMalloc+0x172>
	return pvReturn;
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3728      	adds	r7, #40	; 0x28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	20004ab8 	.word	0x20004ab8
 8005a6c:	20004acc 	.word	0x20004acc
 8005a70:	20004abc 	.word	0x20004abc
 8005a74:	20004ab0 	.word	0x20004ab0
 8005a78:	20004ac0 	.word	0x20004ac0
 8005a7c:	20004ac4 	.word	0x20004ac4

08005a80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b086      	sub	sp, #24
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d04d      	beq.n	8005b2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a92:	2308      	movs	r3, #8
 8005a94:	425b      	negs	r3, r3
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	4413      	add	r3, r2
 8005a9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	685a      	ldr	r2, [r3, #4]
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <vPortFree+0xb8>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <vPortFree+0x44>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60fb      	str	r3, [r7, #12]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <vPortFree+0x62>
	__asm volatile
 8005acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad0:	f383 8811 	msr	BASEPRI, r3
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	f3bf 8f4f 	dsb	sy
 8005adc:	60bb      	str	r3, [r7, #8]
}
 8005ade:	bf00      	nop
 8005ae0:	e7fe      	b.n	8005ae0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	685a      	ldr	r2, [r3, #4]
 8005ae6:	4b14      	ldr	r3, [pc, #80]	; (8005b38 <vPortFree+0xb8>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4013      	ands	r3, r2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01e      	beq.n	8005b2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d11a      	bne.n	8005b2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	4b0e      	ldr	r3, [pc, #56]	; (8005b38 <vPortFree+0xb8>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005b08:	f7fe fc8e 	bl	8004428 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	4b0a      	ldr	r3, [pc, #40]	; (8005b3c <vPortFree+0xbc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4413      	add	r3, r2
 8005b16:	4a09      	ldr	r2, [pc, #36]	; (8005b3c <vPortFree+0xbc>)
 8005b18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b1a:	6938      	ldr	r0, [r7, #16]
 8005b1c:	f000 f874 	bl	8005c08 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005b20:	4b07      	ldr	r3, [pc, #28]	; (8005b40 <vPortFree+0xc0>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	3301      	adds	r3, #1
 8005b26:	4a06      	ldr	r2, [pc, #24]	; (8005b40 <vPortFree+0xc0>)
 8005b28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005b2a:	f7fe fc8b 	bl	8004444 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005b2e:	bf00      	nop
 8005b30:	3718      	adds	r7, #24
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20004acc 	.word	0x20004acc
 8005b3c:	20004abc 	.word	0x20004abc
 8005b40:	20004ac8 	.word	0x20004ac8

08005b44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005b4a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005b4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005b50:	4b27      	ldr	r3, [pc, #156]	; (8005bf0 <prvHeapInit+0xac>)
 8005b52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00c      	beq.n	8005b78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	3307      	adds	r3, #7
 8005b62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f023 0307 	bic.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	4a1f      	ldr	r2, [pc, #124]	; (8005bf0 <prvHeapInit+0xac>)
 8005b74:	4413      	add	r3, r2
 8005b76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b7c:	4a1d      	ldr	r2, [pc, #116]	; (8005bf4 <prvHeapInit+0xb0>)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b82:	4b1c      	ldr	r3, [pc, #112]	; (8005bf4 <prvHeapInit+0xb0>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b90:	2208      	movs	r2, #8
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1a9b      	subs	r3, r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0307 	bic.w	r3, r3, #7
 8005b9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4a15      	ldr	r2, [pc, #84]	; (8005bf8 <prvHeapInit+0xb4>)
 8005ba4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ba6:	4b14      	ldr	r3, [pc, #80]	; (8005bf8 <prvHeapInit+0xb4>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2200      	movs	r2, #0
 8005bac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005bae:	4b12      	ldr	r3, [pc, #72]	; (8005bf8 <prvHeapInit+0xb4>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	1ad2      	subs	r2, r2, r3
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005bc4:	4b0c      	ldr	r3, [pc, #48]	; (8005bf8 <prvHeapInit+0xb4>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	4a0a      	ldr	r2, [pc, #40]	; (8005bfc <prvHeapInit+0xb8>)
 8005bd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <prvHeapInit+0xbc>)
 8005bda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005bdc:	4b09      	ldr	r3, [pc, #36]	; (8005c04 <prvHeapInit+0xc0>)
 8005bde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005be2:	601a      	str	r2, [r3, #0]
}
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	20000eb0 	.word	0x20000eb0
 8005bf4:	20004ab0 	.word	0x20004ab0
 8005bf8:	20004ab8 	.word	0x20004ab8
 8005bfc:	20004ac0 	.word	0x20004ac0
 8005c00:	20004abc 	.word	0x20004abc
 8005c04:	20004acc 	.word	0x20004acc

08005c08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005c10:	4b28      	ldr	r3, [pc, #160]	; (8005cb4 <prvInsertBlockIntoFreeList+0xac>)
 8005c12:	60fb      	str	r3, [r7, #12]
 8005c14:	e002      	b.n	8005c1c <prvInsertBlockIntoFreeList+0x14>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d8f7      	bhi.n	8005c16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	68ba      	ldr	r2, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d108      	bne.n	8005c4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	441a      	add	r2, r3
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	441a      	add	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d118      	bne.n	8005c90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	4b15      	ldr	r3, [pc, #84]	; (8005cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d00d      	beq.n	8005c86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	441a      	add	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	601a      	str	r2, [r3, #0]
 8005c84:	e008      	b.n	8005c98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c86:	4b0c      	ldr	r3, [pc, #48]	; (8005cb8 <prvInsertBlockIntoFreeList+0xb0>)
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	601a      	str	r2, [r3, #0]
 8005c8e:	e003      	b.n	8005c98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d002      	beq.n	8005ca6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ca6:	bf00      	nop
 8005ca8:	3714      	adds	r7, #20
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20004ab0 	.word	0x20004ab0
 8005cb8:	20004ab8 	.word	0x20004ab8

08005cbc <__errno>:
 8005cbc:	4b01      	ldr	r3, [pc, #4]	; (8005cc4 <__errno+0x8>)
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	20000010 	.word	0x20000010

08005cc8 <__libc_init_array>:
 8005cc8:	b570      	push	{r4, r5, r6, lr}
 8005cca:	4d0d      	ldr	r5, [pc, #52]	; (8005d00 <__libc_init_array+0x38>)
 8005ccc:	4c0d      	ldr	r4, [pc, #52]	; (8005d04 <__libc_init_array+0x3c>)
 8005cce:	1b64      	subs	r4, r4, r5
 8005cd0:	10a4      	asrs	r4, r4, #2
 8005cd2:	2600      	movs	r6, #0
 8005cd4:	42a6      	cmp	r6, r4
 8005cd6:	d109      	bne.n	8005cec <__libc_init_array+0x24>
 8005cd8:	4d0b      	ldr	r5, [pc, #44]	; (8005d08 <__libc_init_array+0x40>)
 8005cda:	4c0c      	ldr	r4, [pc, #48]	; (8005d0c <__libc_init_array+0x44>)
 8005cdc:	f000 ffbc 	bl	8006c58 <_init>
 8005ce0:	1b64      	subs	r4, r4, r5
 8005ce2:	10a4      	asrs	r4, r4, #2
 8005ce4:	2600      	movs	r6, #0
 8005ce6:	42a6      	cmp	r6, r4
 8005ce8:	d105      	bne.n	8005cf6 <__libc_init_array+0x2e>
 8005cea:	bd70      	pop	{r4, r5, r6, pc}
 8005cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cf0:	4798      	blx	r3
 8005cf2:	3601      	adds	r6, #1
 8005cf4:	e7ee      	b.n	8005cd4 <__libc_init_array+0xc>
 8005cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cfa:	4798      	blx	r3
 8005cfc:	3601      	adds	r6, #1
 8005cfe:	e7f2      	b.n	8005ce6 <__libc_init_array+0x1e>
 8005d00:	08006e00 	.word	0x08006e00
 8005d04:	08006e00 	.word	0x08006e00
 8005d08:	08006e00 	.word	0x08006e00
 8005d0c:	08006e04 	.word	0x08006e04

08005d10 <memcpy>:
 8005d10:	440a      	add	r2, r1
 8005d12:	4291      	cmp	r1, r2
 8005d14:	f100 33ff 	add.w	r3, r0, #4294967295
 8005d18:	d100      	bne.n	8005d1c <memcpy+0xc>
 8005d1a:	4770      	bx	lr
 8005d1c:	b510      	push	{r4, lr}
 8005d1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005d22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005d26:	4291      	cmp	r1, r2
 8005d28:	d1f9      	bne.n	8005d1e <memcpy+0xe>
 8005d2a:	bd10      	pop	{r4, pc}

08005d2c <memset>:
 8005d2c:	4402      	add	r2, r0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d100      	bne.n	8005d36 <memset+0xa>
 8005d34:	4770      	bx	lr
 8005d36:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3a:	e7f9      	b.n	8005d30 <memset+0x4>

08005d3c <iprintf>:
 8005d3c:	b40f      	push	{r0, r1, r2, r3}
 8005d3e:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <iprintf+0x2c>)
 8005d40:	b513      	push	{r0, r1, r4, lr}
 8005d42:	681c      	ldr	r4, [r3, #0]
 8005d44:	b124      	cbz	r4, 8005d50 <iprintf+0x14>
 8005d46:	69a3      	ldr	r3, [r4, #24]
 8005d48:	b913      	cbnz	r3, 8005d50 <iprintf+0x14>
 8005d4a:	4620      	mov	r0, r4
 8005d4c:	f000 f866 	bl	8005e1c <__sinit>
 8005d50:	ab05      	add	r3, sp, #20
 8005d52:	9a04      	ldr	r2, [sp, #16]
 8005d54:	68a1      	ldr	r1, [r4, #8]
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f000 f9bd 	bl	80060d8 <_vfiprintf_r>
 8005d5e:	b002      	add	sp, #8
 8005d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d64:	b004      	add	sp, #16
 8005d66:	4770      	bx	lr
 8005d68:	20000010 	.word	0x20000010

08005d6c <std>:
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	b510      	push	{r4, lr}
 8005d70:	4604      	mov	r4, r0
 8005d72:	e9c0 3300 	strd	r3, r3, [r0]
 8005d76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d7a:	6083      	str	r3, [r0, #8]
 8005d7c:	8181      	strh	r1, [r0, #12]
 8005d7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005d80:	81c2      	strh	r2, [r0, #14]
 8005d82:	6183      	str	r3, [r0, #24]
 8005d84:	4619      	mov	r1, r3
 8005d86:	2208      	movs	r2, #8
 8005d88:	305c      	adds	r0, #92	; 0x5c
 8005d8a:	f7ff ffcf 	bl	8005d2c <memset>
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <std+0x38>)
 8005d90:	6263      	str	r3, [r4, #36]	; 0x24
 8005d92:	4b05      	ldr	r3, [pc, #20]	; (8005da8 <std+0x3c>)
 8005d94:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d96:	4b05      	ldr	r3, [pc, #20]	; (8005dac <std+0x40>)
 8005d98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <std+0x44>)
 8005d9c:	6224      	str	r4, [r4, #32]
 8005d9e:	6323      	str	r3, [r4, #48]	; 0x30
 8005da0:	bd10      	pop	{r4, pc}
 8005da2:	bf00      	nop
 8005da4:	08006681 	.word	0x08006681
 8005da8:	080066a3 	.word	0x080066a3
 8005dac:	080066db 	.word	0x080066db
 8005db0:	080066ff 	.word	0x080066ff

08005db4 <_cleanup_r>:
 8005db4:	4901      	ldr	r1, [pc, #4]	; (8005dbc <_cleanup_r+0x8>)
 8005db6:	f000 b8af 	b.w	8005f18 <_fwalk_reent>
 8005dba:	bf00      	nop
 8005dbc:	080069d9 	.word	0x080069d9

08005dc0 <__sfmoreglue>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	2268      	movs	r2, #104	; 0x68
 8005dc4:	1e4d      	subs	r5, r1, #1
 8005dc6:	4355      	muls	r5, r2
 8005dc8:	460e      	mov	r6, r1
 8005dca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005dce:	f000 f8e5 	bl	8005f9c <_malloc_r>
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	b140      	cbz	r0, 8005de8 <__sfmoreglue+0x28>
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	e9c0 1600 	strd	r1, r6, [r0]
 8005ddc:	300c      	adds	r0, #12
 8005dde:	60a0      	str	r0, [r4, #8]
 8005de0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005de4:	f7ff ffa2 	bl	8005d2c <memset>
 8005de8:	4620      	mov	r0, r4
 8005dea:	bd70      	pop	{r4, r5, r6, pc}

08005dec <__sfp_lock_acquire>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__sfp_lock_acquire+0x8>)
 8005dee:	f000 b8b3 	b.w	8005f58 <__retarget_lock_acquire_recursive>
 8005df2:	bf00      	nop
 8005df4:	20004ad1 	.word	0x20004ad1

08005df8 <__sfp_lock_release>:
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__sfp_lock_release+0x8>)
 8005dfa:	f000 b8ae 	b.w	8005f5a <__retarget_lock_release_recursive>
 8005dfe:	bf00      	nop
 8005e00:	20004ad1 	.word	0x20004ad1

08005e04 <__sinit_lock_acquire>:
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <__sinit_lock_acquire+0x8>)
 8005e06:	f000 b8a7 	b.w	8005f58 <__retarget_lock_acquire_recursive>
 8005e0a:	bf00      	nop
 8005e0c:	20004ad2 	.word	0x20004ad2

08005e10 <__sinit_lock_release>:
 8005e10:	4801      	ldr	r0, [pc, #4]	; (8005e18 <__sinit_lock_release+0x8>)
 8005e12:	f000 b8a2 	b.w	8005f5a <__retarget_lock_release_recursive>
 8005e16:	bf00      	nop
 8005e18:	20004ad2 	.word	0x20004ad2

08005e1c <__sinit>:
 8005e1c:	b510      	push	{r4, lr}
 8005e1e:	4604      	mov	r4, r0
 8005e20:	f7ff fff0 	bl	8005e04 <__sinit_lock_acquire>
 8005e24:	69a3      	ldr	r3, [r4, #24]
 8005e26:	b11b      	cbz	r3, 8005e30 <__sinit+0x14>
 8005e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e2c:	f7ff bff0 	b.w	8005e10 <__sinit_lock_release>
 8005e30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e34:	6523      	str	r3, [r4, #80]	; 0x50
 8005e36:	4b13      	ldr	r3, [pc, #76]	; (8005e84 <__sinit+0x68>)
 8005e38:	4a13      	ldr	r2, [pc, #76]	; (8005e88 <__sinit+0x6c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e3e:	42a3      	cmp	r3, r4
 8005e40:	bf04      	itt	eq
 8005e42:	2301      	moveq	r3, #1
 8005e44:	61a3      	streq	r3, [r4, #24]
 8005e46:	4620      	mov	r0, r4
 8005e48:	f000 f820 	bl	8005e8c <__sfp>
 8005e4c:	6060      	str	r0, [r4, #4]
 8005e4e:	4620      	mov	r0, r4
 8005e50:	f000 f81c 	bl	8005e8c <__sfp>
 8005e54:	60a0      	str	r0, [r4, #8]
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 f818 	bl	8005e8c <__sfp>
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	60e0      	str	r0, [r4, #12]
 8005e60:	2104      	movs	r1, #4
 8005e62:	6860      	ldr	r0, [r4, #4]
 8005e64:	f7ff ff82 	bl	8005d6c <std>
 8005e68:	68a0      	ldr	r0, [r4, #8]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	2109      	movs	r1, #9
 8005e6e:	f7ff ff7d 	bl	8005d6c <std>
 8005e72:	68e0      	ldr	r0, [r4, #12]
 8005e74:	2202      	movs	r2, #2
 8005e76:	2112      	movs	r1, #18
 8005e78:	f7ff ff78 	bl	8005d6c <std>
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	61a3      	str	r3, [r4, #24]
 8005e80:	e7d2      	b.n	8005e28 <__sinit+0xc>
 8005e82:	bf00      	nop
 8005e84:	08006d60 	.word	0x08006d60
 8005e88:	08005db5 	.word	0x08005db5

08005e8c <__sfp>:
 8005e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e8e:	4607      	mov	r7, r0
 8005e90:	f7ff ffac 	bl	8005dec <__sfp_lock_acquire>
 8005e94:	4b1e      	ldr	r3, [pc, #120]	; (8005f10 <__sfp+0x84>)
 8005e96:	681e      	ldr	r6, [r3, #0]
 8005e98:	69b3      	ldr	r3, [r6, #24]
 8005e9a:	b913      	cbnz	r3, 8005ea2 <__sfp+0x16>
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7ff ffbd 	bl	8005e1c <__sinit>
 8005ea2:	3648      	adds	r6, #72	; 0x48
 8005ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	d503      	bpl.n	8005eb4 <__sfp+0x28>
 8005eac:	6833      	ldr	r3, [r6, #0]
 8005eae:	b30b      	cbz	r3, 8005ef4 <__sfp+0x68>
 8005eb0:	6836      	ldr	r6, [r6, #0]
 8005eb2:	e7f7      	b.n	8005ea4 <__sfp+0x18>
 8005eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005eb8:	b9d5      	cbnz	r5, 8005ef0 <__sfp+0x64>
 8005eba:	4b16      	ldr	r3, [pc, #88]	; (8005f14 <__sfp+0x88>)
 8005ebc:	60e3      	str	r3, [r4, #12]
 8005ebe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005ec2:	6665      	str	r5, [r4, #100]	; 0x64
 8005ec4:	f000 f847 	bl	8005f56 <__retarget_lock_init_recursive>
 8005ec8:	f7ff ff96 	bl	8005df8 <__sfp_lock_release>
 8005ecc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ed0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ed4:	6025      	str	r5, [r4, #0]
 8005ed6:	61a5      	str	r5, [r4, #24]
 8005ed8:	2208      	movs	r2, #8
 8005eda:	4629      	mov	r1, r5
 8005edc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ee0:	f7ff ff24 	bl	8005d2c <memset>
 8005ee4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ee8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005eec:	4620      	mov	r0, r4
 8005eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef0:	3468      	adds	r4, #104	; 0x68
 8005ef2:	e7d9      	b.n	8005ea8 <__sfp+0x1c>
 8005ef4:	2104      	movs	r1, #4
 8005ef6:	4638      	mov	r0, r7
 8005ef8:	f7ff ff62 	bl	8005dc0 <__sfmoreglue>
 8005efc:	4604      	mov	r4, r0
 8005efe:	6030      	str	r0, [r6, #0]
 8005f00:	2800      	cmp	r0, #0
 8005f02:	d1d5      	bne.n	8005eb0 <__sfp+0x24>
 8005f04:	f7ff ff78 	bl	8005df8 <__sfp_lock_release>
 8005f08:	230c      	movs	r3, #12
 8005f0a:	603b      	str	r3, [r7, #0]
 8005f0c:	e7ee      	b.n	8005eec <__sfp+0x60>
 8005f0e:	bf00      	nop
 8005f10:	08006d60 	.word	0x08006d60
 8005f14:	ffff0001 	.word	0xffff0001

08005f18 <_fwalk_reent>:
 8005f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f1c:	4606      	mov	r6, r0
 8005f1e:	4688      	mov	r8, r1
 8005f20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f24:	2700      	movs	r7, #0
 8005f26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f2a:	f1b9 0901 	subs.w	r9, r9, #1
 8005f2e:	d505      	bpl.n	8005f3c <_fwalk_reent+0x24>
 8005f30:	6824      	ldr	r4, [r4, #0]
 8005f32:	2c00      	cmp	r4, #0
 8005f34:	d1f7      	bne.n	8005f26 <_fwalk_reent+0xe>
 8005f36:	4638      	mov	r0, r7
 8005f38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3c:	89ab      	ldrh	r3, [r5, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d907      	bls.n	8005f52 <_fwalk_reent+0x3a>
 8005f42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f46:	3301      	adds	r3, #1
 8005f48:	d003      	beq.n	8005f52 <_fwalk_reent+0x3a>
 8005f4a:	4629      	mov	r1, r5
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	47c0      	blx	r8
 8005f50:	4307      	orrs	r7, r0
 8005f52:	3568      	adds	r5, #104	; 0x68
 8005f54:	e7e9      	b.n	8005f2a <_fwalk_reent+0x12>

08005f56 <__retarget_lock_init_recursive>:
 8005f56:	4770      	bx	lr

08005f58 <__retarget_lock_acquire_recursive>:
 8005f58:	4770      	bx	lr

08005f5a <__retarget_lock_release_recursive>:
 8005f5a:	4770      	bx	lr

08005f5c <sbrk_aligned>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4e0e      	ldr	r6, [pc, #56]	; (8005f98 <sbrk_aligned+0x3c>)
 8005f60:	460c      	mov	r4, r1
 8005f62:	6831      	ldr	r1, [r6, #0]
 8005f64:	4605      	mov	r5, r0
 8005f66:	b911      	cbnz	r1, 8005f6e <sbrk_aligned+0x12>
 8005f68:	f000 fb7a 	bl	8006660 <_sbrk_r>
 8005f6c:	6030      	str	r0, [r6, #0]
 8005f6e:	4621      	mov	r1, r4
 8005f70:	4628      	mov	r0, r5
 8005f72:	f000 fb75 	bl	8006660 <_sbrk_r>
 8005f76:	1c43      	adds	r3, r0, #1
 8005f78:	d00a      	beq.n	8005f90 <sbrk_aligned+0x34>
 8005f7a:	1cc4      	adds	r4, r0, #3
 8005f7c:	f024 0403 	bic.w	r4, r4, #3
 8005f80:	42a0      	cmp	r0, r4
 8005f82:	d007      	beq.n	8005f94 <sbrk_aligned+0x38>
 8005f84:	1a21      	subs	r1, r4, r0
 8005f86:	4628      	mov	r0, r5
 8005f88:	f000 fb6a 	bl	8006660 <_sbrk_r>
 8005f8c:	3001      	adds	r0, #1
 8005f8e:	d101      	bne.n	8005f94 <sbrk_aligned+0x38>
 8005f90:	f04f 34ff 	mov.w	r4, #4294967295
 8005f94:	4620      	mov	r0, r4
 8005f96:	bd70      	pop	{r4, r5, r6, pc}
 8005f98:	20004ad8 	.word	0x20004ad8

08005f9c <_malloc_r>:
 8005f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fa0:	1ccd      	adds	r5, r1, #3
 8005fa2:	f025 0503 	bic.w	r5, r5, #3
 8005fa6:	3508      	adds	r5, #8
 8005fa8:	2d0c      	cmp	r5, #12
 8005faa:	bf38      	it	cc
 8005fac:	250c      	movcc	r5, #12
 8005fae:	2d00      	cmp	r5, #0
 8005fb0:	4607      	mov	r7, r0
 8005fb2:	db01      	blt.n	8005fb8 <_malloc_r+0x1c>
 8005fb4:	42a9      	cmp	r1, r5
 8005fb6:	d905      	bls.n	8005fc4 <_malloc_r+0x28>
 8005fb8:	230c      	movs	r3, #12
 8005fba:	603b      	str	r3, [r7, #0]
 8005fbc:	2600      	movs	r6, #0
 8005fbe:	4630      	mov	r0, r6
 8005fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fc4:	4e2e      	ldr	r6, [pc, #184]	; (8006080 <_malloc_r+0xe4>)
 8005fc6:	f000 fdbb 	bl	8006b40 <__malloc_lock>
 8005fca:	6833      	ldr	r3, [r6, #0]
 8005fcc:	461c      	mov	r4, r3
 8005fce:	bb34      	cbnz	r4, 800601e <_malloc_r+0x82>
 8005fd0:	4629      	mov	r1, r5
 8005fd2:	4638      	mov	r0, r7
 8005fd4:	f7ff ffc2 	bl	8005f5c <sbrk_aligned>
 8005fd8:	1c43      	adds	r3, r0, #1
 8005fda:	4604      	mov	r4, r0
 8005fdc:	d14d      	bne.n	800607a <_malloc_r+0xde>
 8005fde:	6834      	ldr	r4, [r6, #0]
 8005fe0:	4626      	mov	r6, r4
 8005fe2:	2e00      	cmp	r6, #0
 8005fe4:	d140      	bne.n	8006068 <_malloc_r+0xcc>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	4631      	mov	r1, r6
 8005fea:	4638      	mov	r0, r7
 8005fec:	eb04 0803 	add.w	r8, r4, r3
 8005ff0:	f000 fb36 	bl	8006660 <_sbrk_r>
 8005ff4:	4580      	cmp	r8, r0
 8005ff6:	d13a      	bne.n	800606e <_malloc_r+0xd2>
 8005ff8:	6821      	ldr	r1, [r4, #0]
 8005ffa:	3503      	adds	r5, #3
 8005ffc:	1a6d      	subs	r5, r5, r1
 8005ffe:	f025 0503 	bic.w	r5, r5, #3
 8006002:	3508      	adds	r5, #8
 8006004:	2d0c      	cmp	r5, #12
 8006006:	bf38      	it	cc
 8006008:	250c      	movcc	r5, #12
 800600a:	4629      	mov	r1, r5
 800600c:	4638      	mov	r0, r7
 800600e:	f7ff ffa5 	bl	8005f5c <sbrk_aligned>
 8006012:	3001      	adds	r0, #1
 8006014:	d02b      	beq.n	800606e <_malloc_r+0xd2>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	442b      	add	r3, r5
 800601a:	6023      	str	r3, [r4, #0]
 800601c:	e00e      	b.n	800603c <_malloc_r+0xa0>
 800601e:	6822      	ldr	r2, [r4, #0]
 8006020:	1b52      	subs	r2, r2, r5
 8006022:	d41e      	bmi.n	8006062 <_malloc_r+0xc6>
 8006024:	2a0b      	cmp	r2, #11
 8006026:	d916      	bls.n	8006056 <_malloc_r+0xba>
 8006028:	1961      	adds	r1, r4, r5
 800602a:	42a3      	cmp	r3, r4
 800602c:	6025      	str	r5, [r4, #0]
 800602e:	bf18      	it	ne
 8006030:	6059      	strne	r1, [r3, #4]
 8006032:	6863      	ldr	r3, [r4, #4]
 8006034:	bf08      	it	eq
 8006036:	6031      	streq	r1, [r6, #0]
 8006038:	5162      	str	r2, [r4, r5]
 800603a:	604b      	str	r3, [r1, #4]
 800603c:	4638      	mov	r0, r7
 800603e:	f104 060b 	add.w	r6, r4, #11
 8006042:	f000 fd83 	bl	8006b4c <__malloc_unlock>
 8006046:	f026 0607 	bic.w	r6, r6, #7
 800604a:	1d23      	adds	r3, r4, #4
 800604c:	1af2      	subs	r2, r6, r3
 800604e:	d0b6      	beq.n	8005fbe <_malloc_r+0x22>
 8006050:	1b9b      	subs	r3, r3, r6
 8006052:	50a3      	str	r3, [r4, r2]
 8006054:	e7b3      	b.n	8005fbe <_malloc_r+0x22>
 8006056:	6862      	ldr	r2, [r4, #4]
 8006058:	42a3      	cmp	r3, r4
 800605a:	bf0c      	ite	eq
 800605c:	6032      	streq	r2, [r6, #0]
 800605e:	605a      	strne	r2, [r3, #4]
 8006060:	e7ec      	b.n	800603c <_malloc_r+0xa0>
 8006062:	4623      	mov	r3, r4
 8006064:	6864      	ldr	r4, [r4, #4]
 8006066:	e7b2      	b.n	8005fce <_malloc_r+0x32>
 8006068:	4634      	mov	r4, r6
 800606a:	6876      	ldr	r6, [r6, #4]
 800606c:	e7b9      	b.n	8005fe2 <_malloc_r+0x46>
 800606e:	230c      	movs	r3, #12
 8006070:	603b      	str	r3, [r7, #0]
 8006072:	4638      	mov	r0, r7
 8006074:	f000 fd6a 	bl	8006b4c <__malloc_unlock>
 8006078:	e7a1      	b.n	8005fbe <_malloc_r+0x22>
 800607a:	6025      	str	r5, [r4, #0]
 800607c:	e7de      	b.n	800603c <_malloc_r+0xa0>
 800607e:	bf00      	nop
 8006080:	20004ad4 	.word	0x20004ad4

08006084 <__sfputc_r>:
 8006084:	6893      	ldr	r3, [r2, #8]
 8006086:	3b01      	subs	r3, #1
 8006088:	2b00      	cmp	r3, #0
 800608a:	b410      	push	{r4}
 800608c:	6093      	str	r3, [r2, #8]
 800608e:	da08      	bge.n	80060a2 <__sfputc_r+0x1e>
 8006090:	6994      	ldr	r4, [r2, #24]
 8006092:	42a3      	cmp	r3, r4
 8006094:	db01      	blt.n	800609a <__sfputc_r+0x16>
 8006096:	290a      	cmp	r1, #10
 8006098:	d103      	bne.n	80060a2 <__sfputc_r+0x1e>
 800609a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800609e:	f000 bb33 	b.w	8006708 <__swbuf_r>
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	1c58      	adds	r0, r3, #1
 80060a6:	6010      	str	r0, [r2, #0]
 80060a8:	7019      	strb	r1, [r3, #0]
 80060aa:	4608      	mov	r0, r1
 80060ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060b0:	4770      	bx	lr

080060b2 <__sfputs_r>:
 80060b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060b4:	4606      	mov	r6, r0
 80060b6:	460f      	mov	r7, r1
 80060b8:	4614      	mov	r4, r2
 80060ba:	18d5      	adds	r5, r2, r3
 80060bc:	42ac      	cmp	r4, r5
 80060be:	d101      	bne.n	80060c4 <__sfputs_r+0x12>
 80060c0:	2000      	movs	r0, #0
 80060c2:	e007      	b.n	80060d4 <__sfputs_r+0x22>
 80060c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060c8:	463a      	mov	r2, r7
 80060ca:	4630      	mov	r0, r6
 80060cc:	f7ff ffda 	bl	8006084 <__sfputc_r>
 80060d0:	1c43      	adds	r3, r0, #1
 80060d2:	d1f3      	bne.n	80060bc <__sfputs_r+0xa>
 80060d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080060d8 <_vfiprintf_r>:
 80060d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060dc:	460d      	mov	r5, r1
 80060de:	b09d      	sub	sp, #116	; 0x74
 80060e0:	4614      	mov	r4, r2
 80060e2:	4698      	mov	r8, r3
 80060e4:	4606      	mov	r6, r0
 80060e6:	b118      	cbz	r0, 80060f0 <_vfiprintf_r+0x18>
 80060e8:	6983      	ldr	r3, [r0, #24]
 80060ea:	b90b      	cbnz	r3, 80060f0 <_vfiprintf_r+0x18>
 80060ec:	f7ff fe96 	bl	8005e1c <__sinit>
 80060f0:	4b89      	ldr	r3, [pc, #548]	; (8006318 <_vfiprintf_r+0x240>)
 80060f2:	429d      	cmp	r5, r3
 80060f4:	d11b      	bne.n	800612e <_vfiprintf_r+0x56>
 80060f6:	6875      	ldr	r5, [r6, #4]
 80060f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80060fa:	07d9      	lsls	r1, r3, #31
 80060fc:	d405      	bmi.n	800610a <_vfiprintf_r+0x32>
 80060fe:	89ab      	ldrh	r3, [r5, #12]
 8006100:	059a      	lsls	r2, r3, #22
 8006102:	d402      	bmi.n	800610a <_vfiprintf_r+0x32>
 8006104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006106:	f7ff ff27 	bl	8005f58 <__retarget_lock_acquire_recursive>
 800610a:	89ab      	ldrh	r3, [r5, #12]
 800610c:	071b      	lsls	r3, r3, #28
 800610e:	d501      	bpl.n	8006114 <_vfiprintf_r+0x3c>
 8006110:	692b      	ldr	r3, [r5, #16]
 8006112:	b9eb      	cbnz	r3, 8006150 <_vfiprintf_r+0x78>
 8006114:	4629      	mov	r1, r5
 8006116:	4630      	mov	r0, r6
 8006118:	f000 fb5a 	bl	80067d0 <__swsetup_r>
 800611c:	b1c0      	cbz	r0, 8006150 <_vfiprintf_r+0x78>
 800611e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006120:	07dc      	lsls	r4, r3, #31
 8006122:	d50e      	bpl.n	8006142 <_vfiprintf_r+0x6a>
 8006124:	f04f 30ff 	mov.w	r0, #4294967295
 8006128:	b01d      	add	sp, #116	; 0x74
 800612a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612e:	4b7b      	ldr	r3, [pc, #492]	; (800631c <_vfiprintf_r+0x244>)
 8006130:	429d      	cmp	r5, r3
 8006132:	d101      	bne.n	8006138 <_vfiprintf_r+0x60>
 8006134:	68b5      	ldr	r5, [r6, #8]
 8006136:	e7df      	b.n	80060f8 <_vfiprintf_r+0x20>
 8006138:	4b79      	ldr	r3, [pc, #484]	; (8006320 <_vfiprintf_r+0x248>)
 800613a:	429d      	cmp	r5, r3
 800613c:	bf08      	it	eq
 800613e:	68f5      	ldreq	r5, [r6, #12]
 8006140:	e7da      	b.n	80060f8 <_vfiprintf_r+0x20>
 8006142:	89ab      	ldrh	r3, [r5, #12]
 8006144:	0598      	lsls	r0, r3, #22
 8006146:	d4ed      	bmi.n	8006124 <_vfiprintf_r+0x4c>
 8006148:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800614a:	f7ff ff06 	bl	8005f5a <__retarget_lock_release_recursive>
 800614e:	e7e9      	b.n	8006124 <_vfiprintf_r+0x4c>
 8006150:	2300      	movs	r3, #0
 8006152:	9309      	str	r3, [sp, #36]	; 0x24
 8006154:	2320      	movs	r3, #32
 8006156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800615a:	f8cd 800c 	str.w	r8, [sp, #12]
 800615e:	2330      	movs	r3, #48	; 0x30
 8006160:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006324 <_vfiprintf_r+0x24c>
 8006164:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006168:	f04f 0901 	mov.w	r9, #1
 800616c:	4623      	mov	r3, r4
 800616e:	469a      	mov	sl, r3
 8006170:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006174:	b10a      	cbz	r2, 800617a <_vfiprintf_r+0xa2>
 8006176:	2a25      	cmp	r2, #37	; 0x25
 8006178:	d1f9      	bne.n	800616e <_vfiprintf_r+0x96>
 800617a:	ebba 0b04 	subs.w	fp, sl, r4
 800617e:	d00b      	beq.n	8006198 <_vfiprintf_r+0xc0>
 8006180:	465b      	mov	r3, fp
 8006182:	4622      	mov	r2, r4
 8006184:	4629      	mov	r1, r5
 8006186:	4630      	mov	r0, r6
 8006188:	f7ff ff93 	bl	80060b2 <__sfputs_r>
 800618c:	3001      	adds	r0, #1
 800618e:	f000 80aa 	beq.w	80062e6 <_vfiprintf_r+0x20e>
 8006192:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006194:	445a      	add	r2, fp
 8006196:	9209      	str	r2, [sp, #36]	; 0x24
 8006198:	f89a 3000 	ldrb.w	r3, [sl]
 800619c:	2b00      	cmp	r3, #0
 800619e:	f000 80a2 	beq.w	80062e6 <_vfiprintf_r+0x20e>
 80061a2:	2300      	movs	r3, #0
 80061a4:	f04f 32ff 	mov.w	r2, #4294967295
 80061a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80061ac:	f10a 0a01 	add.w	sl, sl, #1
 80061b0:	9304      	str	r3, [sp, #16]
 80061b2:	9307      	str	r3, [sp, #28]
 80061b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80061b8:	931a      	str	r3, [sp, #104]	; 0x68
 80061ba:	4654      	mov	r4, sl
 80061bc:	2205      	movs	r2, #5
 80061be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061c2:	4858      	ldr	r0, [pc, #352]	; (8006324 <_vfiprintf_r+0x24c>)
 80061c4:	f7fa f80c 	bl	80001e0 <memchr>
 80061c8:	9a04      	ldr	r2, [sp, #16]
 80061ca:	b9d8      	cbnz	r0, 8006204 <_vfiprintf_r+0x12c>
 80061cc:	06d1      	lsls	r1, r2, #27
 80061ce:	bf44      	itt	mi
 80061d0:	2320      	movmi	r3, #32
 80061d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061d6:	0713      	lsls	r3, r2, #28
 80061d8:	bf44      	itt	mi
 80061da:	232b      	movmi	r3, #43	; 0x2b
 80061dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80061e0:	f89a 3000 	ldrb.w	r3, [sl]
 80061e4:	2b2a      	cmp	r3, #42	; 0x2a
 80061e6:	d015      	beq.n	8006214 <_vfiprintf_r+0x13c>
 80061e8:	9a07      	ldr	r2, [sp, #28]
 80061ea:	4654      	mov	r4, sl
 80061ec:	2000      	movs	r0, #0
 80061ee:	f04f 0c0a 	mov.w	ip, #10
 80061f2:	4621      	mov	r1, r4
 80061f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061f8:	3b30      	subs	r3, #48	; 0x30
 80061fa:	2b09      	cmp	r3, #9
 80061fc:	d94e      	bls.n	800629c <_vfiprintf_r+0x1c4>
 80061fe:	b1b0      	cbz	r0, 800622e <_vfiprintf_r+0x156>
 8006200:	9207      	str	r2, [sp, #28]
 8006202:	e014      	b.n	800622e <_vfiprintf_r+0x156>
 8006204:	eba0 0308 	sub.w	r3, r0, r8
 8006208:	fa09 f303 	lsl.w	r3, r9, r3
 800620c:	4313      	orrs	r3, r2
 800620e:	9304      	str	r3, [sp, #16]
 8006210:	46a2      	mov	sl, r4
 8006212:	e7d2      	b.n	80061ba <_vfiprintf_r+0xe2>
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	1d19      	adds	r1, r3, #4
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	9103      	str	r1, [sp, #12]
 800621c:	2b00      	cmp	r3, #0
 800621e:	bfbb      	ittet	lt
 8006220:	425b      	neglt	r3, r3
 8006222:	f042 0202 	orrlt.w	r2, r2, #2
 8006226:	9307      	strge	r3, [sp, #28]
 8006228:	9307      	strlt	r3, [sp, #28]
 800622a:	bfb8      	it	lt
 800622c:	9204      	strlt	r2, [sp, #16]
 800622e:	7823      	ldrb	r3, [r4, #0]
 8006230:	2b2e      	cmp	r3, #46	; 0x2e
 8006232:	d10c      	bne.n	800624e <_vfiprintf_r+0x176>
 8006234:	7863      	ldrb	r3, [r4, #1]
 8006236:	2b2a      	cmp	r3, #42	; 0x2a
 8006238:	d135      	bne.n	80062a6 <_vfiprintf_r+0x1ce>
 800623a:	9b03      	ldr	r3, [sp, #12]
 800623c:	1d1a      	adds	r2, r3, #4
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	9203      	str	r2, [sp, #12]
 8006242:	2b00      	cmp	r3, #0
 8006244:	bfb8      	it	lt
 8006246:	f04f 33ff 	movlt.w	r3, #4294967295
 800624a:	3402      	adds	r4, #2
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006334 <_vfiprintf_r+0x25c>
 8006252:	7821      	ldrb	r1, [r4, #0]
 8006254:	2203      	movs	r2, #3
 8006256:	4650      	mov	r0, sl
 8006258:	f7f9 ffc2 	bl	80001e0 <memchr>
 800625c:	b140      	cbz	r0, 8006270 <_vfiprintf_r+0x198>
 800625e:	2340      	movs	r3, #64	; 0x40
 8006260:	eba0 000a 	sub.w	r0, r0, sl
 8006264:	fa03 f000 	lsl.w	r0, r3, r0
 8006268:	9b04      	ldr	r3, [sp, #16]
 800626a:	4303      	orrs	r3, r0
 800626c:	3401      	adds	r4, #1
 800626e:	9304      	str	r3, [sp, #16]
 8006270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006274:	482c      	ldr	r0, [pc, #176]	; (8006328 <_vfiprintf_r+0x250>)
 8006276:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800627a:	2206      	movs	r2, #6
 800627c:	f7f9 ffb0 	bl	80001e0 <memchr>
 8006280:	2800      	cmp	r0, #0
 8006282:	d03f      	beq.n	8006304 <_vfiprintf_r+0x22c>
 8006284:	4b29      	ldr	r3, [pc, #164]	; (800632c <_vfiprintf_r+0x254>)
 8006286:	bb1b      	cbnz	r3, 80062d0 <_vfiprintf_r+0x1f8>
 8006288:	9b03      	ldr	r3, [sp, #12]
 800628a:	3307      	adds	r3, #7
 800628c:	f023 0307 	bic.w	r3, r3, #7
 8006290:	3308      	adds	r3, #8
 8006292:	9303      	str	r3, [sp, #12]
 8006294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006296:	443b      	add	r3, r7
 8006298:	9309      	str	r3, [sp, #36]	; 0x24
 800629a:	e767      	b.n	800616c <_vfiprintf_r+0x94>
 800629c:	fb0c 3202 	mla	r2, ip, r2, r3
 80062a0:	460c      	mov	r4, r1
 80062a2:	2001      	movs	r0, #1
 80062a4:	e7a5      	b.n	80061f2 <_vfiprintf_r+0x11a>
 80062a6:	2300      	movs	r3, #0
 80062a8:	3401      	adds	r4, #1
 80062aa:	9305      	str	r3, [sp, #20]
 80062ac:	4619      	mov	r1, r3
 80062ae:	f04f 0c0a 	mov.w	ip, #10
 80062b2:	4620      	mov	r0, r4
 80062b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062b8:	3a30      	subs	r2, #48	; 0x30
 80062ba:	2a09      	cmp	r2, #9
 80062bc:	d903      	bls.n	80062c6 <_vfiprintf_r+0x1ee>
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0c5      	beq.n	800624e <_vfiprintf_r+0x176>
 80062c2:	9105      	str	r1, [sp, #20]
 80062c4:	e7c3      	b.n	800624e <_vfiprintf_r+0x176>
 80062c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80062ca:	4604      	mov	r4, r0
 80062cc:	2301      	movs	r3, #1
 80062ce:	e7f0      	b.n	80062b2 <_vfiprintf_r+0x1da>
 80062d0:	ab03      	add	r3, sp, #12
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	462a      	mov	r2, r5
 80062d6:	4b16      	ldr	r3, [pc, #88]	; (8006330 <_vfiprintf_r+0x258>)
 80062d8:	a904      	add	r1, sp, #16
 80062da:	4630      	mov	r0, r6
 80062dc:	f3af 8000 	nop.w
 80062e0:	4607      	mov	r7, r0
 80062e2:	1c78      	adds	r0, r7, #1
 80062e4:	d1d6      	bne.n	8006294 <_vfiprintf_r+0x1bc>
 80062e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80062e8:	07d9      	lsls	r1, r3, #31
 80062ea:	d405      	bmi.n	80062f8 <_vfiprintf_r+0x220>
 80062ec:	89ab      	ldrh	r3, [r5, #12]
 80062ee:	059a      	lsls	r2, r3, #22
 80062f0:	d402      	bmi.n	80062f8 <_vfiprintf_r+0x220>
 80062f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062f4:	f7ff fe31 	bl	8005f5a <__retarget_lock_release_recursive>
 80062f8:	89ab      	ldrh	r3, [r5, #12]
 80062fa:	065b      	lsls	r3, r3, #25
 80062fc:	f53f af12 	bmi.w	8006124 <_vfiprintf_r+0x4c>
 8006300:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006302:	e711      	b.n	8006128 <_vfiprintf_r+0x50>
 8006304:	ab03      	add	r3, sp, #12
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	462a      	mov	r2, r5
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <_vfiprintf_r+0x258>)
 800630c:	a904      	add	r1, sp, #16
 800630e:	4630      	mov	r0, r6
 8006310:	f000 f880 	bl	8006414 <_printf_i>
 8006314:	e7e4      	b.n	80062e0 <_vfiprintf_r+0x208>
 8006316:	bf00      	nop
 8006318:	08006d84 	.word	0x08006d84
 800631c:	08006da4 	.word	0x08006da4
 8006320:	08006d64 	.word	0x08006d64
 8006324:	08006dc4 	.word	0x08006dc4
 8006328:	08006dce 	.word	0x08006dce
 800632c:	00000000 	.word	0x00000000
 8006330:	080060b3 	.word	0x080060b3
 8006334:	08006dca 	.word	0x08006dca

08006338 <_printf_common>:
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	4616      	mov	r6, r2
 800633e:	4699      	mov	r9, r3
 8006340:	688a      	ldr	r2, [r1, #8]
 8006342:	690b      	ldr	r3, [r1, #16]
 8006344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006348:	4293      	cmp	r3, r2
 800634a:	bfb8      	it	lt
 800634c:	4613      	movlt	r3, r2
 800634e:	6033      	str	r3, [r6, #0]
 8006350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006354:	4607      	mov	r7, r0
 8006356:	460c      	mov	r4, r1
 8006358:	b10a      	cbz	r2, 800635e <_printf_common+0x26>
 800635a:	3301      	adds	r3, #1
 800635c:	6033      	str	r3, [r6, #0]
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	0699      	lsls	r1, r3, #26
 8006362:	bf42      	ittt	mi
 8006364:	6833      	ldrmi	r3, [r6, #0]
 8006366:	3302      	addmi	r3, #2
 8006368:	6033      	strmi	r3, [r6, #0]
 800636a:	6825      	ldr	r5, [r4, #0]
 800636c:	f015 0506 	ands.w	r5, r5, #6
 8006370:	d106      	bne.n	8006380 <_printf_common+0x48>
 8006372:	f104 0a19 	add.w	sl, r4, #25
 8006376:	68e3      	ldr	r3, [r4, #12]
 8006378:	6832      	ldr	r2, [r6, #0]
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	42ab      	cmp	r3, r5
 800637e:	dc26      	bgt.n	80063ce <_printf_common+0x96>
 8006380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006384:	1e13      	subs	r3, r2, #0
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	bf18      	it	ne
 800638a:	2301      	movne	r3, #1
 800638c:	0692      	lsls	r2, r2, #26
 800638e:	d42b      	bmi.n	80063e8 <_printf_common+0xb0>
 8006390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006394:	4649      	mov	r1, r9
 8006396:	4638      	mov	r0, r7
 8006398:	47c0      	blx	r8
 800639a:	3001      	adds	r0, #1
 800639c:	d01e      	beq.n	80063dc <_printf_common+0xa4>
 800639e:	6823      	ldr	r3, [r4, #0]
 80063a0:	68e5      	ldr	r5, [r4, #12]
 80063a2:	6832      	ldr	r2, [r6, #0]
 80063a4:	f003 0306 	and.w	r3, r3, #6
 80063a8:	2b04      	cmp	r3, #4
 80063aa:	bf08      	it	eq
 80063ac:	1aad      	subeq	r5, r5, r2
 80063ae:	68a3      	ldr	r3, [r4, #8]
 80063b0:	6922      	ldr	r2, [r4, #16]
 80063b2:	bf0c      	ite	eq
 80063b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063b8:	2500      	movne	r5, #0
 80063ba:	4293      	cmp	r3, r2
 80063bc:	bfc4      	itt	gt
 80063be:	1a9b      	subgt	r3, r3, r2
 80063c0:	18ed      	addgt	r5, r5, r3
 80063c2:	2600      	movs	r6, #0
 80063c4:	341a      	adds	r4, #26
 80063c6:	42b5      	cmp	r5, r6
 80063c8:	d11a      	bne.n	8006400 <_printf_common+0xc8>
 80063ca:	2000      	movs	r0, #0
 80063cc:	e008      	b.n	80063e0 <_printf_common+0xa8>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4652      	mov	r2, sl
 80063d2:	4649      	mov	r1, r9
 80063d4:	4638      	mov	r0, r7
 80063d6:	47c0      	blx	r8
 80063d8:	3001      	adds	r0, #1
 80063da:	d103      	bne.n	80063e4 <_printf_common+0xac>
 80063dc:	f04f 30ff 	mov.w	r0, #4294967295
 80063e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063e4:	3501      	adds	r5, #1
 80063e6:	e7c6      	b.n	8006376 <_printf_common+0x3e>
 80063e8:	18e1      	adds	r1, r4, r3
 80063ea:	1c5a      	adds	r2, r3, #1
 80063ec:	2030      	movs	r0, #48	; 0x30
 80063ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80063f2:	4422      	add	r2, r4
 80063f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80063f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80063fc:	3302      	adds	r3, #2
 80063fe:	e7c7      	b.n	8006390 <_printf_common+0x58>
 8006400:	2301      	movs	r3, #1
 8006402:	4622      	mov	r2, r4
 8006404:	4649      	mov	r1, r9
 8006406:	4638      	mov	r0, r7
 8006408:	47c0      	blx	r8
 800640a:	3001      	adds	r0, #1
 800640c:	d0e6      	beq.n	80063dc <_printf_common+0xa4>
 800640e:	3601      	adds	r6, #1
 8006410:	e7d9      	b.n	80063c6 <_printf_common+0x8e>
	...

08006414 <_printf_i>:
 8006414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006418:	7e0f      	ldrb	r7, [r1, #24]
 800641a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800641c:	2f78      	cmp	r7, #120	; 0x78
 800641e:	4691      	mov	r9, r2
 8006420:	4680      	mov	r8, r0
 8006422:	460c      	mov	r4, r1
 8006424:	469a      	mov	sl, r3
 8006426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800642a:	d807      	bhi.n	800643c <_printf_i+0x28>
 800642c:	2f62      	cmp	r7, #98	; 0x62
 800642e:	d80a      	bhi.n	8006446 <_printf_i+0x32>
 8006430:	2f00      	cmp	r7, #0
 8006432:	f000 80d8 	beq.w	80065e6 <_printf_i+0x1d2>
 8006436:	2f58      	cmp	r7, #88	; 0x58
 8006438:	f000 80a3 	beq.w	8006582 <_printf_i+0x16e>
 800643c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006444:	e03a      	b.n	80064bc <_printf_i+0xa8>
 8006446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800644a:	2b15      	cmp	r3, #21
 800644c:	d8f6      	bhi.n	800643c <_printf_i+0x28>
 800644e:	a101      	add	r1, pc, #4	; (adr r1, 8006454 <_printf_i+0x40>)
 8006450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006454:	080064ad 	.word	0x080064ad
 8006458:	080064c1 	.word	0x080064c1
 800645c:	0800643d 	.word	0x0800643d
 8006460:	0800643d 	.word	0x0800643d
 8006464:	0800643d 	.word	0x0800643d
 8006468:	0800643d 	.word	0x0800643d
 800646c:	080064c1 	.word	0x080064c1
 8006470:	0800643d 	.word	0x0800643d
 8006474:	0800643d 	.word	0x0800643d
 8006478:	0800643d 	.word	0x0800643d
 800647c:	0800643d 	.word	0x0800643d
 8006480:	080065cd 	.word	0x080065cd
 8006484:	080064f1 	.word	0x080064f1
 8006488:	080065af 	.word	0x080065af
 800648c:	0800643d 	.word	0x0800643d
 8006490:	0800643d 	.word	0x0800643d
 8006494:	080065ef 	.word	0x080065ef
 8006498:	0800643d 	.word	0x0800643d
 800649c:	080064f1 	.word	0x080064f1
 80064a0:	0800643d 	.word	0x0800643d
 80064a4:	0800643d 	.word	0x0800643d
 80064a8:	080065b7 	.word	0x080065b7
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	1d1a      	adds	r2, r3, #4
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	602a      	str	r2, [r5, #0]
 80064b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064bc:	2301      	movs	r3, #1
 80064be:	e0a3      	b.n	8006608 <_printf_i+0x1f4>
 80064c0:	6820      	ldr	r0, [r4, #0]
 80064c2:	6829      	ldr	r1, [r5, #0]
 80064c4:	0606      	lsls	r6, r0, #24
 80064c6:	f101 0304 	add.w	r3, r1, #4
 80064ca:	d50a      	bpl.n	80064e2 <_printf_i+0xce>
 80064cc:	680e      	ldr	r6, [r1, #0]
 80064ce:	602b      	str	r3, [r5, #0]
 80064d0:	2e00      	cmp	r6, #0
 80064d2:	da03      	bge.n	80064dc <_printf_i+0xc8>
 80064d4:	232d      	movs	r3, #45	; 0x2d
 80064d6:	4276      	negs	r6, r6
 80064d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80064dc:	485e      	ldr	r0, [pc, #376]	; (8006658 <_printf_i+0x244>)
 80064de:	230a      	movs	r3, #10
 80064e0:	e019      	b.n	8006516 <_printf_i+0x102>
 80064e2:	680e      	ldr	r6, [r1, #0]
 80064e4:	602b      	str	r3, [r5, #0]
 80064e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064ea:	bf18      	it	ne
 80064ec:	b236      	sxthne	r6, r6
 80064ee:	e7ef      	b.n	80064d0 <_printf_i+0xbc>
 80064f0:	682b      	ldr	r3, [r5, #0]
 80064f2:	6820      	ldr	r0, [r4, #0]
 80064f4:	1d19      	adds	r1, r3, #4
 80064f6:	6029      	str	r1, [r5, #0]
 80064f8:	0601      	lsls	r1, r0, #24
 80064fa:	d501      	bpl.n	8006500 <_printf_i+0xec>
 80064fc:	681e      	ldr	r6, [r3, #0]
 80064fe:	e002      	b.n	8006506 <_printf_i+0xf2>
 8006500:	0646      	lsls	r6, r0, #25
 8006502:	d5fb      	bpl.n	80064fc <_printf_i+0xe8>
 8006504:	881e      	ldrh	r6, [r3, #0]
 8006506:	4854      	ldr	r0, [pc, #336]	; (8006658 <_printf_i+0x244>)
 8006508:	2f6f      	cmp	r7, #111	; 0x6f
 800650a:	bf0c      	ite	eq
 800650c:	2308      	moveq	r3, #8
 800650e:	230a      	movne	r3, #10
 8006510:	2100      	movs	r1, #0
 8006512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006516:	6865      	ldr	r5, [r4, #4]
 8006518:	60a5      	str	r5, [r4, #8]
 800651a:	2d00      	cmp	r5, #0
 800651c:	bfa2      	ittt	ge
 800651e:	6821      	ldrge	r1, [r4, #0]
 8006520:	f021 0104 	bicge.w	r1, r1, #4
 8006524:	6021      	strge	r1, [r4, #0]
 8006526:	b90e      	cbnz	r6, 800652c <_printf_i+0x118>
 8006528:	2d00      	cmp	r5, #0
 800652a:	d04d      	beq.n	80065c8 <_printf_i+0x1b4>
 800652c:	4615      	mov	r5, r2
 800652e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006532:	fb03 6711 	mls	r7, r3, r1, r6
 8006536:	5dc7      	ldrb	r7, [r0, r7]
 8006538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800653c:	4637      	mov	r7, r6
 800653e:	42bb      	cmp	r3, r7
 8006540:	460e      	mov	r6, r1
 8006542:	d9f4      	bls.n	800652e <_printf_i+0x11a>
 8006544:	2b08      	cmp	r3, #8
 8006546:	d10b      	bne.n	8006560 <_printf_i+0x14c>
 8006548:	6823      	ldr	r3, [r4, #0]
 800654a:	07de      	lsls	r6, r3, #31
 800654c:	d508      	bpl.n	8006560 <_printf_i+0x14c>
 800654e:	6923      	ldr	r3, [r4, #16]
 8006550:	6861      	ldr	r1, [r4, #4]
 8006552:	4299      	cmp	r1, r3
 8006554:	bfde      	ittt	le
 8006556:	2330      	movle	r3, #48	; 0x30
 8006558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800655c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006560:	1b52      	subs	r2, r2, r5
 8006562:	6122      	str	r2, [r4, #16]
 8006564:	f8cd a000 	str.w	sl, [sp]
 8006568:	464b      	mov	r3, r9
 800656a:	aa03      	add	r2, sp, #12
 800656c:	4621      	mov	r1, r4
 800656e:	4640      	mov	r0, r8
 8006570:	f7ff fee2 	bl	8006338 <_printf_common>
 8006574:	3001      	adds	r0, #1
 8006576:	d14c      	bne.n	8006612 <_printf_i+0x1fe>
 8006578:	f04f 30ff 	mov.w	r0, #4294967295
 800657c:	b004      	add	sp, #16
 800657e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006582:	4835      	ldr	r0, [pc, #212]	; (8006658 <_printf_i+0x244>)
 8006584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006588:	6829      	ldr	r1, [r5, #0]
 800658a:	6823      	ldr	r3, [r4, #0]
 800658c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006590:	6029      	str	r1, [r5, #0]
 8006592:	061d      	lsls	r5, r3, #24
 8006594:	d514      	bpl.n	80065c0 <_printf_i+0x1ac>
 8006596:	07df      	lsls	r7, r3, #31
 8006598:	bf44      	itt	mi
 800659a:	f043 0320 	orrmi.w	r3, r3, #32
 800659e:	6023      	strmi	r3, [r4, #0]
 80065a0:	b91e      	cbnz	r6, 80065aa <_printf_i+0x196>
 80065a2:	6823      	ldr	r3, [r4, #0]
 80065a4:	f023 0320 	bic.w	r3, r3, #32
 80065a8:	6023      	str	r3, [r4, #0]
 80065aa:	2310      	movs	r3, #16
 80065ac:	e7b0      	b.n	8006510 <_printf_i+0xfc>
 80065ae:	6823      	ldr	r3, [r4, #0]
 80065b0:	f043 0320 	orr.w	r3, r3, #32
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	2378      	movs	r3, #120	; 0x78
 80065b8:	4828      	ldr	r0, [pc, #160]	; (800665c <_printf_i+0x248>)
 80065ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80065be:	e7e3      	b.n	8006588 <_printf_i+0x174>
 80065c0:	0659      	lsls	r1, r3, #25
 80065c2:	bf48      	it	mi
 80065c4:	b2b6      	uxthmi	r6, r6
 80065c6:	e7e6      	b.n	8006596 <_printf_i+0x182>
 80065c8:	4615      	mov	r5, r2
 80065ca:	e7bb      	b.n	8006544 <_printf_i+0x130>
 80065cc:	682b      	ldr	r3, [r5, #0]
 80065ce:	6826      	ldr	r6, [r4, #0]
 80065d0:	6961      	ldr	r1, [r4, #20]
 80065d2:	1d18      	adds	r0, r3, #4
 80065d4:	6028      	str	r0, [r5, #0]
 80065d6:	0635      	lsls	r5, r6, #24
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	d501      	bpl.n	80065e0 <_printf_i+0x1cc>
 80065dc:	6019      	str	r1, [r3, #0]
 80065de:	e002      	b.n	80065e6 <_printf_i+0x1d2>
 80065e0:	0670      	lsls	r0, r6, #25
 80065e2:	d5fb      	bpl.n	80065dc <_printf_i+0x1c8>
 80065e4:	8019      	strh	r1, [r3, #0]
 80065e6:	2300      	movs	r3, #0
 80065e8:	6123      	str	r3, [r4, #16]
 80065ea:	4615      	mov	r5, r2
 80065ec:	e7ba      	b.n	8006564 <_printf_i+0x150>
 80065ee:	682b      	ldr	r3, [r5, #0]
 80065f0:	1d1a      	adds	r2, r3, #4
 80065f2:	602a      	str	r2, [r5, #0]
 80065f4:	681d      	ldr	r5, [r3, #0]
 80065f6:	6862      	ldr	r2, [r4, #4]
 80065f8:	2100      	movs	r1, #0
 80065fa:	4628      	mov	r0, r5
 80065fc:	f7f9 fdf0 	bl	80001e0 <memchr>
 8006600:	b108      	cbz	r0, 8006606 <_printf_i+0x1f2>
 8006602:	1b40      	subs	r0, r0, r5
 8006604:	6060      	str	r0, [r4, #4]
 8006606:	6863      	ldr	r3, [r4, #4]
 8006608:	6123      	str	r3, [r4, #16]
 800660a:	2300      	movs	r3, #0
 800660c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006610:	e7a8      	b.n	8006564 <_printf_i+0x150>
 8006612:	6923      	ldr	r3, [r4, #16]
 8006614:	462a      	mov	r2, r5
 8006616:	4649      	mov	r1, r9
 8006618:	4640      	mov	r0, r8
 800661a:	47d0      	blx	sl
 800661c:	3001      	adds	r0, #1
 800661e:	d0ab      	beq.n	8006578 <_printf_i+0x164>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	079b      	lsls	r3, r3, #30
 8006624:	d413      	bmi.n	800664e <_printf_i+0x23a>
 8006626:	68e0      	ldr	r0, [r4, #12]
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	4298      	cmp	r0, r3
 800662c:	bfb8      	it	lt
 800662e:	4618      	movlt	r0, r3
 8006630:	e7a4      	b.n	800657c <_printf_i+0x168>
 8006632:	2301      	movs	r3, #1
 8006634:	4632      	mov	r2, r6
 8006636:	4649      	mov	r1, r9
 8006638:	4640      	mov	r0, r8
 800663a:	47d0      	blx	sl
 800663c:	3001      	adds	r0, #1
 800663e:	d09b      	beq.n	8006578 <_printf_i+0x164>
 8006640:	3501      	adds	r5, #1
 8006642:	68e3      	ldr	r3, [r4, #12]
 8006644:	9903      	ldr	r1, [sp, #12]
 8006646:	1a5b      	subs	r3, r3, r1
 8006648:	42ab      	cmp	r3, r5
 800664a:	dcf2      	bgt.n	8006632 <_printf_i+0x21e>
 800664c:	e7eb      	b.n	8006626 <_printf_i+0x212>
 800664e:	2500      	movs	r5, #0
 8006650:	f104 0619 	add.w	r6, r4, #25
 8006654:	e7f5      	b.n	8006642 <_printf_i+0x22e>
 8006656:	bf00      	nop
 8006658:	08006dd5 	.word	0x08006dd5
 800665c:	08006de6 	.word	0x08006de6

08006660 <_sbrk_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4d06      	ldr	r5, [pc, #24]	; (800667c <_sbrk_r+0x1c>)
 8006664:	2300      	movs	r3, #0
 8006666:	4604      	mov	r4, r0
 8006668:	4608      	mov	r0, r1
 800666a:	602b      	str	r3, [r5, #0]
 800666c:	f7fa fb54 	bl	8000d18 <_sbrk>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_sbrk_r+0x1a>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_sbrk_r+0x1a>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	20004adc 	.word	0x20004adc

08006680 <__sread>:
 8006680:	b510      	push	{r4, lr}
 8006682:	460c      	mov	r4, r1
 8006684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006688:	f000 fab2 	bl	8006bf0 <_read_r>
 800668c:	2800      	cmp	r0, #0
 800668e:	bfab      	itete	ge
 8006690:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006692:	89a3      	ldrhlt	r3, [r4, #12]
 8006694:	181b      	addge	r3, r3, r0
 8006696:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800669a:	bfac      	ite	ge
 800669c:	6563      	strge	r3, [r4, #84]	; 0x54
 800669e:	81a3      	strhlt	r3, [r4, #12]
 80066a0:	bd10      	pop	{r4, pc}

080066a2 <__swrite>:
 80066a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a6:	461f      	mov	r7, r3
 80066a8:	898b      	ldrh	r3, [r1, #12]
 80066aa:	05db      	lsls	r3, r3, #23
 80066ac:	4605      	mov	r5, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	4616      	mov	r6, r2
 80066b2:	d505      	bpl.n	80066c0 <__swrite+0x1e>
 80066b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b8:	2302      	movs	r3, #2
 80066ba:	2200      	movs	r2, #0
 80066bc:	f000 f9c8 	bl	8006a50 <_lseek_r>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	4632      	mov	r2, r6
 80066ce:	463b      	mov	r3, r7
 80066d0:	4628      	mov	r0, r5
 80066d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066d6:	f000 b869 	b.w	80067ac <_write_r>

080066da <__sseek>:
 80066da:	b510      	push	{r4, lr}
 80066dc:	460c      	mov	r4, r1
 80066de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e2:	f000 f9b5 	bl	8006a50 <_lseek_r>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	bf15      	itete	ne
 80066ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80066ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066f6:	81a3      	strheq	r3, [r4, #12]
 80066f8:	bf18      	it	ne
 80066fa:	81a3      	strhne	r3, [r4, #12]
 80066fc:	bd10      	pop	{r4, pc}

080066fe <__sclose>:
 80066fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006702:	f000 b8d3 	b.w	80068ac <_close_r>
	...

08006708 <__swbuf_r>:
 8006708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800670a:	460e      	mov	r6, r1
 800670c:	4614      	mov	r4, r2
 800670e:	4605      	mov	r5, r0
 8006710:	b118      	cbz	r0, 800671a <__swbuf_r+0x12>
 8006712:	6983      	ldr	r3, [r0, #24]
 8006714:	b90b      	cbnz	r3, 800671a <__swbuf_r+0x12>
 8006716:	f7ff fb81 	bl	8005e1c <__sinit>
 800671a:	4b21      	ldr	r3, [pc, #132]	; (80067a0 <__swbuf_r+0x98>)
 800671c:	429c      	cmp	r4, r3
 800671e:	d12b      	bne.n	8006778 <__swbuf_r+0x70>
 8006720:	686c      	ldr	r4, [r5, #4]
 8006722:	69a3      	ldr	r3, [r4, #24]
 8006724:	60a3      	str	r3, [r4, #8]
 8006726:	89a3      	ldrh	r3, [r4, #12]
 8006728:	071a      	lsls	r2, r3, #28
 800672a:	d52f      	bpl.n	800678c <__swbuf_r+0x84>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	b36b      	cbz	r3, 800678c <__swbuf_r+0x84>
 8006730:	6923      	ldr	r3, [r4, #16]
 8006732:	6820      	ldr	r0, [r4, #0]
 8006734:	1ac0      	subs	r0, r0, r3
 8006736:	6963      	ldr	r3, [r4, #20]
 8006738:	b2f6      	uxtb	r6, r6
 800673a:	4283      	cmp	r3, r0
 800673c:	4637      	mov	r7, r6
 800673e:	dc04      	bgt.n	800674a <__swbuf_r+0x42>
 8006740:	4621      	mov	r1, r4
 8006742:	4628      	mov	r0, r5
 8006744:	f000 f948 	bl	80069d8 <_fflush_r>
 8006748:	bb30      	cbnz	r0, 8006798 <__swbuf_r+0x90>
 800674a:	68a3      	ldr	r3, [r4, #8]
 800674c:	3b01      	subs	r3, #1
 800674e:	60a3      	str	r3, [r4, #8]
 8006750:	6823      	ldr	r3, [r4, #0]
 8006752:	1c5a      	adds	r2, r3, #1
 8006754:	6022      	str	r2, [r4, #0]
 8006756:	701e      	strb	r6, [r3, #0]
 8006758:	6963      	ldr	r3, [r4, #20]
 800675a:	3001      	adds	r0, #1
 800675c:	4283      	cmp	r3, r0
 800675e:	d004      	beq.n	800676a <__swbuf_r+0x62>
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	07db      	lsls	r3, r3, #31
 8006764:	d506      	bpl.n	8006774 <__swbuf_r+0x6c>
 8006766:	2e0a      	cmp	r6, #10
 8006768:	d104      	bne.n	8006774 <__swbuf_r+0x6c>
 800676a:	4621      	mov	r1, r4
 800676c:	4628      	mov	r0, r5
 800676e:	f000 f933 	bl	80069d8 <_fflush_r>
 8006772:	b988      	cbnz	r0, 8006798 <__swbuf_r+0x90>
 8006774:	4638      	mov	r0, r7
 8006776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <__swbuf_r+0x9c>)
 800677a:	429c      	cmp	r4, r3
 800677c:	d101      	bne.n	8006782 <__swbuf_r+0x7a>
 800677e:	68ac      	ldr	r4, [r5, #8]
 8006780:	e7cf      	b.n	8006722 <__swbuf_r+0x1a>
 8006782:	4b09      	ldr	r3, [pc, #36]	; (80067a8 <__swbuf_r+0xa0>)
 8006784:	429c      	cmp	r4, r3
 8006786:	bf08      	it	eq
 8006788:	68ec      	ldreq	r4, [r5, #12]
 800678a:	e7ca      	b.n	8006722 <__swbuf_r+0x1a>
 800678c:	4621      	mov	r1, r4
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f81e 	bl	80067d0 <__swsetup_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	d0cb      	beq.n	8006730 <__swbuf_r+0x28>
 8006798:	f04f 37ff 	mov.w	r7, #4294967295
 800679c:	e7ea      	b.n	8006774 <__swbuf_r+0x6c>
 800679e:	bf00      	nop
 80067a0:	08006d84 	.word	0x08006d84
 80067a4:	08006da4 	.word	0x08006da4
 80067a8:	08006d64 	.word	0x08006d64

080067ac <_write_r>:
 80067ac:	b538      	push	{r3, r4, r5, lr}
 80067ae:	4d07      	ldr	r5, [pc, #28]	; (80067cc <_write_r+0x20>)
 80067b0:	4604      	mov	r4, r0
 80067b2:	4608      	mov	r0, r1
 80067b4:	4611      	mov	r1, r2
 80067b6:	2200      	movs	r2, #0
 80067b8:	602a      	str	r2, [r5, #0]
 80067ba:	461a      	mov	r2, r3
 80067bc:	f7fa fa5b 	bl	8000c76 <_write>
 80067c0:	1c43      	adds	r3, r0, #1
 80067c2:	d102      	bne.n	80067ca <_write_r+0x1e>
 80067c4:	682b      	ldr	r3, [r5, #0]
 80067c6:	b103      	cbz	r3, 80067ca <_write_r+0x1e>
 80067c8:	6023      	str	r3, [r4, #0]
 80067ca:	bd38      	pop	{r3, r4, r5, pc}
 80067cc:	20004adc 	.word	0x20004adc

080067d0 <__swsetup_r>:
 80067d0:	4b32      	ldr	r3, [pc, #200]	; (800689c <__swsetup_r+0xcc>)
 80067d2:	b570      	push	{r4, r5, r6, lr}
 80067d4:	681d      	ldr	r5, [r3, #0]
 80067d6:	4606      	mov	r6, r0
 80067d8:	460c      	mov	r4, r1
 80067da:	b125      	cbz	r5, 80067e6 <__swsetup_r+0x16>
 80067dc:	69ab      	ldr	r3, [r5, #24]
 80067de:	b913      	cbnz	r3, 80067e6 <__swsetup_r+0x16>
 80067e0:	4628      	mov	r0, r5
 80067e2:	f7ff fb1b 	bl	8005e1c <__sinit>
 80067e6:	4b2e      	ldr	r3, [pc, #184]	; (80068a0 <__swsetup_r+0xd0>)
 80067e8:	429c      	cmp	r4, r3
 80067ea:	d10f      	bne.n	800680c <__swsetup_r+0x3c>
 80067ec:	686c      	ldr	r4, [r5, #4]
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067f4:	0719      	lsls	r1, r3, #28
 80067f6:	d42c      	bmi.n	8006852 <__swsetup_r+0x82>
 80067f8:	06dd      	lsls	r5, r3, #27
 80067fa:	d411      	bmi.n	8006820 <__swsetup_r+0x50>
 80067fc:	2309      	movs	r3, #9
 80067fe:	6033      	str	r3, [r6, #0]
 8006800:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	f04f 30ff 	mov.w	r0, #4294967295
 800680a:	e03e      	b.n	800688a <__swsetup_r+0xba>
 800680c:	4b25      	ldr	r3, [pc, #148]	; (80068a4 <__swsetup_r+0xd4>)
 800680e:	429c      	cmp	r4, r3
 8006810:	d101      	bne.n	8006816 <__swsetup_r+0x46>
 8006812:	68ac      	ldr	r4, [r5, #8]
 8006814:	e7eb      	b.n	80067ee <__swsetup_r+0x1e>
 8006816:	4b24      	ldr	r3, [pc, #144]	; (80068a8 <__swsetup_r+0xd8>)
 8006818:	429c      	cmp	r4, r3
 800681a:	bf08      	it	eq
 800681c:	68ec      	ldreq	r4, [r5, #12]
 800681e:	e7e6      	b.n	80067ee <__swsetup_r+0x1e>
 8006820:	0758      	lsls	r0, r3, #29
 8006822:	d512      	bpl.n	800684a <__swsetup_r+0x7a>
 8006824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006826:	b141      	cbz	r1, 800683a <__swsetup_r+0x6a>
 8006828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800682c:	4299      	cmp	r1, r3
 800682e:	d002      	beq.n	8006836 <__swsetup_r+0x66>
 8006830:	4630      	mov	r0, r6
 8006832:	f000 f991 	bl	8006b58 <_free_r>
 8006836:	2300      	movs	r3, #0
 8006838:	6363      	str	r3, [r4, #52]	; 0x34
 800683a:	89a3      	ldrh	r3, [r4, #12]
 800683c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	2300      	movs	r3, #0
 8006844:	6063      	str	r3, [r4, #4]
 8006846:	6923      	ldr	r3, [r4, #16]
 8006848:	6023      	str	r3, [r4, #0]
 800684a:	89a3      	ldrh	r3, [r4, #12]
 800684c:	f043 0308 	orr.w	r3, r3, #8
 8006850:	81a3      	strh	r3, [r4, #12]
 8006852:	6923      	ldr	r3, [r4, #16]
 8006854:	b94b      	cbnz	r3, 800686a <__swsetup_r+0x9a>
 8006856:	89a3      	ldrh	r3, [r4, #12]
 8006858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800685c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006860:	d003      	beq.n	800686a <__swsetup_r+0x9a>
 8006862:	4621      	mov	r1, r4
 8006864:	4630      	mov	r0, r6
 8006866:	f000 f92b 	bl	8006ac0 <__smakebuf_r>
 800686a:	89a0      	ldrh	r0, [r4, #12]
 800686c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006870:	f010 0301 	ands.w	r3, r0, #1
 8006874:	d00a      	beq.n	800688c <__swsetup_r+0xbc>
 8006876:	2300      	movs	r3, #0
 8006878:	60a3      	str	r3, [r4, #8]
 800687a:	6963      	ldr	r3, [r4, #20]
 800687c:	425b      	negs	r3, r3
 800687e:	61a3      	str	r3, [r4, #24]
 8006880:	6923      	ldr	r3, [r4, #16]
 8006882:	b943      	cbnz	r3, 8006896 <__swsetup_r+0xc6>
 8006884:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006888:	d1ba      	bne.n	8006800 <__swsetup_r+0x30>
 800688a:	bd70      	pop	{r4, r5, r6, pc}
 800688c:	0781      	lsls	r1, r0, #30
 800688e:	bf58      	it	pl
 8006890:	6963      	ldrpl	r3, [r4, #20]
 8006892:	60a3      	str	r3, [r4, #8]
 8006894:	e7f4      	b.n	8006880 <__swsetup_r+0xb0>
 8006896:	2000      	movs	r0, #0
 8006898:	e7f7      	b.n	800688a <__swsetup_r+0xba>
 800689a:	bf00      	nop
 800689c:	20000010 	.word	0x20000010
 80068a0:	08006d84 	.word	0x08006d84
 80068a4:	08006da4 	.word	0x08006da4
 80068a8:	08006d64 	.word	0x08006d64

080068ac <_close_r>:
 80068ac:	b538      	push	{r3, r4, r5, lr}
 80068ae:	4d06      	ldr	r5, [pc, #24]	; (80068c8 <_close_r+0x1c>)
 80068b0:	2300      	movs	r3, #0
 80068b2:	4604      	mov	r4, r0
 80068b4:	4608      	mov	r0, r1
 80068b6:	602b      	str	r3, [r5, #0]
 80068b8:	f7fa f9f9 	bl	8000cae <_close>
 80068bc:	1c43      	adds	r3, r0, #1
 80068be:	d102      	bne.n	80068c6 <_close_r+0x1a>
 80068c0:	682b      	ldr	r3, [r5, #0]
 80068c2:	b103      	cbz	r3, 80068c6 <_close_r+0x1a>
 80068c4:	6023      	str	r3, [r4, #0]
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	20004adc 	.word	0x20004adc

080068cc <__sflush_r>:
 80068cc:	898a      	ldrh	r2, [r1, #12]
 80068ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d2:	4605      	mov	r5, r0
 80068d4:	0710      	lsls	r0, r2, #28
 80068d6:	460c      	mov	r4, r1
 80068d8:	d458      	bmi.n	800698c <__sflush_r+0xc0>
 80068da:	684b      	ldr	r3, [r1, #4]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dc05      	bgt.n	80068ec <__sflush_r+0x20>
 80068e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	dc02      	bgt.n	80068ec <__sflush_r+0x20>
 80068e6:	2000      	movs	r0, #0
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068ee:	2e00      	cmp	r6, #0
 80068f0:	d0f9      	beq.n	80068e6 <__sflush_r+0x1a>
 80068f2:	2300      	movs	r3, #0
 80068f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068f8:	682f      	ldr	r7, [r5, #0]
 80068fa:	602b      	str	r3, [r5, #0]
 80068fc:	d032      	beq.n	8006964 <__sflush_r+0x98>
 80068fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006900:	89a3      	ldrh	r3, [r4, #12]
 8006902:	075a      	lsls	r2, r3, #29
 8006904:	d505      	bpl.n	8006912 <__sflush_r+0x46>
 8006906:	6863      	ldr	r3, [r4, #4]
 8006908:	1ac0      	subs	r0, r0, r3
 800690a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800690c:	b10b      	cbz	r3, 8006912 <__sflush_r+0x46>
 800690e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006910:	1ac0      	subs	r0, r0, r3
 8006912:	2300      	movs	r3, #0
 8006914:	4602      	mov	r2, r0
 8006916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006918:	6a21      	ldr	r1, [r4, #32]
 800691a:	4628      	mov	r0, r5
 800691c:	47b0      	blx	r6
 800691e:	1c43      	adds	r3, r0, #1
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	d106      	bne.n	8006932 <__sflush_r+0x66>
 8006924:	6829      	ldr	r1, [r5, #0]
 8006926:	291d      	cmp	r1, #29
 8006928:	d82c      	bhi.n	8006984 <__sflush_r+0xb8>
 800692a:	4a2a      	ldr	r2, [pc, #168]	; (80069d4 <__sflush_r+0x108>)
 800692c:	40ca      	lsrs	r2, r1
 800692e:	07d6      	lsls	r6, r2, #31
 8006930:	d528      	bpl.n	8006984 <__sflush_r+0xb8>
 8006932:	2200      	movs	r2, #0
 8006934:	6062      	str	r2, [r4, #4]
 8006936:	04d9      	lsls	r1, r3, #19
 8006938:	6922      	ldr	r2, [r4, #16]
 800693a:	6022      	str	r2, [r4, #0]
 800693c:	d504      	bpl.n	8006948 <__sflush_r+0x7c>
 800693e:	1c42      	adds	r2, r0, #1
 8006940:	d101      	bne.n	8006946 <__sflush_r+0x7a>
 8006942:	682b      	ldr	r3, [r5, #0]
 8006944:	b903      	cbnz	r3, 8006948 <__sflush_r+0x7c>
 8006946:	6560      	str	r0, [r4, #84]	; 0x54
 8006948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800694a:	602f      	str	r7, [r5, #0]
 800694c:	2900      	cmp	r1, #0
 800694e:	d0ca      	beq.n	80068e6 <__sflush_r+0x1a>
 8006950:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006954:	4299      	cmp	r1, r3
 8006956:	d002      	beq.n	800695e <__sflush_r+0x92>
 8006958:	4628      	mov	r0, r5
 800695a:	f000 f8fd 	bl	8006b58 <_free_r>
 800695e:	2000      	movs	r0, #0
 8006960:	6360      	str	r0, [r4, #52]	; 0x34
 8006962:	e7c1      	b.n	80068e8 <__sflush_r+0x1c>
 8006964:	6a21      	ldr	r1, [r4, #32]
 8006966:	2301      	movs	r3, #1
 8006968:	4628      	mov	r0, r5
 800696a:	47b0      	blx	r6
 800696c:	1c41      	adds	r1, r0, #1
 800696e:	d1c7      	bne.n	8006900 <__sflush_r+0x34>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0c4      	beq.n	8006900 <__sflush_r+0x34>
 8006976:	2b1d      	cmp	r3, #29
 8006978:	d001      	beq.n	800697e <__sflush_r+0xb2>
 800697a:	2b16      	cmp	r3, #22
 800697c:	d101      	bne.n	8006982 <__sflush_r+0xb6>
 800697e:	602f      	str	r7, [r5, #0]
 8006980:	e7b1      	b.n	80068e6 <__sflush_r+0x1a>
 8006982:	89a3      	ldrh	r3, [r4, #12]
 8006984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006988:	81a3      	strh	r3, [r4, #12]
 800698a:	e7ad      	b.n	80068e8 <__sflush_r+0x1c>
 800698c:	690f      	ldr	r7, [r1, #16]
 800698e:	2f00      	cmp	r7, #0
 8006990:	d0a9      	beq.n	80068e6 <__sflush_r+0x1a>
 8006992:	0793      	lsls	r3, r2, #30
 8006994:	680e      	ldr	r6, [r1, #0]
 8006996:	bf08      	it	eq
 8006998:	694b      	ldreq	r3, [r1, #20]
 800699a:	600f      	str	r7, [r1, #0]
 800699c:	bf18      	it	ne
 800699e:	2300      	movne	r3, #0
 80069a0:	eba6 0807 	sub.w	r8, r6, r7
 80069a4:	608b      	str	r3, [r1, #8]
 80069a6:	f1b8 0f00 	cmp.w	r8, #0
 80069aa:	dd9c      	ble.n	80068e6 <__sflush_r+0x1a>
 80069ac:	6a21      	ldr	r1, [r4, #32]
 80069ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069b0:	4643      	mov	r3, r8
 80069b2:	463a      	mov	r2, r7
 80069b4:	4628      	mov	r0, r5
 80069b6:	47b0      	blx	r6
 80069b8:	2800      	cmp	r0, #0
 80069ba:	dc06      	bgt.n	80069ca <__sflush_r+0xfe>
 80069bc:	89a3      	ldrh	r3, [r4, #12]
 80069be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c2:	81a3      	strh	r3, [r4, #12]
 80069c4:	f04f 30ff 	mov.w	r0, #4294967295
 80069c8:	e78e      	b.n	80068e8 <__sflush_r+0x1c>
 80069ca:	4407      	add	r7, r0
 80069cc:	eba8 0800 	sub.w	r8, r8, r0
 80069d0:	e7e9      	b.n	80069a6 <__sflush_r+0xda>
 80069d2:	bf00      	nop
 80069d4:	20400001 	.word	0x20400001

080069d8 <_fflush_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	690b      	ldr	r3, [r1, #16]
 80069dc:	4605      	mov	r5, r0
 80069de:	460c      	mov	r4, r1
 80069e0:	b913      	cbnz	r3, 80069e8 <_fflush_r+0x10>
 80069e2:	2500      	movs	r5, #0
 80069e4:	4628      	mov	r0, r5
 80069e6:	bd38      	pop	{r3, r4, r5, pc}
 80069e8:	b118      	cbz	r0, 80069f2 <_fflush_r+0x1a>
 80069ea:	6983      	ldr	r3, [r0, #24]
 80069ec:	b90b      	cbnz	r3, 80069f2 <_fflush_r+0x1a>
 80069ee:	f7ff fa15 	bl	8005e1c <__sinit>
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <_fflush_r+0x6c>)
 80069f4:	429c      	cmp	r4, r3
 80069f6:	d11b      	bne.n	8006a30 <_fflush_r+0x58>
 80069f8:	686c      	ldr	r4, [r5, #4]
 80069fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0ef      	beq.n	80069e2 <_fflush_r+0xa>
 8006a02:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a04:	07d0      	lsls	r0, r2, #31
 8006a06:	d404      	bmi.n	8006a12 <_fflush_r+0x3a>
 8006a08:	0599      	lsls	r1, r3, #22
 8006a0a:	d402      	bmi.n	8006a12 <_fflush_r+0x3a>
 8006a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a0e:	f7ff faa3 	bl	8005f58 <__retarget_lock_acquire_recursive>
 8006a12:	4628      	mov	r0, r5
 8006a14:	4621      	mov	r1, r4
 8006a16:	f7ff ff59 	bl	80068cc <__sflush_r>
 8006a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a1c:	07da      	lsls	r2, r3, #31
 8006a1e:	4605      	mov	r5, r0
 8006a20:	d4e0      	bmi.n	80069e4 <_fflush_r+0xc>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	059b      	lsls	r3, r3, #22
 8006a26:	d4dd      	bmi.n	80069e4 <_fflush_r+0xc>
 8006a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a2a:	f7ff fa96 	bl	8005f5a <__retarget_lock_release_recursive>
 8006a2e:	e7d9      	b.n	80069e4 <_fflush_r+0xc>
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <_fflush_r+0x70>)
 8006a32:	429c      	cmp	r4, r3
 8006a34:	d101      	bne.n	8006a3a <_fflush_r+0x62>
 8006a36:	68ac      	ldr	r4, [r5, #8]
 8006a38:	e7df      	b.n	80069fa <_fflush_r+0x22>
 8006a3a:	4b04      	ldr	r3, [pc, #16]	; (8006a4c <_fflush_r+0x74>)
 8006a3c:	429c      	cmp	r4, r3
 8006a3e:	bf08      	it	eq
 8006a40:	68ec      	ldreq	r4, [r5, #12]
 8006a42:	e7da      	b.n	80069fa <_fflush_r+0x22>
 8006a44:	08006d84 	.word	0x08006d84
 8006a48:	08006da4 	.word	0x08006da4
 8006a4c:	08006d64 	.word	0x08006d64

08006a50 <_lseek_r>:
 8006a50:	b538      	push	{r3, r4, r5, lr}
 8006a52:	4d07      	ldr	r5, [pc, #28]	; (8006a70 <_lseek_r+0x20>)
 8006a54:	4604      	mov	r4, r0
 8006a56:	4608      	mov	r0, r1
 8006a58:	4611      	mov	r1, r2
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	602a      	str	r2, [r5, #0]
 8006a5e:	461a      	mov	r2, r3
 8006a60:	f7fa f94c 	bl	8000cfc <_lseek>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_lseek_r+0x1e>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_lseek_r+0x1e>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	20004adc 	.word	0x20004adc

08006a74 <__swhatbuf_r>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	460e      	mov	r6, r1
 8006a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7c:	2900      	cmp	r1, #0
 8006a7e:	b096      	sub	sp, #88	; 0x58
 8006a80:	4614      	mov	r4, r2
 8006a82:	461d      	mov	r5, r3
 8006a84:	da08      	bge.n	8006a98 <__swhatbuf_r+0x24>
 8006a86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	602a      	str	r2, [r5, #0]
 8006a8e:	061a      	lsls	r2, r3, #24
 8006a90:	d410      	bmi.n	8006ab4 <__swhatbuf_r+0x40>
 8006a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a96:	e00e      	b.n	8006ab6 <__swhatbuf_r+0x42>
 8006a98:	466a      	mov	r2, sp
 8006a9a:	f000 f8bb 	bl	8006c14 <_fstat_r>
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	dbf1      	blt.n	8006a86 <__swhatbuf_r+0x12>
 8006aa2:	9a01      	ldr	r2, [sp, #4]
 8006aa4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006aa8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006aac:	425a      	negs	r2, r3
 8006aae:	415a      	adcs	r2, r3
 8006ab0:	602a      	str	r2, [r5, #0]
 8006ab2:	e7ee      	b.n	8006a92 <__swhatbuf_r+0x1e>
 8006ab4:	2340      	movs	r3, #64	; 0x40
 8006ab6:	2000      	movs	r0, #0
 8006ab8:	6023      	str	r3, [r4, #0]
 8006aba:	b016      	add	sp, #88	; 0x58
 8006abc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ac0 <__smakebuf_r>:
 8006ac0:	898b      	ldrh	r3, [r1, #12]
 8006ac2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ac4:	079d      	lsls	r5, r3, #30
 8006ac6:	4606      	mov	r6, r0
 8006ac8:	460c      	mov	r4, r1
 8006aca:	d507      	bpl.n	8006adc <__smakebuf_r+0x1c>
 8006acc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	6123      	str	r3, [r4, #16]
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	6163      	str	r3, [r4, #20]
 8006ad8:	b002      	add	sp, #8
 8006ada:	bd70      	pop	{r4, r5, r6, pc}
 8006adc:	ab01      	add	r3, sp, #4
 8006ade:	466a      	mov	r2, sp
 8006ae0:	f7ff ffc8 	bl	8006a74 <__swhatbuf_r>
 8006ae4:	9900      	ldr	r1, [sp, #0]
 8006ae6:	4605      	mov	r5, r0
 8006ae8:	4630      	mov	r0, r6
 8006aea:	f7ff fa57 	bl	8005f9c <_malloc_r>
 8006aee:	b948      	cbnz	r0, 8006b04 <__smakebuf_r+0x44>
 8006af0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006af4:	059a      	lsls	r2, r3, #22
 8006af6:	d4ef      	bmi.n	8006ad8 <__smakebuf_r+0x18>
 8006af8:	f023 0303 	bic.w	r3, r3, #3
 8006afc:	f043 0302 	orr.w	r3, r3, #2
 8006b00:	81a3      	strh	r3, [r4, #12]
 8006b02:	e7e3      	b.n	8006acc <__smakebuf_r+0xc>
 8006b04:	4b0d      	ldr	r3, [pc, #52]	; (8006b3c <__smakebuf_r+0x7c>)
 8006b06:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b08:	89a3      	ldrh	r3, [r4, #12]
 8006b0a:	6020      	str	r0, [r4, #0]
 8006b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b10:	81a3      	strh	r3, [r4, #12]
 8006b12:	9b00      	ldr	r3, [sp, #0]
 8006b14:	6163      	str	r3, [r4, #20]
 8006b16:	9b01      	ldr	r3, [sp, #4]
 8006b18:	6120      	str	r0, [r4, #16]
 8006b1a:	b15b      	cbz	r3, 8006b34 <__smakebuf_r+0x74>
 8006b1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b20:	4630      	mov	r0, r6
 8006b22:	f000 f889 	bl	8006c38 <_isatty_r>
 8006b26:	b128      	cbz	r0, 8006b34 <__smakebuf_r+0x74>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f023 0303 	bic.w	r3, r3, #3
 8006b2e:	f043 0301 	orr.w	r3, r3, #1
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	89a0      	ldrh	r0, [r4, #12]
 8006b36:	4305      	orrs	r5, r0
 8006b38:	81a5      	strh	r5, [r4, #12]
 8006b3a:	e7cd      	b.n	8006ad8 <__smakebuf_r+0x18>
 8006b3c:	08005db5 	.word	0x08005db5

08006b40 <__malloc_lock>:
 8006b40:	4801      	ldr	r0, [pc, #4]	; (8006b48 <__malloc_lock+0x8>)
 8006b42:	f7ff ba09 	b.w	8005f58 <__retarget_lock_acquire_recursive>
 8006b46:	bf00      	nop
 8006b48:	20004ad0 	.word	0x20004ad0

08006b4c <__malloc_unlock>:
 8006b4c:	4801      	ldr	r0, [pc, #4]	; (8006b54 <__malloc_unlock+0x8>)
 8006b4e:	f7ff ba04 	b.w	8005f5a <__retarget_lock_release_recursive>
 8006b52:	bf00      	nop
 8006b54:	20004ad0 	.word	0x20004ad0

08006b58 <_free_r>:
 8006b58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b5a:	2900      	cmp	r1, #0
 8006b5c:	d044      	beq.n	8006be8 <_free_r+0x90>
 8006b5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b62:	9001      	str	r0, [sp, #4]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f1a1 0404 	sub.w	r4, r1, #4
 8006b6a:	bfb8      	it	lt
 8006b6c:	18e4      	addlt	r4, r4, r3
 8006b6e:	f7ff ffe7 	bl	8006b40 <__malloc_lock>
 8006b72:	4a1e      	ldr	r2, [pc, #120]	; (8006bec <_free_r+0x94>)
 8006b74:	9801      	ldr	r0, [sp, #4]
 8006b76:	6813      	ldr	r3, [r2, #0]
 8006b78:	b933      	cbnz	r3, 8006b88 <_free_r+0x30>
 8006b7a:	6063      	str	r3, [r4, #4]
 8006b7c:	6014      	str	r4, [r2, #0]
 8006b7e:	b003      	add	sp, #12
 8006b80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b84:	f7ff bfe2 	b.w	8006b4c <__malloc_unlock>
 8006b88:	42a3      	cmp	r3, r4
 8006b8a:	d908      	bls.n	8006b9e <_free_r+0x46>
 8006b8c:	6825      	ldr	r5, [r4, #0]
 8006b8e:	1961      	adds	r1, r4, r5
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf01      	itttt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	1949      	addeq	r1, r1, r5
 8006b9a:	6021      	streq	r1, [r4, #0]
 8006b9c:	e7ed      	b.n	8006b7a <_free_r+0x22>
 8006b9e:	461a      	mov	r2, r3
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	b10b      	cbz	r3, 8006ba8 <_free_r+0x50>
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	d9fa      	bls.n	8006b9e <_free_r+0x46>
 8006ba8:	6811      	ldr	r1, [r2, #0]
 8006baa:	1855      	adds	r5, r2, r1
 8006bac:	42a5      	cmp	r5, r4
 8006bae:	d10b      	bne.n	8006bc8 <_free_r+0x70>
 8006bb0:	6824      	ldr	r4, [r4, #0]
 8006bb2:	4421      	add	r1, r4
 8006bb4:	1854      	adds	r4, r2, r1
 8006bb6:	42a3      	cmp	r3, r4
 8006bb8:	6011      	str	r1, [r2, #0]
 8006bba:	d1e0      	bne.n	8006b7e <_free_r+0x26>
 8006bbc:	681c      	ldr	r4, [r3, #0]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	6053      	str	r3, [r2, #4]
 8006bc2:	4421      	add	r1, r4
 8006bc4:	6011      	str	r1, [r2, #0]
 8006bc6:	e7da      	b.n	8006b7e <_free_r+0x26>
 8006bc8:	d902      	bls.n	8006bd0 <_free_r+0x78>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	6003      	str	r3, [r0, #0]
 8006bce:	e7d6      	b.n	8006b7e <_free_r+0x26>
 8006bd0:	6825      	ldr	r5, [r4, #0]
 8006bd2:	1961      	adds	r1, r4, r5
 8006bd4:	428b      	cmp	r3, r1
 8006bd6:	bf04      	itt	eq
 8006bd8:	6819      	ldreq	r1, [r3, #0]
 8006bda:	685b      	ldreq	r3, [r3, #4]
 8006bdc:	6063      	str	r3, [r4, #4]
 8006bde:	bf04      	itt	eq
 8006be0:	1949      	addeq	r1, r1, r5
 8006be2:	6021      	streq	r1, [r4, #0]
 8006be4:	6054      	str	r4, [r2, #4]
 8006be6:	e7ca      	b.n	8006b7e <_free_r+0x26>
 8006be8:	b003      	add	sp, #12
 8006bea:	bd30      	pop	{r4, r5, pc}
 8006bec:	20004ad4 	.word	0x20004ad4

08006bf0 <_read_r>:
 8006bf0:	b538      	push	{r3, r4, r5, lr}
 8006bf2:	4d07      	ldr	r5, [pc, #28]	; (8006c10 <_read_r+0x20>)
 8006bf4:	4604      	mov	r4, r0
 8006bf6:	4608      	mov	r0, r1
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	602a      	str	r2, [r5, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	f7fa f81c 	bl	8000c3c <_read>
 8006c04:	1c43      	adds	r3, r0, #1
 8006c06:	d102      	bne.n	8006c0e <_read_r+0x1e>
 8006c08:	682b      	ldr	r3, [r5, #0]
 8006c0a:	b103      	cbz	r3, 8006c0e <_read_r+0x1e>
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	bd38      	pop	{r3, r4, r5, pc}
 8006c10:	20004adc 	.word	0x20004adc

08006c14 <_fstat_r>:
 8006c14:	b538      	push	{r3, r4, r5, lr}
 8006c16:	4d07      	ldr	r5, [pc, #28]	; (8006c34 <_fstat_r+0x20>)
 8006c18:	2300      	movs	r3, #0
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	4608      	mov	r0, r1
 8006c1e:	4611      	mov	r1, r2
 8006c20:	602b      	str	r3, [r5, #0]
 8006c22:	f7fa f850 	bl	8000cc6 <_fstat>
 8006c26:	1c43      	adds	r3, r0, #1
 8006c28:	d102      	bne.n	8006c30 <_fstat_r+0x1c>
 8006c2a:	682b      	ldr	r3, [r5, #0]
 8006c2c:	b103      	cbz	r3, 8006c30 <_fstat_r+0x1c>
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	bd38      	pop	{r3, r4, r5, pc}
 8006c32:	bf00      	nop
 8006c34:	20004adc 	.word	0x20004adc

08006c38 <_isatty_r>:
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4d06      	ldr	r5, [pc, #24]	; (8006c54 <_isatty_r+0x1c>)
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	4604      	mov	r4, r0
 8006c40:	4608      	mov	r0, r1
 8006c42:	602b      	str	r3, [r5, #0]
 8006c44:	f7fa f84f 	bl	8000ce6 <_isatty>
 8006c48:	1c43      	adds	r3, r0, #1
 8006c4a:	d102      	bne.n	8006c52 <_isatty_r+0x1a>
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	b103      	cbz	r3, 8006c52 <_isatty_r+0x1a>
 8006c50:	6023      	str	r3, [r4, #0]
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	20004adc 	.word	0x20004adc

08006c58 <_init>:
 8006c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c5a:	bf00      	nop
 8006c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c5e:	bc08      	pop	{r3}
 8006c60:	469e      	mov	lr, r3
 8006c62:	4770      	bx	lr

08006c64 <_fini>:
 8006c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c66:	bf00      	nop
 8006c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6a:	bc08      	pop	{r3}
 8006c6c:	469e      	mov	lr, r3
 8006c6e:	4770      	bx	lr
